{"version":3,"sources":["webpack:///src/app/control/cg-text/cg-text.component.ts","webpack:///src/app/control/cg-text/cg-text.component.html","webpack:///src/app/control/control.module.ts","webpack:///src/app/control/control.routing.ts","webpack:///src/app/control/news-cg/news-cg.component.html","webpack:///src/app/control/news-cg/news-cg.component.ts","webpack:///src/app/control/onair/onair.component.html","webpack:///src/app/control/onair/onair.component.ts","webpack:///src/app/control/services/control.service.ts","webpack:///src/app/control/services/onair.service.ts","webpack:///src/app/control/slide-data-dialog/slide-data-dialog.component.ts","webpack:///src/app/control/slide-data-dialog/slide-data-dialog.component.html","webpack:///src/app/control/sms/sms.component.ts","webpack:///src/app/control/sms/sms.component.html","webpack:///src/app/control/store/control.actions.ts","webpack:///src/app/control/store/control.effects.ts","webpack:///src/app/control/store/control.reducer.ts","webpack:///src/app/control/ticker/ticker.component.ts","webpack:///src/app/control/ticker/ticker.component.html"],"names":["CgTextComponent","ControlModule","CommonModule","RouterModule","ControlRoutes","FormsModule","DemoMaterialModule","FlexLayoutModule","PerfectScrollbarModule","DragulaModule","SharedModule","NgxDatatableModule","StoreModule","reducer","EffectsModule","ControlEffects","NewsCgComponent","TickerComponent","OnairComponent","SlideDataDialogComponent","SmsComponent","path","children","component","data","role","store","updates$","NewsList","selectedNewsKey","viewingKeyTmp","viewingKey","dispatch","pipe","ofType","subscribe","select","ControlState","newsCgState","list","list_news","selectedNews","length","id","news_bar_id","previousNews","nextNews","onAirService","dialog","snackBar","angularFirestore","sidePanelOpened","sidePanelOpened_noNews","destroySubject$","Subject","getSlides","onair","slides","forEach","slide","collection","doc","slide_id","set","then","response","console","log","error","sidenav","toggle","window","matchMedia","matches","selectedSlide","settings_selected_slide","slideId","content","slideData","Language","dialogRef","open","width","height","maxHeight","componentInstance","onAdd","result","addSlideData","re","err","status","deleteSlideData","sideBarToggle","Slide","lang","s_id","active","language","on_air_slides_id","ControlService","http","apiUrl","environment","get","put","post","OnairService","dhivehiEnabled","slide_data","EventEmitter","confirmation","close","language_code","emit","MAT_DIALOG_DATA","changeLanguage","closeDialog","addData","LOGOUT_CONTROL","GET_NEWS_CG_NEWS","GET_NEWS_CG_NEWS_SUCCESS","GET_NEWS_CG_NEWS_ERROR","UPDATE_NEWS_CG_NEWS","UPDATE_NEWS_CG_NEWS_SUCCESS","UPDATE_NEWS_CG_NEWS_ERROR","GET_CG_SETTINGS","GET_CG_SETTINGS_SUCCESS","GET_CG_SETTINGS_ERROR","STOP_NEWS_CG","STOP_NEWS_CG_SUCCESS","STOP_NEWS_CG_ERROR","LogoutEditorState","type","GetNewsCgNews","GetNewsCgNewsSuccess","payload","GetNewsCgNewsError","GetCgSettings","GetCgSettingsSuccess","GetCgSettingsError","UpdateNewsCgNews","UpdateNewsCgNewsSuccess","UpdateNewsCgNewsError","StopNewsCg","StopNewsCgSuccess","StopNewsCgError","actions$","controlService","GetNewsCgNews$","mergeMap","action","getNewsCgNews","map","catchError","of","UpdateNewsCgNews$","updateNewsCgText","StopNewsCg$","stopNewsCg","Effect","Observable","initialState","isLoaded","cgSettings","state","getReviewNewsState","createFeatureSelector"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAOaA,gB;AAEX,oCAAc;AAAA;AAAG;;;;iBAEjB,oBAAW,CACV;;;;;;;yBALUA,gB;AAAe,O;;;cAAfA,gB;AAAe,oC;AAAA,gB;AAAA,e;AAAA;AAAA;ACP5B;;AACE;;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCiDaC,c;;;;;yBAAAA,c;AAAa,O;;;cAAbA;;;kBAzBF,CACP,8CAAAC,YADO,EAEP,8CAAAC,YAAA,UAAsB,8CAAAC,aAAtB,CAFO,EAGP,6CAAAC,WAHO,EAIP,mDAAAC,kBAJO,EAKP,mDAAAC,gBALO,EAMP,oDAAAC,sBANO,EAOP,0CAAAC,aAPO,EAQP,mDAAAC,YARO,EASP,sDAAAC,kBATO,EAUP,0CAAAC,WAAA,YAAuB,cAAvB,EAAuC,oDAAAC,OAAvC,CAVO,EAWP,4CAAAC,aAAA,YAAyB,CAAC,oDAAAC,cAAD,CAAzB,CAXO,C;;;;6HAyBEd,c,EAAa;AAAA,yBAXtB,wDAAAe,eAWsB,EAVtB,wDAAAhB,eAUsB,EATtB,sDAAAiB,eASsB,EARtB,oDAAAC,cAQsB,EAPtB,4EAAAC,wBAOsB,EANtB,iDAAAC,YAMsB;AANV,oBAlBZ,8CAAAlB,YAkBY,EAlBA,0DAkBA,EAhBZ,6CAAAG,WAgBY,EAfZ,mDAAAC,kBAeY,EAdZ,mDAAAC,gBAcY,EAbZ,oDAAAC,sBAaY,EAZZ,0CAAAC,aAYY,EAXZ,mDAAAC,YAWY,EAVZ,sDAAAC,kBAUY,EAVM,4DAUN,EAVM,gEAUN;AAMU,S;AAhBJ,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5Bf,UAAMP,cAAa,GAAW,CACpC;AACGiB,YAAI,EAAE,EADT;AAEGC,gBAAQ,EAAE,CACV;AACED,cAAI,EAAE,SADR;AAEEE,mBAAS,EAAE,wDAAAP,eAFb;AAGEQ,cAAI,EAAE;AAAEC,gBAAI,EAAE;AAAR;AAHR,SADU,EAKP;AACDJ,cAAI,EAAE,SADL;AAEDE,mBAAS,EAAE,wDAAAvB,eAFV;AAGDwB,cAAI,EAAE;AAAEC,gBAAI,EAAE;AAAR;AAHL,SALO,EASP;AACDJ,cAAI,EAAE,QADL;AAEDE,mBAAS,EAAE,sDAAAN,eAFV;AAGDO,cAAI,EAAE;AAAEC,gBAAI,EAAE;AAAR;AAHL,SATO,EAaP;AACDJ,cAAI,EAAE,QADL;AAEDE,mBAAS,EAAE,oDAAAL,cAFV;AAGDM,cAAI,EAAE;AAAEC,gBAAI,EAAE;AAAR;AAHL,SAbO,EAiBP;AACDJ,cAAI,EAAE,KADL;AAEDE,mBAAS,EAAE,gDAAAH,YAFV;AAGDI,cAAI,EAAE;AAAEC,gBAAI,EAAE;AAAR;AAHL,SAjBO;AAFb,OADoC,CAA9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC4Ba;;AAAuG;;AAA6B;;;;;;AAA7B;;AAAA;;;;;;AACvG;;AAA2F;;AAA6B;;;;;;AAA7B;;AAAA;;;;;;AAJ/F;;AACE;;AAA6D;;AAA+B;;AAC5F;;AACE;;AACA;;AACF;;AACF;;;;;;AAL+D;;AAAA;;AAEpD;;AAAA;;AACA;;AAAA;;;;;;AALb;;AACE;;AAOF;;;;;;AAPwC;;AAAA;;;;;;AAW1C;;AACE;;AACE;;AACE;;AACI;;AACA;;AACJ;;AACF;;AACA;;AACI;;AACI;;AAAI;;AAAmB;;AACzB;;AACN;;AACF;;AACF;;;;;;AAcU;;AAA8E;;AAAa;;;;;;AAAb;;AAAA;;;;;;AAC9E;;AAAkE;;AAAa;;;;;;AAAb;;AAAA;;;;;;AAElE;;AAAmG;;AAAc;;;;;;AAAd;;AAAA;;;;;;AACnG;;AAAuF;;AAAc;;;;;;AAAd;;AAAA;;;;;;AAJvF;;AACA;;AACA;;AACA;;AACA;;;;;;AAJS;;AACA;;AAAA;;AAEqB;;AAAA;;AACA;;AAAA;;;;;;;;AAQ5B;;AAAqC;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACjC;;AAA+B;;AAAmB;;AACtD;;;;;;;;AACA;;AAAqC;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACjC;;AAA+B;;AAAkB;;AACrD;;;;;;AALA;;AAGA;;;;;;;;AAHiE;;AAGA;;AAAA;;;;;;AA3B7E;;AACI;;AAQE;;AACE;;AASF;;AAEA;;AACE;;AAUF;;AAEF;;AACJ;;;;;;AAhCM;;AAAA,6GAAkC,YAAlC,EAAkC,MAAlC,EAAkC,cAAlC,EAAkC,EAAlC,EAAkC,cAAlC,EAAkC,CAAlC,EAAkC,WAAlC,EAAkC,MAAlC;;AAMsC;;AAAA;;AAYF;;AAAA;;;;UCpEzCT,gB;AASX,kCACUU,KADV,EAEUC,QAFV,EAE2B;AAAA;;AADjB,eAAAD,KAAA,GAAAA,KAAA;AACA,eAAAC,QAAA,GAAAA,QAAA;AATV,eAAAC,QAAA,GAAW,IAAI,+CAAAA,QAAJ,EAAX;AAEA,eAAAC,eAAA,GAAkB,CAAlB;AAEA,eAAAC,aAAA,GAAwB,IAAxB;AACA,eAAAC,UAAA,GAAqB,IAArB;AAKK;;;;iBAEL,oBAAW;AAAA;;AACT,iBAAKL,KAAL,CAAWM,QAAX,CAAoB,IAAI,iEAAJ,EAApB;AAEA,iBAAKL,QAAL,CACGM,IADH,CACQ,+CAAAC,MAAA,EAAO,4EAAP,CADR,EAEGC,SAFH,CAEa,YAAM;AACf,mBAAI,CAACT,KAAL,CAAWU,MAAX,CAAkB,UAAAV,KAAK;AAAA,uBAAIA,KAAK,CAACW,YAAN,CAAmBC,WAAvB;AAAA,eAAvB,EACGH,SADH,CACa,UAACI,IAAD,EAAoB;AAC7B,qBAAI,CAACX,QAAL,GAAgBW,IAAhB;;AACA,oBAAG,KAAI,CAACX,QAAL,CAAcY,SAAjB,EAA2B;AACzB,uBAAI,CAACC,YAAL,GAAoB,KAAI,CAACb,QAAL,CAAcY,SAAd,CAAwB,KAAI,CAACX,eAA7B,CAApB;AACD,iBAFD,MAEK;AACH,uBAAI,CAACY,YAAL,GAAoB,IAApB;AACD;AACF,eARH;AASD,aAZH;AAcA,iBAAKd,QAAL,CACGM,IADH,CACQ,+CAAAC,MAAA,EAAO,+EAAP,CADR,EAEGC,SAFH,CAEa,YAAM;AACf,mBAAI,CAACJ,UAAL,GAAkB,KAAI,CAACD,aAAvB;AACD,aAJH;AAKD;;;iBAED,oBAAW;AACT,gBAAI,KAAKD,eAAL,GAAwB,KAAKD,QAAL,CAAcY,SAAd,CAAwBE,MAAxB,GAAiC,CAA7D,EAAgE;AAC9D,mBAAKb,eAAL,GAAuB,KAAKA,eAAL,GAAuB,CAA9C;AACD;;AACD,iBAAKY,YAAL,GAAoB,KAAKb,QAAL,CAAcY,SAAd,CAAwB,KAAKX,eAA7B,CAApB;AACD;;;iBAED,wBAAe;AACb,gBAAI,KAAKA,eAAL,GAAuB,CAA3B,EAA6B;AAC3B,mBAAKA,eAAL,GAAuB,KAAKA,eAAL,GAAuB,CAA9C;AACD;;AACD,iBAAKY,YAAL,GAAoB,KAAKb,QAAL,CAAcY,SAAd,CAAwB,KAAKX,eAA7B,CAApB;AACD;;;iBAED,kBAASc,EAAT,EAAqB;AACnB,iBAAKb,aAAL,GAAqBa,EAArB;AACA,iBAAKjB,KAAL,CAAWM,QAAX,CAAoB,IAAI,oEAAJ,CAAoC;AAAEY,yBAAW,EAAED;AAAf,aAApC,CAApB;AACD;;;iBAED,kBAAS;AACP,iBAAKjB,KAAL,CAAWM,QAAX,CAAoB,IAAI,8DAAJ,EAApB;AACD;;;;;;;yBA3DUhB,gB,EAAe,+G,EAAA,mH;AAAA,O;;;cAAfA,gB;AAAe,oC;AAAA,iB;AAAA,e;AAAA,+sD;AAAA;AAAA;ADS1B;;AAEI;;AACE;;AACI;;AACE;;AACE;;AAAiB;;AAAQ;;AAAiB;;AAAS;;AAErD;;AAEA;;AASF;;AAGA;;AAgBA;;AAqCA;;AACE;;AACI;;AAAwC;AAAA,qBAAS,IAAA6B,YAAA,EAAT;AAAuB,aAAvB;;AACpC;;AAA6D;;AAAY;;AAC7E;;AAEA;;AAAwC;AAAA,qBAAS,IAAAC,QAAA,EAAT;AAAmB,aAAnB;;AACpC;;AAA6D;;AAAa;;AAC9E;;AACJ;;AACF;;AAIF;;AACR;;AACF;;;;AArFyC;;AAAA;;AAIc;;AAAA;;AAYC;;AAAA;;AAgBA;;AAAA;;AAuC2B;;AAAA;;AAIJ;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEpCjE;;AAAuD;;AAAwB;;;;;;AAK/E;;AAAmE;;AAAW;;;;;;AAE9E;;AACE;;AAAU;;AAAS;;AACrB;;;;;;;;AAFQ;;;;;;;;AATV;;AAAe;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAEb;;AAEA;;AAAa;;AAAqB;;AAClC;;AAA+B;;AAAmB;;AAElD;;AAEA;;AAGA;;AACE;;AAAsC;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAwC;;AAAY;;AAC5F;;AAGF;;;;;;;;AAjB2E;;AAE9D;;AAAA;;AAEE;;AAAA;;AACkB;;AAAA;;AAEpB;;AAAA;;AAEsD;;AAAA;;;;;;AAoDzD;;AACI;;AAAiC;;AAAO;;AAC5C;;;;;;;;AANN;;AACE;;AAAqC;;AAAyB;;AAE9D;;AACI;;AAIA;;AAAyF;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACvF;;AAA4B;;AAAM;;AACpC;;AACJ;;AACF;;;;;;;;AAZK;;AAA4G,sGAAAH,EAAA;;AAC1E;;AAAA;;AAGwD;;AAAA;;;;;;AAZrG;;AAEE;;AACE;;AACE;;AAAuC;;AAAI;;AAC3C;;AAAyC;;AAAO;;AAClD;;AACA;;AACE;;AAaF;;AACF;;AAEF;;;;;;AAhBmF;;AAAA;;;;;;;;;;;UCvGhFzB,e;AAYX,iCACU6B,YADV,EAESC,MAFT,EAGSC,QAHT,EAIUC,gBAJV,EAI4C;AAAA;;AAHlC,eAAAH,YAAA,GAAAA,YAAA;AACD,eAAAC,MAAA,GAAAA,MAAA;AACA,eAAAC,QAAA,GAAAA,QAAA;AACC,eAAAC,gBAAA,GAAAA,gBAAA;AAdV,eAAAC,eAAA,GAAkB,IAAlB;AACA,eAAAC,sBAAA,GAAyB,IAAzB;AAKA,eAAAC,eAAA,GAAiC,IAAI,kCAAAC,OAAJ,EAAjC;AASK;;;;iBAEL,oBAAW;AAAA;;AACT,iBAAKP,YAAL,CAAkBQ,SAAlB,GAA8BpB,SAA9B,CAAwC,UAAAqB,KAAK,EAAI;AAC/C,oBAAI,CAACC,MAAL,GAAcD,KAAd;;AAEA,oBAAI,CAACC,MAAL,CAAYC,OAAZ,CAAoB,UAAAC,KAAK,EAAI;AAC3B,sBAAI,CAACT,gBAAL,CACGU,UADH,CACc,yBADd,EAEGC,GAFH,CAEOF,KAAK,CAACG,QAFb,EAGGC,GAHH,CAGOJ,KAHP,EAIGK,IAJH,CAIQ,UAAAC,QAAQ,EAAI;AAAEC,yBAAO,CAACC,GAAR,CAAYF,QAAZ;AAAuB,iBAJ7C,EAI+C,UAAAG,KAAK;AAAA,yBAAIA,KAAJ;AAAA,iBAJpD;AAKD,eAND;;AAQAF,qBAAO,CAACC,GAAR,CAAY,MAAI,CAACV,MAAjB;AACD,aAZD;AAaD;;;iBAID,yBAAgB;AACd,iBAAKY,OAAL,CAAaC,MAAb;AACD;;;iBAED,kBAAM;AACJ,mBAAOC,MAAM,CAACC,UAAP,uBAAwCC,OAA/C;AACD;;;iBAED,uBAAcd,KAAd,EAAyB;AACvB,iBAAKe,aAAL,GAAqBf,KAArB;AACA,iBAAKgB,uBAAL,GAA+BhB,KAAK,CAAChB,EAArC;AACAuB,mBAAO,CAACC,GAAR,CAAYR,KAAZ;AACD;;;iBAED,sBAAaiB,OAAb,EAA8B;AAAA;;AAC5B,gBAAIC,OAAO,GAAG,IAAIC,UAAJ,CAAc,IAAd,EAAoB,IAAI,+CAAAC,QAAJ,CAAa,KAAb,CAApB,EAAyC,KAAKJ,uBAA9C,EAAuE,CAAvE,CAAd;AAEA,gBAAIK,SAAS,GAAG,KAAKhC,MAAL,CAAYiC,IAAZ,CAAiB,4EAAA9D,wBAAjB,EAA2C;AAAE+D,mBAAK,EAAE,KAAT;AAAgBC,oBAAM,EAAE,MAAxB;AAAgCC,uBAAS,EAAE,KAA3C;AAAkD5D,kBAAI,EAAEqD;AAAxD,aAA3C,CAAhB;AAEAG,qBAAS,CAACK,iBAAV,CAA4BC,KAA5B,CAAkCnD,SAAlC,CAA4C,UAACoD,MAAD,EAAuB;AACjErB,qBAAO,CAACC,GAAR,CAAYoB,MAAZ;;AACA,oBAAI,CAACxC,YAAL,CAAkByC,YAAlB,CAA+BD,MAA/B,EAAuCpD,SAAvC,CAAiD,UAAAsD,EAAE,EAAI;AACrDvB,uBAAO,CAACC,GAAR,CAAYsB,EAAZ;AACA,sBAAI,CAAChC,MAAL,GAAcgC,EAAd;;AACA,sBAAI,CAAChC,MAAL,CAAYC,OAAZ,CAAoB,UAAAlC,IAAI,EAAI;AAC1B,sBAAGA,IAAI,CAACmB,EAAL,KAAY,MAAI,CAACgC,uBAApB,EAA6C;AAC3C,0BAAI,CAACD,aAAL,GAAqBlD,IAArB;AACD;AACF,iBAJD;AAKD,eARD;AASD,aAXD,EAYA,UAAAkE,GAAG,EAAE;AACHxB,qBAAO,CAACC,GAAR,CAAY,oBAAkBuB,GAAG,CAACC,MAAlC;AACD,aAdD;AAeD;;;iBAED,uBAAchD,EAAd,EAA0B;AAAA;;AACxB,iBAAKI,YAAL,CAAkB6C,eAAlB,CAAkCjD,EAAlC,EAAsCR,SAAtC,CAAgD,UAAAsD,EAAE,EAAI;AAEpD,oBAAI,CAAC1C,YAAL,CAAkBQ,SAAlB,GAA8BpB,SAA9B,CAAwC,UAAAqB,KAAK,EAAI;AAC/C,sBAAI,CAACC,MAAL,GAAcD,KAAd;;AAEA,sBAAI,CAACC,MAAL,CAAYC,OAAZ,CAAoB,UAAAlC,IAAI,EAAI;AAC1B,sBAAGA,IAAI,CAACmB,EAAL,KAAY,MAAI,CAACgC,uBAApB,EAA6C;AAC3C,0BAAI,CAACD,aAAL,GAAqBlD,IAArB;AACD;AACF,iBAJD;AAKD,eARD;AASD,aAXD,EAYA,UAAAkE,GAAG,EAAE;AACHxB,qBAAO,CAACC,GAAR,CAAY,6CAA2CuB,GAAG,CAACC,MAA3D;AACD,aAdD;AAeD;;;;;;;yBAzFUzE,e,EAAc,kI,EAAA,gI,EAAA,qI,EAAA,sI;AAAA,O;;;cAAdA,e;AAAc,kC;AAAA;AAAA;;;;;;;;;;;;;;;ADsB3B;;AACE;;AACE;;AACE;;AAEE;;AAA+E;AAAA,2CAA0B,QAAQ,CAAlC;AAAgE,aAAhE,EAAiE,OAAjE,EAAiE;AAAA,2CACrH,SAAS,GAAJ,uBAAI,IAA0B,KADkF;AAC7E,aADY;;AAE7E;;AACE;;AACE;;AAGE;;AAEE;;AACA;;AACA;;AACF;;AAEF;;AACF;;AACF;;AAEA;;AACE;;AAkBF;;AACF;;AAEA;;AACE;;AACE;;AAAQ;AAAA,qBAAS,IAAA2E,aAAA,EAAT;AAAwB,aAAxB;;AACN;;AAAU;;AAAU;;AACtB;;AAIA;;AAEE;;AAAqB;;AAAM;;AAC7B;;AACA;;AACE;;AAAqB;;AAAI;;AAC3B;;AASF;;AACF;;AAEA;;AAEE;;AAyBF;;AAEA;;AACI;;AACE;;AAAsE;AAAA,qBAAS,IAAAL,YAAA,sBAAT;AAAuC,aAAvC;;AAAyC;;AAAO;;AAIxH;;AASJ;;AACF;;AACF;;AACF;;AACF;;;;;;AApH6B;;AAAA;;AAEC;;AAAA,6GAAmC,QAAnC,EAAmC,aAAnC;;AASI;;AAAA;;AACiB;;AAAA;;AASyB;;AAAA;;AAiDnC;;AAAA;;AA6Be;;AAAA;;;;;;;UC3B3CM,M;;;;UAOAhB,U,GAMX,oBAAYtD,IAAZ,EAA2BuE,IAA3B,EAA4CC,IAA5C,EAA2DC,MAA3D,EAA4E;AAAA;;AAC1E,aAAKzE,IAAL,GAAgBA,IAAhB;AACA,aAAK0E,QAAL,GAAgBH,IAAhB;AACA,aAAKI,gBAAL,GAAwBH,IAAxB;AACA,aAAKC,MAAL,GAAgBA,MAAhB;AACD,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UC3HUG,e;AAGX,iCACUC,IADV,EAC0B;AAAA;;AAAhB,eAAAA,IAAA,GAAAA,IAAA;AAHF,eAAAC,MAAA,GAAS,uDAAAC,WAAA,OAAT;AAIH,S,CAEL;;;;;iBACA,yBAAa;AACX,mBAAO,KAAKF,IAAL,CAAUG,GAAV,CAAmB,KAAKF,MAAL,GAAc,iBAAjC,CAAP;AACD,W,CAED;;;;iBACA,6BAAiB;AACfpC,mBAAO,CAACC,GAAR,CAAY,qBAAZ,EADe,CAEf;;AACA,mBAAO,KAAKkC,IAAL,CAAUG,GAAV,CAAmB,KAAKF,MAAL,GAAc,iBAAjC,CAAP;AACD,W,CAED;;;;iBACA,0BAAiB1D,WAAjB,EAAsC;AACpC,mBAAO,KAAKyD,IAAL,CAAUI,GAAV,CAAmB,KAAKH,MAAL,GAAc,yBAAjC,EAA4D;AAAE,6BAAe1D,WAAjB;AAA8B,oBAAM;AAApC,aAA5D,CAAP;AACD;;;iBAED,sBAAa;AACX,mBAAO,KAAKyD,IAAL,CAAUK,IAAV,CAAoB,KAAKJ,MAAL,GAAc,sBAAlC,EAA0D,EAA1D,CAAP;AACD;;;;;;;yBA1BUF,e,EAAc,oH;AAAA,O;;;eAAdA,e;AAAc,iBAAdA,eAAc,K;AAAA,oBAFb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCADO,a;AAGX,+BACUN,IADV,EAC0B;AAAA;;AAAhB,eAAAA,IAAA,GAAAA,IAAA;AAHF,eAAAC,MAAA,GAAS,uDAAAC,WAAA,OAAT;AAIH,S,CAEL;;;;;iBACA,qBAAS;AACP,mBAAO,KAAKF,IAAL,CAAUG,GAAV,CAAmB,KAAKF,MAAL,GAAc,sBAAjC,CAAP;AACD,W,CAED;;;;iBACA,sBAAa9E,IAAb,EAA8B;AAC5B,mBAAO,KAAK6E,IAAL,CAAUK,IAAV,CAAoB,KAAKJ,MAAL,GAAc,0BAAlC,EAA8D9E,IAA9D,CAAP;AACD,W,CAED;;;;iBACA,yBAAgBmB,EAAhB,EAA4B;AAC1B,mBAAO,KAAK0D,IAAL,WAAsB,KAAKC,MAAL,GAAc,2BAAd,GAA0C3D,EAAhE,CAAP;AACD;;;;;;;yBApBUgE,a,EAAY,oH;AAAA,O;;;eAAZA,a;AAAY,iBAAZA,aAAY,K;AAAA,oBAFX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCIDxF,yB;AAMX,2CACS6D,SADT,EAEkCxD,IAFlC,EAEiD;AAAA;;AADxC,eAAAwD,SAAA,GAAAA,SAAA;AACyB,eAAAxD,IAAA,GAAAA,IAAA;AANlB,eAAAoF,cAAA,GAAiB,IAAjB;AAChB,eAAAC,UAAA,GAAwB,IAAI,oDAAA/B,SAAJ,CAAc,IAAd,EAAoB,IAAI,+CAAAC,QAAJ,CAAa,KAAb,CAApB,EAAyC,IAAzC,CAAxB;AACA,eAAAO,KAAA,GAAQ,IAAI,2CAAAwB,YAAJ,EAAR;AAKO;;;;iBAEP,oBAAW;AACT,iBAAKD,UAAL,GAAkB,KAAKrF,IAAvB;AACD;;;iBAED,qBAAYuF,YAAZ,EAAmC;AACjC,iBAAK/B,SAAL,CAAegC,KAAf,CAAqBD,YAArB;AACD;;;iBAED,0BAAiB;AACf,gBAAI,KAAKH,cAAT,EAAyB;AACvB,mBAAKC,UAAL,CAAgBX,QAAhB,CAAyBe,aAAzB,GAAyC,KAAzC;AACD,aAFD,MAEO;AACL,mBAAKJ,UAAL,CAAgBX,QAAhB,CAAyBe,aAAzB,GAAyC,KAAzC;AACD;AACF;;;iBAED,mBAAU;AACR;AACA,iBAAK3B,KAAL,CAAW4B,IAAX,CAAgB,KAAKL,UAArB;AACA,iBAAK7B,SAAL,CAAegC,KAAf,CAAqB,IAArB;AACD;;;;;;;yBA/BU7F,yB,EAAwB,mI,EAAA,gEAQzB,sDAAAgG,eARyB,C;AAQV,O;;;cARdhG,yB;AAAwB,8C;AAAA;AAAA;AAAA,S;AAAA,iB;AAAA,e;AAAA,inB;AAAA;AAAA;ACVrC;;AAAqB;;AAAiB;;AACtC;;AAA0D;AAAA;AAAA,eAA4B,eAA5B,EAA4B;AAAA,qBAAkB,IAAAiG,cAAA,EAAlB;AAAkC,aAA9D;;AAAgE;;AAAqC;;AAC/J;;AACE;;AAEI;;AACI;;AACE;;AACE;;AAAW;;AAAU;;AACrB;;AAA0D;AAAA;AAAA;;AAA1D;;AACF;;AACA;;;;AACF;;AACJ;;AAEJ;;AAEA;;AACE;;AAAiC;AAAA,qBAAS,IAAAC,WAAA,CAAY,IAAZ,CAAT;AAA0B,aAA1B;;AAA4B;;AAAM;;AACnE;;AAA0C;AAAA,qBAAS,IAAAC,OAAA,EAAT;AAAkB,aAAlB;;AAAsD;;AAAG;;AAErG;;AAEF;;;;;;AAtB0D;;AAAA;;AAAgE;;AAAA;;AAQlD;;AAAA,qGAA6B,gBAA7B,EAA6B,kBAA7B;;AAE5D;;AAAA;;AAQsD;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCZrDlG,a;AAEX,iCAAc;AAAA;AAAG;;;;iBAEjB,oBAAW,CACV;;;;;;;yBALUA,a;AAAY,O;;;cAAZA,a;AAAY,gC;AAAA,gB;AAAA,e;AAAA;AAAA;ACPzB;;AACE;;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCO,UAAMmG,eAAc,GAAG,0BAAvB;AAEA,UAAMC,iBAAgB,GAAG,4BAAzB;AACA,UAAMC,yBAAwB,GAAG,oCAAjC;AACA,UAAMC,uBAAsB,GAAG,kCAA/B;AAEA,UAAMC,oBAAmB,GAAG,+BAA5B;AACA,UAAMC,4BAA2B,GAAG,uCAApC;AACA,UAAMC,0BAAyB,GAAG,qCAAlC;AAEA,UAAMC,gBAAe,GAAG,2BAAxB;AACA,UAAMC,wBAAuB,GAAG,mCAAhC;AACA,UAAMC,sBAAqB,GAAG,iCAA9B;AAEA,UAAMC,aAAY,GAAG,wBAArB;AACA,UAAMC,qBAAoB,GAAG,gCAA7B;AACA,UAAMC,mBAAkB,GAAG,8BAA3B;;UAEMC,kB,GAAb;AAAA;;AACW,aAAAC,IAAA,GAAOd,eAAP;AACV,O;AAGD;;;;;UAGae,c,GAAb;AAAA;;AACW,aAAAD,IAAA,GAAOb,iBAAP;AACV,O;;UAEYe,qB,GAEX,+BAAmBC,OAAnB,EAAsC;AAAA;;AAAnB,aAAAA,OAAA,GAAAA,OAAA;AADV,aAAAH,IAAA,GAAOZ,yBAAP;AAC+B,O;;UAG7BgB,mB,GAAb;AAAA;;AACW,aAAAJ,IAAA,GAAOX,uBAAP;AACV,O;AAGD;;;;;UAGagB,c,GAAb;AAAA;;AACW,aAAAL,IAAA,GAAOP,gBAAP;AACV,O;;UAEYa,qB,GAEX,+BAAmBH,OAAnB,EAAsC;AAAA;;AAAnB,aAAAA,OAAA,GAAAA,OAAA;AADV,aAAAH,IAAA,GAAON,wBAAP;AAC+B,O;;UAG7Ba,mB,GAAb;AAAA;;AACW,aAAAP,IAAA,GAAOL,sBAAP;AACV,O;AAGD;;;;;UAGaa,iB,GAEX,2BAAmBL,OAAnB,EAAqD;AAAA;;AAAlC,aAAAA,OAAA,GAAAA,OAAA;AADV,aAAAH,IAAA,GAAOV,oBAAP;AAC8C,O;;UAG5CmB,wB,GAAb;AAAA;;AACW,aAAAT,IAAA,GAAOT,4BAAP;AACV,O;;UAEYmB,sB,GAAb;AAAA;;AACW,aAAAV,IAAA,GAAOR,0BAAP;AACV,O;AAGD;;;;;UAGamB,W,GAAb;AAAA;;AACW,aAAAX,IAAA,GAAOJ,aAAP,CADX,CAEE;AACD,O;;UAEYgB,kB,GAAb;AAAA;;AACW,aAAAZ,IAAA,GAAOH,qBAAP;AACV,O;;UAEYgB,gB,GAAb;AAAA;;AACW,aAAAb,IAAA,GAAOF,mBAAP;AACV,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UC5EYpH,e,GAEX,yBACUoI,QADV,EAEUC,cAFV,EAEwC;AAAA;;AAAA;;AAD9B,aAAAD,QAAA,GAAAA,QAAA;AACA,aAAAC,cAAA,GAAAA,cAAA;AAIV,aAAAC,cAAA,GAAqC,KAAKF,QAAL,CACnClH,IADmC,CAEjC,+CAAAC,MAAA,EAAqC,8DAArC,CAFiC,EAGjC,gDAAAoH,QAAA,EAAS,UAAAC,MAAM;AAAA,iBACb,MAAI,CAACH,cAAL,CAAoBI,aAApB,GAAoCvH,IAApC,CACA,gDAAAwH,GAAA,EAAI,UAACjI,IAAD,EAAU;AACZ0C,mBAAO,CAACC,GAAR,CAAY3C,IAAZ;AACA,mBAAO,IAAI,kEAAJ,CAAwCA,IAAxC,CAAP;AACD,WAHD,CADA,EAKA,gDAAAkI,UAAA,EAAW;AAAA,mBAAM,sCAAAC,EAAA,EAAG,IAAI,gEAAJ,EAAH,CAAN;AAAA,WAAX,CALA,CADa;AAAA,SAAf,CAHiC,CAArC;AAeA;;;;;;;;;;;AAaA,aAAAC,iBAAA,GAAwC,KAAKT,QAAL,CACtClH,IADsC,CAEpC,+CAAAC,MAAA,EAAwC,iEAAxC,CAFoC,EAGpC,gDAAAoH,QAAA,EAAS,UAAAC,MAAM;AAAA,iBACb,MAAI,CAACH,cAAL,CAAoBS,gBAApB,CAAqCN,MAAM,CAACf,OAAP,CAAe5F,WAApD,EAAiEX,IAAjE,CACA,gDAAAwH,GAAA,EAAI,UAACjI,IAAD,EAAU;AACZ0C,mBAAO,CAACC,GAAR,CAAY3C,IAAZ;AACA,mBAAO,IAAI,qEAAJ,EAAP;AACD,WAHD,CADA,EAKA,gDAAAkI,UAAA,EAAW;AAAA,mBAAM,sCAAAC,EAAA,EAAG,IAAI,mEAAJ,EAAH,CAAN;AAAA,WAAX,CALA,CADa;AAAA,SAAf,CAHoC,CAAxC;AAeE,aAAAG,WAAA,GAAkC,KAAKX,QAAL,CAChClH,IADgC,CAE9B,+CAAAC,MAAA,EAAwC,0DAAxC,CAF8B,EAG9B,gDAAAoH,QAAA,EAAS,UAAAC,MAAM;AAAA,iBACb,MAAI,CAACH,cAAL,CAAoBW,UAApB,GAAiC9H,IAAjC,CACA,gDAAAwH,GAAA,EAAI,UAACjI,IAAD,EAAU;AACZ0C,mBAAO,CAACC,GAAR,CAAY3C,IAAZ;AACA,mBAAO,IAAI,+DAAJ,EAAP;AACD,WAHD,CADA,EAKA,gDAAAkI,UAAA,EAAW;AAAA,mBAAM,sCAAAC,EAAA,EAAG,IAAI,6DAAJ,EAAH,CAAN;AAAA,WAAX,CALA,CADa;AAAA,SAAf,CAH8B,CAAlC;AA9CG,O;;;yBALM5I,e,EAAc,0G,EAAA,6H;AAAA,O;;;eAAdA,e;AAAc,iBAAdA,eAAc;;;AAQzB,kBADC,+CAAAiJ,MAAA,GACD,E,0BAAgB,kCAAAC,U,CAAhB,G,yBAAA,E,gBAAA,E,MAAA;;AA4BA,kBADC,+CAAAD,MAAA,GACD,E,0BAAmB,kCAAAC,U,CAAnB,G,yBAAA,E,mBAAA,E,MAAA;;AAeE,kBADC,+CAAAD,MAAA,GACD,E,0BAAa,kCAAAC,U,CAAb,G,yBAAA,E,aAAA,E,MAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxDG,UAAMC,aAAY,GAAiB;AACtC;AACA;AACA;AACA;AACAC,gBAAQ,EAAE,IAL4B;AAMtCC,kBAAU,EAAE,IAN0B;AAOtC9H,mBAAW,EAAE;AAPyB,OAAnC;;AAeA,eAASzB,QAAT,GAAqE;AAAA,YAApDwJ,KAAoD,uEAA5CH,aAA4C;AAAA,YAA9BX,MAA8B;AAC1ErF,eAAO,CAACC,GAAR,CAAYkG,KAAZ,EAAmBd,MAAnB;;AAEA,gBAAQA,MAAM,CAAClB,IAAf;AAEE,eAAK,8DAAL;AAAsC;AACpC,qBAAO,MAAP,OAAO,CAAP,kBACKgC,KADL,CAAO,EACG;AACRF,wBAAQ,EAAE;AADF,eADH,CAAP;AAID;;AAED,eAAK,sEAAL;AAA8C;AAC5C,qBAAO,MAAP,OAAO,CAAP,kBACKE,KADL,CAAO,EACG;AACRF,wBAAQ,EAAE,IADF;AAER7H,2BAAW,EAAEiH,MAAM,CAACf;AAFZ,eADH,CAAP;AAKD;;AAED,eAAK,6DAAL;AAAqC;AACnC,qBAAO,MAAP,OAAO,CAAP,kBACK6B,KADL,CAAO,EACG;AACRF,wBAAQ,EAAE;AADF,eADH,CAAP;AAID;;AAED,eAAK,qEAAL;AAA6C;AAC3C,qBAAO,MAAP,OAAO,CAAP,kBACKE,KADL,CAAO,EACG;AACRF,wBAAQ,EAAE,IADF;AAERC,0BAAU,EAAEb,MAAM,CAACf;AAFX,eADH,CAAP;AAKD;;AAED,eAAK,4DAAL;AAAoC;AAClC,qBAAO0B,aAAP;AACD;;AAED;AAAS;AACP,qBAAOG,KAAP;AACD;AAtCH;AAyCD;;AAEM,UAAMC,mBAAkB,GAAG,6CAAAC,qBAAA,EAAoC,cAApC,CAA3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UChEMtJ,gB;AAEX,oCAAc;AAAA;AAAG;;;;iBAEjB,oBAAW,CACV;;;;;;;yBALUA,gB;AAAe,O;;;cAAfA,gB;AAAe,mC;AAAA,gB;AAAA,e;AAAA;AAAA;ACP5B;;AACE;;AACF","file":"src_app_control_control_module_ts-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-cg-text',\n  templateUrl: './cg-text.component.html',\n  styleUrls: ['./cg-text.component.css']\n})\nexport class CgTextComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<p>\n  cg-text works!\n</p>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NewsCgComponent } from './news-cg/news-cg.component';\nimport { CgTextComponent } from './cg-text/cg-text.component';\nimport { TickerComponent } from './ticker/ticker.component';\nimport { RouterModule } from '@angular/router';\nimport { ControlRoutes } from './control.routing';\nimport { FormsModule } from '@angular/forms';\n\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\nimport { DemoMaterialModule } from '../demo-material-module';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { PerfectScrollbarModule } from 'ngx-perfect-scrollbar';\nimport { DragulaModule } from 'ng2-dragula';\nimport { SharedModule } from '../shared/shared.module';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducer } from './store/control.reducer';\nimport { ControlEffects } from './store/control.effects';\nimport { OnairComponent } from './onair/onair.component';\nimport { SlideDataDialogComponent } from './slide-data-dialog/slide-data-dialog.component';\nimport { SmsComponent } from './sms/sms.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(ControlRoutes),\n    FormsModule,\n    DemoMaterialModule,\n    FlexLayoutModule,\n    PerfectScrollbarModule,\n    DragulaModule,\n    SharedModule,\n    NgxDatatableModule,\n    StoreModule.forFeature('ControlState', reducer),\n    EffectsModule.forFeature([ControlEffects]),\n  ],\n  declarations: [\n    NewsCgComponent,\n    CgTextComponent,\n    TickerComponent,\n    OnairComponent,\n    SlideDataDialogComponent,\n    SmsComponent,\n  ],\n  entryComponents: [\n    SlideDataDialogComponent\n  ]\n})\nexport class ControlModule { }\n","import { Routes } from '@angular/router';\nimport { NewsCgComponent } from './news-cg/news-cg.component';\nimport { CgTextComponent } from './cg-text/cg-text.component';\nimport { TickerComponent } from './ticker/ticker.component';\nimport { OnairComponent } from './onair/onair.component';\nimport { SmsComponent } from './sms/sms.component';\n\nexport const ControlRoutes: Routes = [\n {\n    path: '',\n    children: [\n    {\n      path: 'news-cg',\n      component: NewsCgComponent,\n      data: { role: 'control' }\n    }, {\n      path: 'cg-text',\n      component: CgTextComponent,\n      data: { role: 'control' }\n    }, {\n      path: 'ticker',\n      component: TickerComponent,\n      data: { role: 'control' }\n    }, {\n      path: 'on-air',\n      component: OnairComponent,\n      data: { role: 'control' }\n    }, {\n      path: 'sms',\n      component: SmsComponent,\n      data: { role: 'control' }\n    }]\n  }\n];\n","<!-- ============================================================== -->\n<!-- Simple four boxes Row -->\n<!-- ============================================================== -->\n<!-- <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n  <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n    <mat-card>\n      <mat-card-content>\n\n          <div class=\"d-flex no-block\">\n\n              <button mat-raised-button color=\"primary\"><mat-icon>refresh</mat-icon> Load CG</button>\n              <button mat-raised-button color=\"warn\" class=\"m-l-20\" (click)=\"stopCg()\"><mat-icon>stop</mat-icon> Stop Bar</button>\n\n          </div>\n      </mat-card-content>\n    </mat-card>\n  </div>\n</div> -->\n\n\n\n  <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n      <!-- Column-->\n      <div fxFlex.gt-lg=\"75\" fxFlex.gt-md=\"60\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n        <mat-card>\n            <mat-card-content>\n              <div class=\"mb-1\">\n                <h1 class=\"mt-0\"><strong>{{NewsList.name}}</strong></h1>\n\n              </div>\n\n              <div fxLayout=\"row\" fxLayoutWrap=\"wrap\" *ngIf=\"NewsList.list_news.length > 0\">\n                <div fxFlex.gt-xs=\"100\" fxFlex=\"100\" *ngIf=\"selectedNews\">\n                  <h4 class=\"text-danger font-bold\" style=\"text-align:center;\">{{selectedNews.news.news_name}}</h4>\n                  <div fxLayout=\"column\">\n                    <span *ngIf=\"selectedNews.news.language.language_code == 'Dhv'\" class=\"dhv\" style=\"text-align:center;\">{{selectedNews.news.heading}}</span>\n                    <span *ngIf=\"selectedNews.news.language.language_code != 'Dhv'\" style=\"text-align:center;\">{{selectedNews.news.heading}}</span>\n                  </div>\n                </div>\n              </div>\n            </mat-card-content>\n\n            <!-- Nothing state -->\n            <mat-card-content class=\"table-responsive\" *ngIf=\"NewsList.list_news.length == 0\">\n              <div style=\"padding-top:100px;\">\n                <div fxLayout=\"row\" fxLayoutWrap=\"wrap\" style=\"height: 100%;padding: 0;margin: 0;display: -webkit-box;display: -moz-box;display: -ms-flexbox;display: -webkit-flex;display: flex;align-items: center;justify-content: center;\">\n                  <div fxLayout=\"row\">\n                      <img src=\"/assets/images/nothing-states/nothing-in-list.png\" style=\"width:auto; height:200px;\">\n                      <br>\n                  </div>\n                </div>\n                <div fxLayout=\"row\" fxLayoutWrap=\"wrap\" style=\"height: 100%;padding: 0;margin: 0;display: -webkit-box;display: -moz-box;display: -ms-flexbox;display: -webkit-flex;display: flex;align-items: center;justify-content: center;\">\n                    <div fxLayout=\"row\">\n                        <h3>No News in the List</h3>\n                      </div>\n                </div>\n              </div>\n            </mat-card-content>\n\n            <mat-card-content class=\"table-responsive\" *ngIf=\"NewsList.list_news.length > 0 && selectedNews\">\n                <ngx-datatable\n                  class=\"material\"\n                  [rows]=\"selectedNews.news.newsbar\"\n                  [columnMode]=\"'flex'\"\n                  [headerHeight]=\"50\"\n                  [footerHeight]=\"0\"\n                  [rowHeight]=\"'auto'\">\n\n                  <ngx-datatable-column name=\"News Bar\" [flexGrow]=\"4\">\n                    <ng-template ngx-datatable-cell-template let-row=\"row\">\n\n                      <strong *ngIf=\"selectedNews.news.language.language_code == 'Dhv'\" class=\"dhv\">{{row.title}}</strong>\n                      <strong *ngIf=\"selectedNews.news.language.language_code != 'Dhv'\">{{row.title}}</strong>\n                      <br/>\n                      <span class=\"mat-text-muted\" *ngIf=\"selectedNews.news.language.language_code == 'Dhv'\" class=\"dhv\">{{row.detail}}</span>\n                      <span class=\"mat-text-muted\" *ngIf=\"selectedNews.news.language.language_code != 'Dhv'\">{{row.detail}}</span>\n\n                    </ng-template>\n                  </ngx-datatable-column>\n\n                  <ngx-datatable-column name=\"Action\" [flexGrow]=\"1\">\n                    <ng-template ngx-datatable-cell-template let-row=\"row\">\n\n                        <button mat-icon-button color=\"warn\" (click)=\"updateCg(row.id)\" *ngIf=\"viewingKey != row.id\">\n                            <mat-icon aria-label=\"Play CG\">play_circle_outline</mat-icon>\n                        </button>\n                        <button mat-icon-button color=\"warn\" (click)=\"updateCg(row.id)\" *ngIf=\"viewingKey == row.id\">\n                            <mat-icon aria-label=\"Play CG\">play_circle_filled</mat-icon>\n                        </button>\n\n                    </ng-template>\n                  </ngx-datatable-column>\n\n                </ngx-datatable>\n            </mat-card-content>\n\n            <mat-card-content class=\"bg-light\">\n              <div class=\"d-flex\">\n                  <button mat-icon-button color=\"primary\" (click)=\"previousNews()\" [disabled]=\"!NewsList.list_news\">\n                      <mat-icon aria-label=\"Example icon-button with a heart icon\">chevron_left</mat-icon>\n                  </button>\n\n                  <button mat-icon-button color=\"primary\" (click)=\"nextNews()\" [disabled]=\"!NewsList.list_news\">\n                      <mat-icon aria-label=\"Example icon-button with a heart icon\">chevron_right</mat-icon>\n                  </button>\n              </div>\n            </mat-card-content>\n\n\n\n          </mat-card>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { News, NewsList, ListNews, ListOrder } from './../../news/models/news';\n\nimport { Store } from '@ngrx/store';\nimport * as controlActions from '../store/control.actions';\nimport {Actions, ofType} from '@ngrx/effects';\n\n@Component({\n  selector: 'app-news-cg',\n  templateUrl: './news-cg.component.html',\n  styleUrls: ['./news-cg.component.css']\n})\nexport class NewsCgComponent implements OnInit {\n\n  NewsList = new NewsList();\n  selectedNews: ListNews;\n  selectedNewsKey = 0;\n\n  viewingKeyTmp: number = null;\n  viewingKey: number = null;\n\n  constructor(\n    private store: Store<any>,\n    private updates$: Actions,\n  ) { }\n\n  ngOnInit() {\n    this.store.dispatch(new controlActions.GetNewsCgNews());\n\n    this.updates$\n      .pipe(ofType(controlActions.GET_NEWS_CG_NEWS_SUCCESS))\n      .subscribe(() => {\n        this.store.select(store => store.ControlState.newsCgState)\n          .subscribe((list: NewsList) => {\n            this.NewsList = list;\n            if(this.NewsList.list_news){\n              this.selectedNews = this.NewsList.list_news[this.selectedNewsKey];\n            }else{\n              this.selectedNews = null;\n            }\n          });\n      });\n\n    this.updates$\n      .pipe(ofType(controlActions.UPDATE_NEWS_CG_NEWS_SUCCESS))\n      .subscribe(() => {\n        this.viewingKey = this.viewingKeyTmp;\n      });\n  }\n\n  nextNews() {\n    if (this.selectedNewsKey < (this.NewsList.list_news.length - 1)){\n      this.selectedNewsKey = this.selectedNewsKey + 1;\n    }\n    this.selectedNews = this.NewsList.list_news[this.selectedNewsKey];\n  }\n\n  previousNews() {\n    if (this.selectedNewsKey > 0){\n      this.selectedNewsKey = this.selectedNewsKey - 1;\n    }\n    this.selectedNews = this.NewsList.list_news[this.selectedNewsKey];\n  }\n\n  updateCg(id: number) {\n    this.viewingKeyTmp = id;\n    this.store.dispatch(new controlActions.UpdateNewsCgNews({ news_bar_id: id }));\n  }\n\n  stopCg() {\n    this.store.dispatch(new controlActions.StopNewsCg());\n  }\n\n}\n","<!-- ============================================================== -->\n<!-- Simple four boxes Row -->\n<!-- ============================================================== -->\n<!-- <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n  <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n    <mat-card>\n      <mat-card-content>\n          <div class=\"d-flex no-block\">\n              <button mat-raised-button color=\"primary\"><mat-icon>refresh</mat-icon> Load CG</button>\n              <button mat-raised-button color=\"warn\" class=\"m-l-20 m-r-20\" (click)=\"stopCg()\"><mat-icon>stop</mat-icon> Stop Bar</button>\n\n              <mat-button-toggle-group #group=\"matButtonToggleGroup\" class=\"m-l-20\">\n                <mat-button-toggle value=\"left\">\n                  LIVE\n                </mat-button-toggle>\n                <mat-button-toggle value=\"center\">\n                  REPEAT\n                </mat-button-toggle>\n                <mat-button-toggle value=\"right\">\n                  RECORDED\n                </mat-button-toggle>\n                <mat-button-toggle value=\"justify\">\n                  NOTHING\n                </mat-button-toggle>\n              </mat-button-toggle-group>\n          </div>\n      </mat-card-content>\n    </mat-card>\n  </div>\n</div> -->\n\n\n\n\n\n\n\n\n\n\n<div fxLayout=\"row\" fxLayoutAlign=\"center start\">\n  <div fxFlex.gt-md=\"100\" fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n    <mat-card class=\"mat-card-top\">\n      <mat-sidenav-container [ngClass]=\"{ 'side-panel-opened': sidePanelOpened, 'side-panel-closed': !sidePanelOpened }\">\n\n        <mat-sidenav #sidebar [mode]=\"isOver() ? 'over' : 'side'\" [opened]=\"!isOver()\" (open)=\"sidePanelOpened = true || sidePanelOpened_noNews == true\"\n        (close)=\"sidePanelOpened = false || sidePanelOpened_noNews == false\">\n          <mat-toolbar color=\"primary\" class=\"no-shadow\">\n            <div fxLayout=\"row\" fxFlex=\"100\" >\n              <span class=\"m-t-0 font-14\">\n                <!-- <button mat-icon-button class=\"mr-1\"><mat-icon>inbox</mat-icon></button> -->\n\n                <mat-form-field>\n                  <!--<input matInput [matDatepicker]=\"picker\" [(ngModel)]=\"show_list_date\" (ngModelChange)=\"loadDateList($event)\">-->\n                  <input matInput [matDatepicker]=\"picker\">\n                  <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                  <mat-datepicker #picker></mat-datepicker>\n                </mat-form-field>\n\n              </span>\n            </div>\n          </mat-toolbar>\n\n          <mat-nav-list>\n            <mat-list-item (click)=\"onSelectSlide(slide)\" *ngFor=\"let slide of slides\" [style.background-color]=\"slide==selectedSlide ? 'rgba(127, 255, 212, 0.6)' : 'rgba(255, 255, 255, 0)'\">\n\n              <mat-icon *ngIf=\"slide==selectedSlide\" color=\"primary\">subdirectory_arrow_right</mat-icon>\n\n              <h3 matLine> {{slide.slide_name}} </h3>\n              <p matLine class=\"text-muted\"> {{slide.slide_id}} </p>\n\n              <mat-icon *ngIf=\"slide.id == settings_selected_slide\" color=\"warn\">offline_pin</mat-icon>\n\n              <button [matMenuTriggerFor]=\"them\" mat-icon-button class=\"ml-1\" *ngIf=\"slide.id != settings_selected_slide\">\n                <mat-icon>more_vert</mat-icon>\n              </button>\n              <mat-menu #them=\"matMenu\" x-position=\"before\">\n                <button mat-menu-item color=\"primary\" (click)=\"updateSelectedSlide(slide.id)\">Set Selected</button>\n              </mat-menu>\n\n\n            </mat-list-item>\n          </mat-nav-list>\n        </mat-sidenav>\n\n        <mat-toolbar class=\"bg-success no-shadow chat-right-panel\" color=\"warn\">\n          <div fxLayout=\"row\" fxFlex=\"100\" fxLayoutAlign=\"center center\">\n            <button (click)=\"sideBarToggle()\" class=\"mr-1\" mat-icon-button>\n              <mat-icon>short_text</mat-icon>\n            </button>\n            <!-- <span class=\"top-avatar m-r-10\">\n              <img src=\"{{selectedMessage.photo}}\" class=\"img-circle\">\n            </span> -->\n            <div fxFlex>\n              <!--<div class=\"font-14\" *ngIf=\"selectedList\">{{ selectedList.created_at | date }} {{ selectedList.name }}</div>-->\n              <div class=\"font-14\">&nbsp;</div>\n            </div>\n            <div fxFlex>\n              <div class=\"font-14\">News</div>\n            </div>\n            <!-- <button [matMenuTriggerFor]=\"them\" mat-icon-button class=\"ml-1\">\n              <mat-icon>more_vert</mat-icon>\n            </button>\n            <mat-menu #them=\"matMenu\" x-position=\"before\">\n              <button mat-menu-item color=\"primary\" [disabled]=\"!selectedNews\">Approve</button>\n              <button mat-menu-item color=\"warn\" [disabled]=\"!selectedNews\">Reject</button>\n              <button mat-menu-item color=\"link\" [disabled]=\"!selectedNews\">Edit</button>\n            </mat-menu> -->\n          </div>\n        </mat-toolbar>\n\n        <mat-card-content class=\"chat-middle-box\" style=\"min-height:700px;\">\n          <!-- selected list -->\n          <div class=\"table-rasponsive\" *ngIf=\"selectedSlide\">\n\n            <div class=\"table\">\n              <div class=\"table-header\">\n                <div class=\"header__item column-value\">Data</div>\n                <div class=\"header__item column-actions\">Actions</div>\n              </div>\n              <div class=\"table-content\">\n                <div class=\"table-row status_{{slide_content.id}}\" *ngFor=\"let slide_content of selectedSlide.onairslidecontent\" id=\"{{ slide_content.id }}\">\n                  <div class=\"table-data column-value\">{{ slide_content.value }}</div>\n\n                  <div class=\"table-data column-actions\">\n                      <button mat-icon-button color=\"basic\" matTooltip=\"View News\" matTooltipPosition=\"below\" *ngIf=\"active === 1\">\n                          <mat-icon aria-label=\"view news\">zoom_in</mat-icon>\n                      </button>\n\n                      <button mat-icon-button color=\"warn\" matTooltip=\"Remove News\" matTooltipPosition=\"below\" (click)=\"deleteContent(slide_content.id)\">\n                        <mat-icon aria-label=\"Edit\">delete</mat-icon>\n                      </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n          </div>\n        </mat-card-content>\n\n        <mat-card-actions class=\"chat-footer\">\n            <div align=\"end\">\n              <button mat-raised-button color=\"primary\" [disabled]=\"!selectedSlide\" (click)=\"addSlideData(selectedSlide.id)\">Add New</button>\n              <!-- <button mat-button color=\"basic\" [disabled]=\"!selectedNews\" (click)=\"onEdit()\">Edit</button>\n              <button mat-raised-button color=\"warn\" [disabled]=\"!selectedNews\" (click)=\"rejectNews()\">Reject</button>\n              <button mat-raised-button color=\"primary\" [disabled]=\"!selectedNews\" (click)=\"approveNews(selectedNews)\">Approve</button> -->\n            </div>\n          <!-- <div fxLayout=\"row\" layout-align=\"start center\">\n            <mat-form-field class=\"mr-1 ml-1\" fxFlex>\n              <input matInput placeholder=\"Send message\" >\n            </mat-form-field>\n            <button mat-fab color=\"warn\" >\n              <mat-icon>send</mat-icon>\n            </button>\n          </div> -->\n        </mat-card-actions>\n      </mat-sidenav-container>\n    </mat-card>\n  </div>\n</div>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSidenav } from '@angular/material/sidenav';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ControlService } from '../services/control.service';\nimport { OnairService } from '../services/onair.service';\nimport { SlideDataDialogComponent } from '../slide-data-dialog/slide-data-dialog.component';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { Language } from '../../news/models/news';\nimport {AngularFirestore} from '@angular/fire/firestore';\n\n@Component({\n  selector: 'app-onair',\n  templateUrl: './onair.component.html',\n  styleUrls: ['./onair.component.css']\n})\nexport class OnairComponent implements OnInit {\n\n  sidePanelOpened = true;\n  sidePanelOpened_noNews = true;\n\n  slides: Slide[];\n  selectedSlide: Slide;\n  settings_selected_slide: number;\n  destroySubject$: Subject<void> = new Subject();\n\n  @ViewChild('sidebar', {static: true}) sidenav: MatSidenav;\n\n  constructor(\n    private onAirService: OnairService,\n    public dialog: MatDialog,\n    public snackBar: MatSnackBar,\n    private angularFirestore: AngularFirestore\n  ) { }\n\n  ngOnInit() {\n    this.onAirService.getSlides().subscribe(onair => {\n      this.slides = onair;\n\n      this.slides.forEach(slide => {\n        this.angularFirestore\n          .collection(\"onair-slides-collection\")\n          .doc(slide.slide_id)\n          .set(slide)\n          .then(response => { console.log(response) }, error => error);\n      })\n\n      console.log(this.slides);\n    });\n  }\n\n\n\n  sideBarToggle() {\n    this.sidenav.toggle();\n  }\n\n  isOver(): boolean {\n    return window.matchMedia(`(max-width: 960px)`).matches;\n  }\n\n  onSelectSlide(slide:Slide){\n    this.selectedSlide = slide;\n    this.settings_selected_slide = slide.id;\n    console.log(slide)\n  }\n\n  addSlideData(slideId: number) {\n    let content = new slideData(null, new Language('Dhv'), this.settings_selected_slide, 0);\n\n    let dialogRef = this.dialog.open(SlideDataDialogComponent, { width: '40%', height: 'auto', maxHeight: '95%', data: content });\n\n    dialogRef.componentInstance.onAdd.subscribe((result: slideData) => {\n      console.log(result)\n      this.onAirService.addSlideData(result).subscribe(re => {\n        console.log(re)\n        this.slides = re;\n        this.slides.forEach(data => {\n          if(data.id === this.settings_selected_slide) {\n            this.selectedSlide = data;\n          }\n        })\n      })\n    },\n    err=>{\n      console.log(\"status code--->\"+err.status);\n    });\n  }\n\n  deleteContent(id: number) {\n    this.onAirService.deleteSlideData(id).subscribe(re => {\n\n      this.onAirService.getSlides().subscribe(onair => {\n        this.slides = onair;\n\n        this.slides.forEach(data => {\n          if(data.id === this.settings_selected_slide) {\n            this.selectedSlide = data;\n          }\n        })\n      });\n    },\n    err=>{\n      console.log(\"Err Deleting Slide Data, status code--->\"+err.status);\n    });\n  }\n\n\n}\n\n\n\n\nexport class Slide {\n  id: number;\n  slide_id: string;\n  slide_name: string;\n  onairslidecontent: slideData[];\n}\n\nexport class slideData{\n  data: string;\n  language: Language;\n  on_air_slides_id: number;\n  active: number;\n\n  constructor(data?: string, lang?: Language, s_id?: number, active?: number) {\n    this.data     = data;\n    this.language = lang;\n    this.on_air_slides_id = s_id;\n    this.active   = active;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams, HttpErrorResponse } from '@angular/common/http';\n\nimport { environment } from './../../../environments/environment';\nimport { News, ListOrder } from '../../news/models/news';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ControlService {\n  private apiUrl = environment.apiUrl;\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  // get selected list\n  getNewsCgNews () {\n    return this.http.get<any>(this.apiUrl + 'control/news/cg');\n  }\n\n  // get selected list\n  getNewsCgSettings () {\n    console.log('Getting cg settings')\n    //return this.http.get<any>(this.apiUrl + 'control/cg/settings/all');\n    return this.http.get<any>(this.apiUrl + 'control/news/cg');\n  }\n\n  //update news cg text\n  updateNewsCgText(news_bar_id: number) {\n    return this.http.put<any>(this.apiUrl + 'control/news/cg/update/', { \"news_bar_id\": news_bar_id, \"ip\": '' });\n  }\n\n  stopNewsCg() {\n    return this.http.post<any>(this.apiUrl + 'control/cg/news/stop', {});\n  }\n\n\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {environment} from '../../../environments/environment';\nimport {slideData} from '../onair/onair.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OnairService {\n  private apiUrl = environment.apiUrl;\n\n  constructor(\n    private http: HttpClient,\n  ) { }\n\n  // get selected list\n  getSlides () {\n    return this.http.get<any>(this.apiUrl + 'control/onair/slides');\n  }\n\n  //add slide data\n  addSlideData(data: slideData) {\n    return this.http.post<any>(this.apiUrl + 'control/onair/slide/data', data);\n  }\n\n  //add slide data\n  deleteSlideData(id: number) {\n    return this.http.delete<any>(this.apiUrl + 'control/onair/slide/data/'+id);\n  }\n}\n","import { Component, OnInit, Inject, Input, EventEmitter } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { slideData } from '../onair/onair.component';\nimport { Language } from '../../news/models/news';\n\n@Component({\n  selector: 'app-slide-data-dialog',\n  templateUrl: './slide-data-dialog.component.html',\n  styleUrls: ['./slide-data-dialog.component.css']\n})\nexport class SlideDataDialogComponent implements OnInit {\n\n  @Input() public dhivehiEnabled = true;\n  slide_data: slideData = new slideData(null, new Language('Dhv'), null);\n  onAdd = new EventEmitter();\n\n  constructor(\n    public dialogRef: MatDialogRef<SlideDataDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: slideData\n    ) { }\n\n  ngOnInit() {\n    this.slide_data = this.data;\n  }\n\n  closeDialog(confirmation: boolean) {\n    this.dialogRef.close(confirmation);\n  }\n\n  changeLanguage() {\n    if (this.dhivehiEnabled) {\n      this.slide_data.language.language_code = 'Dhv';\n    } else {\n      this.slide_data.language.language_code = 'Eng';\n    }\n  }\n\n  addData() {\n    // this.store.dispatch(new adminActions.CreateUser(this.user));\n    this.onAdd.emit(this.slide_data);\n    this.dialogRef.close(true);\n  }\n\n}\n","<h3 mat-dialog-title>Add Data To Slide</h3>\n<mat-slide-toggle labelPosition=\"after\" color=\"secondary\" [(ngModel)]=\"dhivehiEnabled\" (ngModelChange)=\"changeLanguage()\">{{slide_data.language.language_code}}</mat-slide-toggle>\n<form class=\"basic-form\" #userForm=\"ngForm\">\n  <div mat-dialog-content>\n\n      <div style=\"margin-top:20px;\" fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n          <div fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Slide Data</mat-label>\n              <input matInput mat-autosize required name=\"templateName\" [(ngModel)]=\"slide_data.data\" [appDnrmsThaana]=\"dhivehiEnabled\">\n            </mat-form-field>\n            {{ slide_data | json }}\n          </div>\n      </div>\n<!-- {{template|json}} -->\n  </div>\n  <!-- actions column -->\n  <div mat-dialog-actions align=\"end\">\n    <button mat-button color=\"basic\" (click)=\"closeDialog(true)\">Cancel</button>\n    <button mat-raised-button color=\"primary\" (click)=\"addData()\" [disabled]=\"!userForm.form.valid\">Add</button>\n    <!-- <button mat-button color=\"basic\" *ngIf=\"data.newsstatus.status != 'published' && data.newsstatus.status != 'deleted'\" routerLink=\"/news/{{data.id}}\" (click)=\"closeDialog(true)\">Edit</button> -->\n  </div>\n\n</form>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-sms',\n  templateUrl: './sms.component.html',\n  styleUrls: ['./sms.component.css']\n})\nexport class SmsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<p>\n  sms works!\n</p>\n","import { Action } from '@ngrx/store';\nimport { News, ListOrder, NewsList } from '../../news/models/news';\n\nexport const LOGOUT_CONTROL = '[Control] LOGOUT_CONTROL';\n\nexport const GET_NEWS_CG_NEWS = '[Control] GET_NEWS_CG_NEWS';\nexport const GET_NEWS_CG_NEWS_SUCCESS = '[Control] GET_NEWS_CG_NEWS_SUCCESS';\nexport const GET_NEWS_CG_NEWS_ERROR = '[Control] GET_NEWS_CG_NEWS_ERROR';\n\nexport const UPDATE_NEWS_CG_NEWS = '[Control] UPDATE_NEWS_CG_NEWS';\nexport const UPDATE_NEWS_CG_NEWS_SUCCESS = '[Control] UPDATE_NEWS_CG_NEWS_SUCCESS';\nexport const UPDATE_NEWS_CG_NEWS_ERROR = '[Control] UPDATE_NEWS_CG_NEWS_ERROR';\n\nexport const GET_CG_SETTINGS = '[Control] GET_CG_SETTINGS';\nexport const GET_CG_SETTINGS_SUCCESS = '[Control] GET_CG_SETTINGS_SUCCESS';\nexport const GET_CG_SETTINGS_ERROR = '[Control] GET_CG_SETTINGS_ERROR';\n\nexport const STOP_NEWS_CG = '[Control] STOP_NEWS_CG';\nexport const STOP_NEWS_CG_SUCCESS = '[Control] STOP_NEWS_CG_SUCCESS';\nexport const STOP_NEWS_CG_ERROR = '[Control] STOP_NEWS_CG_ERROR';\n\nexport class LogoutEditorState implements Action {\n  readonly type = LOGOUT_CONTROL;\n}\n\n\n/**\n * --------------------------------------------------> Get cg news\n */\nexport class GetNewsCgNews implements Action {\n  readonly type = GET_NEWS_CG_NEWS;\n}\n\nexport class GetNewsCgNewsSuccess implements Action {\n  readonly type = GET_NEWS_CG_NEWS_SUCCESS;\n  constructor(public payload: NewsList) {}\n}\n\nexport class GetNewsCgNewsError implements Action {\n  readonly type = GET_NEWS_CG_NEWS_ERROR;\n}\n\n\n/**\n * --------------------------------------------------> Get cg Settings\n */\nexport class GetCgSettings implements Action {\n  readonly type = GET_CG_SETTINGS;\n}\n\nexport class GetCgSettingsSuccess implements Action {\n  readonly type = GET_CG_SETTINGS_SUCCESS;\n  constructor(public payload: NewsList) {}\n}\n\nexport class GetCgSettingsError implements Action {\n  readonly type = GET_CG_SETTINGS_ERROR;\n}\n\n\n/**\n * --------------------------------------------------> Update cg news\n */\nexport class UpdateNewsCgNews implements Action {\n  readonly type = UPDATE_NEWS_CG_NEWS;\n  constructor(public payload: { news_bar_id: number }) {}\n}\n\nexport class UpdateNewsCgNewsSuccess implements Action {\n  readonly type = UPDATE_NEWS_CG_NEWS_SUCCESS;\n}\n\nexport class UpdateNewsCgNewsError implements Action {\n  readonly type = UPDATE_NEWS_CG_NEWS_ERROR;\n}\n\n\n/**\n * --------------------------------------------------> stop cg\n */\nexport class StopNewsCg implements Action {\n  readonly type = STOP_NEWS_CG;\n  //constructor(public payload: { news_bar_id: number }) {}\n}\n\nexport class StopNewsCgSuccess implements Action {\n  readonly type = STOP_NEWS_CG_SUCCESS;\n}\n\nexport class StopNewsCgError implements Action {\n  readonly type = STOP_NEWS_CG_ERROR;\n}\n\n\n\nexport type All = any;\n","\nimport {catchError, mergeMap,  map } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport { Observable ,  of } from 'rxjs';\nimport { Action } from '@ngrx/store';\n\n\n\n\nimport {Actions, Effect, ofType} from '@ngrx/effects';\n\nimport * as ControlActions from './control.actions';\nimport { ControlService } from '../services/control.service';\n\n@Injectable()\nexport class ControlEffects {\n\n  constructor(\n    private actions$: Actions,\n    private controlService: ControlService,\n  ) { }\n\n  @Effect()\n  GetNewsCgNews$: Observable<Action> = this.actions$.\n    pipe(\n      ofType<ControlActions.GetNewsCgNews>(ControlActions.GET_NEWS_CG_NEWS),\n      mergeMap(action =>\n        this.controlService.getNewsCgNews().pipe(\n        map((data) => {\n          console.log(data);\n          return new ControlActions.GetNewsCgNewsSuccess(data);\n        }),\n        catchError(() => of(new ControlActions.GetNewsCgNewsError())),)\n      )\n    );\n\n\n\n  /*GetCgSettings$: Observable<Action> = this.actions$.\n    ofType<ControlActions.GetNewsCgNews>(ControlActions.GET_NEWS_CG_NEWS)\n    .mergeMap(action =>\n      this.controlService.getNewsCgSettings()\n      .map((data) => {\n        console.log(data);\n        return new ControlActions.GetCgSettingsSuccess(data);\n      })\n      .catch(() => of(new ControlActions.GetCgSettingsError()))\n    );*/\n\n\n  @Effect()\n  UpdateNewsCgNews$: Observable<Action> = this.actions$.\n    pipe(\n      ofType<ControlActions.UpdateNewsCgNews>(ControlActions.UPDATE_NEWS_CG_NEWS),\n      mergeMap(action =>\n        this.controlService.updateNewsCgText(action.payload.news_bar_id).pipe(\n        map((data) => {\n          console.log(data);\n          return new ControlActions.UpdateNewsCgNewsSuccess();\n        }),\n        catchError(() => of(new ControlActions.UpdateNewsCgNewsError())),)\n      )\n    );\n\n\n    @Effect()\n    StopNewsCg$: Observable<Action> = this.actions$.\n      pipe(\n        ofType<ControlActions.UpdateNewsCgNews>(ControlActions.STOP_NEWS_CG),\n        mergeMap(action =>\n          this.controlService.stopNewsCg().pipe(\n          map((data) => {\n            console.log(data);\n            return new ControlActions.StopNewsCgSuccess();\n          }),\n          catchError(() => of(new ControlActions.StopNewsCgError())),)\n        )\n      );\n}\n","\nimport { Action, createFeatureSelector, createSelector } from '@ngrx/store';\n\nimport * as ControlActions from './control.actions';\nimport { ControlState } from '../../store/app.state';\n\n\n\n\n\nexport const initialState: ControlState = {\n    // news: [],\n    // isLoaded: false,\n    // // pageState: {currentPage: null, perPage: null, lastPages: null, totalResults: null},\n    // lists: [],\n    isLoaded: true,\n    cgSettings: null,\n    newsCgState: null\n  };\n\nexport type Actions = ControlActions.All;\nexport interface ActionWithPayload<T> extends Action {\n  payload: T;\n}\n\nexport function reducer(state = initialState, action: ActionWithPayload<any>): ControlState {\n  console.log(state, action);\n\n  switch (action.type) {\n\n    case ControlActions.GET_NEWS_CG_NEWS: {\n      return {\n        ...state,\n        isLoaded: false\n      };\n    }\n\n    case ControlActions.GET_NEWS_CG_NEWS_SUCCESS: {\n      return {\n        ...state,\n        isLoaded: true,\n        newsCgState: action.payload\n      };\n    }\n\n    case ControlActions.GET_CG_SETTINGS: {\n      return {\n        ...state,\n        isLoaded: false\n      };\n    }\n\n    case ControlActions.GET_CG_SETTINGS_SUCCESS: {\n      return {\n        ...state,\n        isLoaded: true,\n        cgSettings: action.payload\n      };\n    }\n\n    case ControlActions.LOGOUT_CONTROL: {\n      return initialState;\n    }\n\n    default: {\n      return state;\n    }\n  }\n\n}\n\nexport const getReviewNewsState = createFeatureSelector<ControlState>('ControlState');\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-ticker',\n  templateUrl: './ticker.component.html',\n  styleUrls: ['./ticker.component.css']\n})\nexport class TickerComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<p>\n  ticker works!\n</p>\n"]}