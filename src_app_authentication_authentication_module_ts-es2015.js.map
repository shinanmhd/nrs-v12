{"version":3,"sources":["./src/app/authentication/authentication.module.ts","./src/app/authentication/authentication.routing.ts","./src/app/authentication/error/error.component.ts","./src/app/authentication/error/error.component.html","./src/app/authentication/forgot/forgot.component.ts","./src/app/authentication/forgot/forgot.component.html","./src/app/authentication/lockscreen/lockscreen.component.ts","./src/app/authentication/lockscreen/lockscreen.component.html","./src/app/authentication/login/login.component.ts","./src/app/authentication/login/login.component.html","./src/app/authentication/register/register.component.ts","./src/app/authentication/register/register.component.html","./src/app/authentication/unauthorized/unauthorized.component.ts","./src/app/authentication/unauthorized/unauthorized.component.html"],"names":[],"mappings":"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","file":"src_app_authentication_authentication_module_ts-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\nimport { AuthenticationRoutes } from './authentication.routing';\nimport { ErrorComponent } from './error/error.component';\nimport { UnauthorizedComponent } from './unauthorized/unauthorized.component';\nimport { ForgotComponent } from './forgot/forgot.component';\nimport { LockscreenComponent } from './lockscreen/lockscreen.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(AuthenticationRoutes),\n    MatIconModule,\n    MatCardModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatButtonModule,\n    FlexLayoutModule,\n    FormsModule,\n    ReactiveFormsModule,\n    // StoreModule.forFeature('userFeature', {\n    //   user: UserReducer\n    // }),\n    // EffectsModule.forFeature([UserEffects]),\n  ],\n  declarations: [\n    ErrorComponent,\n    UnauthorizedComponent,\n    ForgotComponent,\n    LockscreenComponent,\n    LoginComponent,\n    RegisterComponent\n  ]\n})\n\nexport class AuthenticationModule {}\n","import { Routes } from '@angular/router';\n\nimport { ErrorComponent } from './error/error.component';\nimport { UnauthorizedComponent } from './unauthorized/unauthorized.component';\nimport { ForgotComponent } from './forgot/forgot.component';\nimport { LockscreenComponent } from './lockscreen/lockscreen.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nexport const AuthenticationRoutes: Routes = [\n  {\n    path: '',\n    children: [{\n      path: '404',\n      component: ErrorComponent\n    }, {\n      path: '401',\n      component: UnauthorizedComponent\n    }, {\n      path: 'forgot',\n      component: ForgotComponent\n    }, {\n      path: 'lockscreen',\n      component: LockscreenComponent\n    }, {\n      path: 'login',\n      component: LoginComponent\n    }, {\n      path: 'register',\n      component: RegisterComponent\n    }]\n  }\n];\n","import { Location } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-error',\n  templateUrl: './error.component.html',\n  styleUrls: ['./error.component.scss']\n})\nexport class ErrorComponent implements OnInit {\n\n  constructor(\n    private location: Location\n  ) { }\n\n  ngOnInit() {\n  }\n\n  goBack() {\n    this.location.back();\n  }\n\n}\n","<div class=\"login-register\">\n    <div class=\"login-register-box error-card text-center\">\n        <h1>404</h1>\n        <h3 class=\"text-uppercase\">Page Not Found !</h3>\n        <p class=\"text-muted m-t-30 m-b-30\">You seem to be trying to find this way to home</p>\n        <a mat-raised-button color=\"primary\" (click)=\"goBack()\" class=\"btn btn-info btn-rounded waves-effect waves-light m-b-40\">Go Back</a>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { CustomValidators } from 'ng2-validation';\n\n@Component({\n  selector: 'app-forgot',\n  templateUrl: './forgot.component.html',\n  styleUrls: ['./forgot.component.scss']\n})\nexport class ForgotComponent implements OnInit {\n\n  public form: FormGroup;\n  constructor(private fb: FormBuilder, private router: Router) {}\n\n  ngOnInit() {\n    this.form = this.fb.group ( {\n      email: [ null, Validators.compose( [ Validators.required, CustomValidators.email ] ) ]\n    } );\n  }\n\n  onSubmit() {\n    this.router.navigate ( ['/authentication/login'] );\n  }\n\n}\n","<div class=\"login-register\"  style=\"background-image:url(assets/images/background/login-register.jpg);\">\n    <div class=\"login-register-box\">\n      <mat-card>\n        <mat-card-content>\n          <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"text-center\"><img alt=\"homepage\" src=\"assets/images/logo-icon.png\"><h4 class=\"m-t-0\">Recover Password</h4></div>  \n            <p class=\"text-center font-14\">Enter your email and we'll send you the password reset link.</p>\n            \n            <div  fxLayout=\"column\"  fxLayoutAlign=\"space-around\">\n              <div class=\"pb-1\">\n                <mat-form-field style=\"width: 100%\">\n                  <input matInput placeholder=\"Email address\" type=\"email\" [formControl]=\"form.controls['email']\">\n                </mat-form-field>\n                <small *ngIf=\"form.controls['email'].hasError('required') && form.controls['email'].touched\" class=\"text-danger support-text\">You must include an email address.</small>\n                <small *ngIf=\"form.controls['email'].errors?.email && form.controls['email'].touched\" class=\"text-danger support-text\">You must include a valid email address.</small>\n              </div>\n              <button mat-raised-button color=\"primary\" type=\"submit\"  class=\"btn-block btn-lg m-t-20\"  [disabled]=\"!form.valid\">Submit</button>\n            </div>\n            \n          </form>\n         </mat-card-content>\n      </mat-card>\n    </div>\n  </div>\n\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-lockscreen',\n  templateUrl: './lockscreen.component.html',\n  styleUrls: ['./lockscreen.component.scss']\n})\nexport class LockscreenComponent implements OnInit {\n\n  public form: FormGroup;\n  constructor(private fb: FormBuilder, private router: Router) {}\n\n  ngOnInit() {\n    this.form = this.fb.group ( {\n      uname: [ null, Validators.compose( [ Validators.required ] ) ]\n    } );\n  }\n\n  onSubmit() {\n    this.router.navigate ( ['/'] );\n  }\n\n}\n","<div class=\"login-register\"  style=\"background-image:url(assets/images/background/login-register.jpg);\">\n    <div class=\"login-register-box\">\n      <mat-card>\n        <mat-card-content>\n          <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"text-center\">\n              <img src=\"assets/images/users/1.jpg\" class=\"img-circle\" width=\"80\" alt=\"user\" title=\"user\"/>\n                <h4 class=\"m-t-0\">David Miller</h4>\n            </div>\n           \n            <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n                 <!-- col full-->\n                 <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n                     <mat-form-field style=\"width: 100%\">\n                         <input matInput placeholder=\"Username\" [formControl]=\"form.controls['uname']\">\n                     </mat-form-field>\n                     <small *ngIf=\"form.controls['uname'].hasError('required') && form.controls['uname'].touched\" class=\"text-danger support-text\">Username is required.</small>\n                </div>\n              <!-- col full-->\n              <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\"> \n                <button mat-raised-button class=\"btn-block btn-lg m-t-10 m-b-10\"  color=\"primary\" type=\"submit\" [disabled]=\"!form.valid\">Unlock</button>\n              </div>\n            </div>\n          </form>\n        </mat-card-content>\n      </mat-card>   \n    </div>\n  </div>\n\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { Subscription } from 'Rxjs';\nimport { Observable ,  Subject } from 'rxjs';\n\nimport { AuthService } from '../../shared/services/auth.service';\n\nimport { User } from '../../shared/models/user';\n\nimport * as userReducer from '../store/user.reducer';\nimport * as userActions from '../store/user.actions';\nimport { UserState } from '../../store/app.state';\nimport { Store } from '@ngrx/store';\nimport {Actions, ofType} from '@ngrx/effects';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n  user: User = new User();\n  // store\n  // s_user: Observable<User[]>;\n  userState$: Observable<any>;\n\n  public form: FormGroup;\n  public hasFailed = false;\n  loggedInSub: Subscription;\n\n  loginError = false;\n\n  destroySubject$: Subject<void> = new Subject();\n\n  constructor(\n      private fb: FormBuilder,\n      private router: Router,\n      private store: Store<UserState>,\n      private auth: AuthService,\n      updates$: Actions\n  ) {\n    const thiObj = this;\n    updates$\n      .pipe(\n        ofType(userActions.USER_401),\n        takeUntil(this.destroySubject$)\n      )\n      .subscribe(() => {\n        this.loginError = true;\n        setTimeout(() => { this.loginError = false; }, 1000);\n      });\n  }\n\n\n  ngOnInit() {\n    // get user authentication status\n    this.loggedInSub = this.auth.loggedIn$.pipe(takeUntil(this.destroySubject$)).subscribe(\n      loggedIn => {\n        //this.userState$ = this.store.select(userReducer.getUser);\n        this.store.dispatch(new userActions.GetUserSettings());\n\n        // redirect if logged in\n        this.router.navigate(['/user']);\n      });\n\n    this.form = this.fb.group ( {\n      uname: [null , Validators.compose ( [ Validators.required ] )] ,\n      password: [null , Validators.compose ( [ Validators.required ] )]\n    } );\n  }\n\n  onSubmit() {\n    // Grab values from form\n    const username = this.form.get('uname').value;\n    const password = this.form.get('password').value;\n\n    const payload = {\n      email: username,\n      password: password\n    };\n    this.store.dispatch(new userActions.UserLogin(payload));\n\n    /*this.auth\n        .signIn(username, password)\n        .subscribe(\n            (response: User) => {\n              console.log(response);\n              this.auth.doSignIn(response);\n              this.router.navigate(['/dashboard/default']);\n            },\n            (error) => {\n              console.log(error.message);\n              this.hasFailed = true;\n            }\n        );*/\n  }\n\n  ngOnDestroy() {\n    this.destroySubject$.next();\n  }\n\n}\n","<div class=\"login-register\"  style=\"background-image:url(assets/images/background/login-register.jpg);\">\n    <div class=\"\" [className]=\"loginError ? 'wiggler login-register-box' : 'login-register-box'\">\n        <mat-card>\n            <mat-card-content>\n                <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n                    <div class=\"text-center\"><img alt=\"homepage\" src=\"assets/images/logo-icon.png\"><h4 class=\"m-t-0\">Login to App</h4></div>\n\n                    <div fxLayout=\"column\" fxLayoutWrap=\"wrap\">\n                        <!-- col full-->\n                        <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n                            <mat-form-field>\n                                <input matInput placeholder=\"Username\" [formControl]=\"form.controls['uname']\">\n                            </mat-form-field>\n                            <small *ngIf=\"form.controls['uname'].hasError('required') && form.controls['uname'].touched\" class=\"text-danger support-text\">Username is required.</small>\n                        </div>\n                        <!-- col full-->\n                        <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n                            <mat-form-field>\n                                <input matInput type=\"password\" placeholder=\"Password\" [formControl]=\"form.controls['password']\">\n                            </mat-form-field>\n                            <small *ngIf=\"form.controls['password'].hasError('required') && form.controls['password'].touched\" class=\"text-danger support-text\">Password is required.</small>\n                        </div>\n                        <!-- col half\n                        <div fxFlex.gt-sm=\"50\" fxFlex.gt-xs=\"50\">\n                            <mat-checkbox color=\"warn\">Remember me</mat-checkbox>\n                        </div>-->\n                        <!-- col half\n                        <div fxFlex.gt-sm=\"50\" fxFlex.gt-xs=\"50\" class=\"text-right\">\n                            <a [routerLink]=\"['/authentication/forgot']\" class=\"link\">Forgot pwd?</a>\n                        </div>-->\n                        <!-- col full-->\n                        <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n                            <button mat-raised-button color=\"primary\" class=\"btn-block btn-lg m-t-20 m-b-20\" type=\"submit\" [disabled]=\"!form.valid\">Login</button>\n                        </div>\n                        <!-- col full\n                        <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\" class=\"text-center\">\n                            <span>Don't have an account? <a [routerLink]=\"['/authentication/register']\"  class=\"text-info link\">Register</a> </span>\n                        </div>-->\n                     </div>\n                  </form>\n             </mat-card-content>\n        </mat-card>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { CustomValidators } from 'ng2-validation';\n\nconst password = new FormControl('', Validators.required);\nconst confirmPassword = new FormControl('', CustomValidators.equalTo(password));\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  public form: FormGroup;\n  constructor(private fb: FormBuilder, private router: Router) {}\n\n  ngOnInit() {\n    this.form = this.fb.group( {\n      email: [null, Validators.compose([Validators.required, CustomValidators.email])],\n      password: password,\n      confirmPassword: confirmPassword\n    } );\n  }\n\n  onSubmit() {\n    this.router.navigate( ['/'] );\n  }\n}\n","<div class=\"login-register\"  style=\"background-image:url(assets/images/background/login-register.jpg);\">\n    <div class=\"login-register-box\">\n      <mat-card>\n        <mat-card-content>\n          <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"text-center\"><img alt=\"homepage\" src=\"assets/images/logo-icon.png\"><h4 class=\"m-t-0\">Register to App</h4></div>\n            <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n                <!-- col full-->\n                <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n                    <mat-form-field style=\"width: 100%\">\n                      <input matInput placeholder=\"Email address\" type=\"email\" [formControl]=\"form.controls['email']\">\n                    </mat-form-field>\n                    <small *ngIf=\"form.controls['email'].hasError('required') && form.controls['email'].touched\" class=\"text-danger support-text\">You must include an email address.</small>\n                    <small *ngIf=\"form.controls['email'].errors?.email && form.controls['email'].touched\" class=\"text-danger support-text\">You must include a valid email address.</small>\n                </div>\n                <!-- col full-->\n                <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n                    <mat-form-field style=\"width: 100%\">\n                        <input matInput type=\"password\" placeholder=\"Password\" [formControl]=\"form.controls['password']\">\n                    </mat-form-field>\n                    <small *ngIf=\"form.controls['password'].hasError('required') && form.controls['password'].touched\" class=\"text-danger support-text\">You must include password.</small>\n                </div>\n                <!-- col full-->\n                <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n                    <mat-form-field style=\"width: 100%\">\n                        <input matInput placeholder=\"Confirm Password\" [formControl]=\"form.controls['confirmPassword']\" type=\"password\">\n                    </mat-form-field>\n                    <small *ngIf=\"form.controls['confirmPassword'].hasError('required') && form.controls['confirmPassword'].touched\" class=\"text-danger support-text\">You must include confirm password.</small>\n                    <small *ngIf=\"form.controls['confirmPassword'].errors?.equalTo\" class=\"text-danger support-text\">Passwords do not math.</small>\n                </div>\n                <!-- col full-->\n                <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n                    <mat-checkbox class=\"font-14\">I agree to the all <a href=\"javascript:void(0)\" class=\"link text-info\">terms</a>.</mat-checkbox>\n                </div>\n              <button mat-raised-button color=\"primary\" class=\"btn-block btn-lg m-t-20 m-b-20\" type=\"submit\" [disabled]=\"!form.valid\">Create your account</button>\n           \n            <div class=\"text-center\" fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n              <span>Already have an account? <a [routerLink]=\"['/authentication/login']\" class=\"link text-info\"> Login</a></span>\n            </div>\n             </div>    \n          </form>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  </div>\n\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'app-unauthorized',\n  templateUrl: './unauthorized.component.html',\n  styleUrls: ['./unauthorized.component.scss']\n})\nexport class UnauthorizedComponent implements OnInit {\n\n  constructor(\n    private router: Router,\n    private location: Location\n  ) {}\n\n  ngOnInit() {\n\n  }\n\n  goBack() {\n    this.location.back();\n  }\n\n  // onSubmit() {\n  //   this.router.navigate ( ['/'] );\n  // }\n\n}\n","<div class=\"login-register\">\n  <div class=\"login-register-box error-card text-center\">\n    <img src=\"/assets/images/nothing-states/unauthorised.png\" style=\"width:auto; height:300px;\">\n      <h3 class=\"text-uppercase\">Unauthorised Area !</h3>\n      <p class=\"text-muted m-t-30 m-b-30\">Seems like you don't have access to this area</p>\n      <a mat-raised-button color=\"primary\" (click)=\"goBack()\" class=\"btn btn-info btn-rounded waves-effect waves-light m-b-40\">Go Back</a>\n  </div>\n</div>\n"],"sourceRoot":"webpack:///"}