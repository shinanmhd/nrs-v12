{"version":3,"sources":["webpack:///src/app/authentication/error/error.component.ts","webpack:///src/app/authentication/error/error.component.html","webpack:///src/app/authentication/lockscreen/lockscreen.component.ts","webpack:///src/app/authentication/lockscreen/lockscreen.component.html","webpack:///src/app/authentication/authentication.routing.ts","webpack:///src/app/authentication/authentication.module.ts","webpack:///src/app/authentication/unauthorized/unauthorized.component.ts","webpack:///src/app/authentication/unauthorized/unauthorized.component.html","webpack:///src/app/authentication/forgot/forgot.component.ts","webpack:///src/app/authentication/forgot/forgot.component.html","webpack:///src/app/authentication/login/login.component.ts","webpack:///src/app/authentication/login/login.component.html","webpack:///src/app/authentication/register/register.component.ts","webpack:///src/app/authentication/register/register.component.html"],"names":["ErrorComponent","location","back","goBack","selector","templateUrl","styleUrls","LockscreenComponent","fb","router","form","group","uname","compose","required","navigate","onSubmit","AuthenticationRoutes","path","children","component","AuthenticationModule","forChild","imports","declarations","UnauthorizedComponent","ForgotComponent","email","LoginComponent","store","auth","updates$","user","hasFailed","loginError","destroySubject$","thiObj","pipe","subscribe","setTimeout","loggedInSub","loggedIn$","loggedIn","dispatch","password","username","get","value","payload","next","confirmPassword","equalTo","RegisterComponent"],"mappings":"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","file":"authentication-authentication-module-es5.js","sourcesContent":["import { Location } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-error',\n  templateUrl: './error.component.html',\n  styleUrls: ['./error.component.scss']\n})\nexport class ErrorComponent implements OnInit {\n\n  constructor(\n    private location: Location\n  ) { }\n\n  ngOnInit() {\n  }\n\n  goBack() {\n    this.location.back();\n  }\n\n}\n","<div class=\"login-register\">\n    <div class=\"login-register-box error-card text-center\">\n        <h1>404</h1>\n        <h3 class=\"text-uppercase\">Page Not Found !</h3>\n        <p class=\"text-muted m-t-30 m-b-30\">You seem to be trying to find this way to home</p>\n        <a mat-raised-button color=\"primary\" (click)=\"goBack()\" class=\"btn btn-info btn-rounded waves-effect waves-light m-b-40\">Go Back</a>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-lockscreen',\n  templateUrl: './lockscreen.component.html',\n  styleUrls: ['./lockscreen.component.scss']\n})\nexport class LockscreenComponent implements OnInit {\n\n  public form: FormGroup;\n  constructor(private fb: FormBuilder, private router: Router) {}\n\n  ngOnInit() {\n    this.form = this.fb.group ( {\n      uname: [ null, Validators.compose( [ Validators.required ] ) ]\n    } );\n  }\n\n  onSubmit() {\n    this.router.navigate ( ['/'] );\n  }\n\n}\n","<div class=\"login-register\"  style=\"background-image:url(assets/images/background/login-register.jpg);\">\n    <div class=\"login-register-box\">\n      <mat-card>\n        <mat-card-content>\n          <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"text-center\">\n              <img src=\"assets/images/users/1.jpg\" class=\"img-circle\" width=\"80\" alt=\"user\" title=\"user\"/>\n                <h4 class=\"m-t-0\">David Miller</h4>\n            </div>\n           \n            <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n                 <!-- col full-->\n                 <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n                     <mat-form-field style=\"width: 100%\">\n                         <input matInput placeholder=\"Username\" [formControl]=\"form.controls['uname']\">\n                     </mat-form-field>\n                     <small *ngIf=\"form.controls['uname'].hasError('required') && form.controls['uname'].touched\" class=\"text-danger support-text\">Username is required.</small>\n                </div>\n              <!-- col full-->\n              <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\"> \n                <button mat-raised-button class=\"btn-block btn-lg m-t-10 m-b-10\"  color=\"primary\" type=\"submit\" [disabled]=\"!form.valid\">Unlock</button>\n              </div>\n            </div>\n          </form>\n        </mat-card-content>\n      </mat-card>   \n    </div>\n  </div>\n\n","import { Routes } from '@angular/router';\n\nimport { ErrorComponent } from './error/error.component';\nimport { UnauthorizedComponent } from './unauthorized/unauthorized.component';\nimport { ForgotComponent } from './forgot/forgot.component';\nimport { LockscreenComponent } from './lockscreen/lockscreen.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nexport const AuthenticationRoutes: Routes = [\n  {\n    path: '',\n    children: [{\n      path: '404',\n      component: ErrorComponent\n    }, {\n      path: '401',\n      component: UnauthorizedComponent\n    }, {\n      path: 'forgot',\n      component: ForgotComponent\n    }, {\n      path: 'lockscreen',\n      component: LockscreenComponent\n    }, {\n      path: 'login',\n      component: LoginComponent\n    }, {\n      path: 'register',\n      component: RegisterComponent\n    }]\n  }\n];\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\nimport { AuthenticationRoutes } from './authentication.routing';\nimport { ErrorComponent } from './error/error.component';\nimport { UnauthorizedComponent } from './unauthorized/unauthorized.component';\nimport { ForgotComponent } from './forgot/forgot.component';\nimport { LockscreenComponent } from './lockscreen/lockscreen.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(AuthenticationRoutes),\n    MatIconModule,\n    MatCardModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatButtonModule,\n    FlexLayoutModule,\n    FormsModule,\n    ReactiveFormsModule,\n    // StoreModule.forFeature('userFeature', {\n    //   user: UserReducer\n    // }),\n    // EffectsModule.forFeature([UserEffects]),\n  ],\n  declarations: [\n    ErrorComponent,\n    UnauthorizedComponent,\n    ForgotComponent,\n    LockscreenComponent,\n    LoginComponent,\n    RegisterComponent\n  ]\n})\n\nexport class AuthenticationModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'app-unauthorized',\n  templateUrl: './unauthorized.component.html',\n  styleUrls: ['./unauthorized.component.scss']\n})\nexport class UnauthorizedComponent implements OnInit {\n\n  constructor(\n    private router: Router,\n    private location: Location\n  ) {}\n\n  ngOnInit() {\n\n  }\n\n  goBack() {\n    this.location.back();\n  }\n\n  // onSubmit() {\n  //   this.router.navigate ( ['/'] );\n  // }\n\n}\n","<div class=\"login-register\">\n  <div class=\"login-register-box error-card text-center\">\n    <img src=\"/assets/images/nothing-states/unauthorised.png\" style=\"width:auto; height:300px;\">\n      <h3 class=\"text-uppercase\">Unauthorised Area !</h3>\n      <p class=\"text-muted m-t-30 m-b-30\">Seems like you don't have access to this area</p>\n      <a mat-raised-button color=\"primary\" (click)=\"goBack()\" class=\"btn btn-info btn-rounded waves-effect waves-light m-b-40\">Go Back</a>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { CustomValidators } from 'ng2-validation';\n\n@Component({\n  selector: 'app-forgot',\n  templateUrl: './forgot.component.html',\n  styleUrls: ['./forgot.component.scss']\n})\nexport class ForgotComponent implements OnInit {\n\n  public form: FormGroup;\n  constructor(private fb: FormBuilder, private router: Router) {}\n\n  ngOnInit() {\n    this.form = this.fb.group ( {\n      email: [ null, Validators.compose( [ Validators.required, CustomValidators.email ] ) ]\n    } );\n  }\n\n  onSubmit() {\n    this.router.navigate ( ['/authentication/login'] );\n  }\n\n}\n","<div class=\"login-register\"  style=\"background-image:url(assets/images/background/login-register.jpg);\">\n    <div class=\"login-register-box\">\n      <mat-card>\n        <mat-card-content>\n          <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"text-center\"><img alt=\"homepage\" src=\"assets/images/logo-icon.png\"><h4 class=\"m-t-0\">Recover Password</h4></div>  \n            <p class=\"text-center font-14\">Enter your email and we'll send you the password reset link.</p>\n            \n            <div  fxLayout=\"column\"  fxLayoutAlign=\"space-around\">\n              <div class=\"pb-1\">\n                <mat-form-field style=\"width: 100%\">\n                  <input matInput placeholder=\"Email address\" type=\"email\" [formControl]=\"form.controls['email']\">\n                </mat-form-field>\n                <small *ngIf=\"form.controls['email'].hasError('required') && form.controls['email'].touched\" class=\"text-danger support-text\">You must include an email address.</small>\n                <small *ngIf=\"form.controls['email'].errors?.email && form.controls['email'].touched\" class=\"text-danger support-text\">You must include a valid email address.</small>\n              </div>\n              <button mat-raised-button color=\"primary\" type=\"submit\"  class=\"btn-block btn-lg m-t-20\"  [disabled]=\"!form.valid\">Submit</button>\n            </div>\n            \n          </form>\n         </mat-card-content>\n      </mat-card>\n    </div>\n  </div>\n\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { Subscription } from 'Rxjs';\nimport { Observable ,  Subject } from 'rxjs';\n\nimport { AuthService } from '../../shared/services/auth.service';\n\nimport { User } from '../../shared/models/user';\n\nimport * as userReducer from '../store/user.reducer';\nimport * as userActions from '../store/user.actions';\nimport { UserState } from '../../store/app.state';\nimport { Store } from '@ngrx/store';\nimport {Actions, ofType} from '@ngrx/effects';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n  user: User = new User();\n  // store\n  // s_user: Observable<User[]>;\n  userState$: Observable<any>;\n\n  public form: FormGroup;\n  public hasFailed = false;\n  loggedInSub: Subscription;\n\n  loginError = false;\n\n  destroySubject$: Subject<void> = new Subject();\n\n  constructor(\n      private fb: FormBuilder,\n      private router: Router,\n      private store: Store<UserState>,\n      private auth: AuthService,\n      updates$: Actions\n  ) {\n    const thiObj = this;\n    updates$\n      .pipe(\n        ofType(userActions.USER_401),\n        takeUntil(this.destroySubject$)\n      )\n      .subscribe(() => {\n        this.loginError = true;\n        setTimeout(() => { this.loginError = false; }, 1000);\n      });\n  }\n\n\n  ngOnInit() {\n    // get user authentication status\n    this.loggedInSub = this.auth.loggedIn$.pipe(takeUntil(this.destroySubject$)).subscribe(\n      loggedIn => {\n        //this.userState$ = this.store.select(userReducer.getUser);\n        this.store.dispatch(new userActions.GetUserSettings());\n\n        // redirect if logged in\n        this.router.navigate(['/user']);\n      });\n\n    this.form = this.fb.group ( {\n      uname: [null , Validators.compose ( [ Validators.required ] )] ,\n      password: [null , Validators.compose ( [ Validators.required ] )]\n    } );\n  }\n\n  onSubmit() {\n    // Grab values from form\n    const username = this.form.get('uname').value;\n    const password = this.form.get('password').value;\n\n    const payload = {\n      email: username,\n      password: password\n    };\n    this.store.dispatch(new userActions.UserLogin(payload));\n\n    /*this.auth\n        .signIn(username, password)\n        .subscribe(\n            (response: User) => {\n              console.log(response);\n              this.auth.doSignIn(response);\n              this.router.navigate(['/dashboard/default']);\n            },\n            (error) => {\n              console.log(error.message);\n              this.hasFailed = true;\n            }\n        );*/\n  }\n\n  ngOnDestroy() {\n    this.destroySubject$.next();\n  }\n\n}\n","<div class=\"login-register\"  style=\"background-image:url(assets/images/background/login-register.jpg);\">\n    <div class=\"\" [className]=\"loginError ? 'wiggler login-register-box' : 'login-register-box'\">\n        <mat-card>\n            <mat-card-content>\n                <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n                    <div class=\"text-center\"><img alt=\"homepage\" src=\"assets/images/logo-icon.png\"><h4 class=\"m-t-0\">Login to App</h4></div>\n\n                    <div fxLayout=\"column\" fxLayoutWrap=\"wrap\">\n                        <!-- col full-->\n                        <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n                            <mat-form-field>\n                                <input matInput placeholder=\"Username\" [formControl]=\"form.controls['uname']\">\n                            </mat-form-field>\n                            <small *ngIf=\"form.controls['uname'].hasError('required') && form.controls['uname'].touched\" class=\"text-danger support-text\">Username is required.</small>\n                        </div>\n                        <!-- col full-->\n                        <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n                            <mat-form-field>\n                                <input matInput type=\"password\" placeholder=\"Password\" [formControl]=\"form.controls['password']\">\n                            </mat-form-field>\n                            <small *ngIf=\"form.controls['password'].hasError('required') && form.controls['password'].touched\" class=\"text-danger support-text\">Password is required.</small>\n                        </div>\n                        <!-- col half\n                        <div fxFlex.gt-sm=\"50\" fxFlex.gt-xs=\"50\">\n                            <mat-checkbox color=\"warn\">Remember me</mat-checkbox>\n                        </div>-->\n                        <!-- col half\n                        <div fxFlex.gt-sm=\"50\" fxFlex.gt-xs=\"50\" class=\"text-right\">\n                            <a [routerLink]=\"['/authentication/forgot']\" class=\"link\">Forgot pwd?</a>\n                        </div>-->\n                        <!-- col full-->\n                        <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n                            <button mat-raised-button color=\"primary\" class=\"btn-block btn-lg m-t-20 m-b-20\" type=\"submit\" [disabled]=\"!form.valid\">Login</button>\n                        </div>\n                        <!-- col full\n                        <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\" class=\"text-center\">\n                            <span>Don't have an account? <a [routerLink]=\"['/authentication/register']\"  class=\"text-info link\">Register</a> </span>\n                        </div>-->\n                     </div>\n                  </form>\n             </mat-card-content>\n        </mat-card>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { CustomValidators } from 'ng2-validation';\n\nconst password = new FormControl('', Validators.required);\nconst confirmPassword = new FormControl('', CustomValidators.equalTo(password));\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  public form: FormGroup;\n  constructor(private fb: FormBuilder, private router: Router) {}\n\n  ngOnInit() {\n    this.form = this.fb.group( {\n      email: [null, Validators.compose([Validators.required, CustomValidators.email])],\n      password: password,\n      confirmPassword: confirmPassword\n    } );\n  }\n\n  onSubmit() {\n    this.router.navigate( ['/'] );\n  }\n}\n","<div class=\"login-register\"  style=\"background-image:url(assets/images/background/login-register.jpg);\">\n    <div class=\"login-register-box\">\n      <mat-card>\n        <mat-card-content>\n          <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"text-center\"><img alt=\"homepage\" src=\"assets/images/logo-icon.png\"><h4 class=\"m-t-0\">Register to App</h4></div>\n            <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n                <!-- col full-->\n                <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n                    <mat-form-field style=\"width: 100%\">\n                      <input matInput placeholder=\"Email address\" type=\"email\" [formControl]=\"form.controls['email']\">\n                    </mat-form-field>\n                    <small *ngIf=\"form.controls['email'].hasError('required') && form.controls['email'].touched\" class=\"text-danger support-text\">You must include an email address.</small>\n                    <small *ngIf=\"form.controls['email'].errors?.email && form.controls['email'].touched\" class=\"text-danger support-text\">You must include a valid email address.</small>\n                </div>\n                <!-- col full-->\n                <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n                    <mat-form-field style=\"width: 100%\">\n                        <input matInput type=\"password\" placeholder=\"Password\" [formControl]=\"form.controls['password']\">\n                    </mat-form-field>\n                    <small *ngIf=\"form.controls['password'].hasError('required') && form.controls['password'].touched\" class=\"text-danger support-text\">You must include password.</small>\n                </div>\n                <!-- col full-->\n                <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n                    <mat-form-field style=\"width: 100%\">\n                        <input matInput placeholder=\"Confirm Password\" [formControl]=\"form.controls['confirmPassword']\" type=\"password\">\n                    </mat-form-field>\n                    <small *ngIf=\"form.controls['confirmPassword'].hasError('required') && form.controls['confirmPassword'].touched\" class=\"text-danger support-text\">You must include confirm password.</small>\n                    <small *ngIf=\"form.controls['confirmPassword'].errors?.equalTo\" class=\"text-danger support-text\">Passwords do not math.</small>\n                </div>\n                <!-- col full-->\n                <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n                    <mat-checkbox class=\"font-14\">I agree to the all <a href=\"javascript:void(0)\" class=\"link text-info\">terms</a>.</mat-checkbox>\n                </div>\n              <button mat-raised-button color=\"primary\" class=\"btn-block btn-lg m-t-20 m-b-20\" type=\"submit\" [disabled]=\"!form.valid\">Create your account</button>\n           \n            <div class=\"text-center\" fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n              <span>Already have an account? <a [routerLink]=\"['/authentication/login']\" class=\"link text-info\"> Login</a></span>\n            </div>\n             </div>    \n          </form>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  </div>\n\n"]}