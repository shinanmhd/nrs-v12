{"version":3,"sources":["webpack:///src/app/control/services/control.service.ts","webpack:///src/app/control/store/control.actions.ts","webpack:///src/app/control/store/control.reducer.ts","webpack:///src/app/control/store/control.effects.ts","webpack:///src/app/control/ticker/ticker.component.ts","webpack:///src/app/control/ticker/ticker.component.html","webpack:///src/app/control/onair/onair.component.ts","webpack:///src/app/control/onair/onair.component.html","webpack:///src/app/control/control.module.ts","webpack:///src/app/control/slide-data-dialog/slide-data-dialog.component.ts","webpack:///src/app/control/slide-data-dialog/slide-data-dialog.component.html","webpack:///src/app/control/services/onair.service.ts","webpack:///src/app/control/sms/sms.component.ts","webpack:///src/app/control/sms/sms.component.html","webpack:///src/app/control/control.routing.ts","webpack:///src/app/control/news-cg/news-cg.component.ts","webpack:///src/app/control/news-cg/news-cg.component.html","webpack:///src/app/control/cg-text/cg-text.component.ts","webpack:///src/app/control/cg-text/cg-text.component.html"],"names":["ControlService","http","apiUrl","get","console","log","news_bar_id","put","post","providedIn","LOGOUT_CONTROL","GET_NEWS_CG_NEWS","GET_NEWS_CG_NEWS_SUCCESS","GET_NEWS_CG_NEWS_ERROR","UPDATE_NEWS_CG_NEWS","UPDATE_NEWS_CG_NEWS_SUCCESS","UPDATE_NEWS_CG_NEWS_ERROR","GET_CG_SETTINGS","GET_CG_SETTINGS_SUCCESS","GET_CG_SETTINGS_ERROR","STOP_NEWS_CG","STOP_NEWS_CG_SUCCESS","STOP_NEWS_CG_ERROR","LogoutEditorState","type","GetNewsCgNews","GetNewsCgNewsSuccess","payload","GetNewsCgNewsError","GetCgSettings","GetCgSettingsSuccess","GetCgSettingsError","UpdateNewsCgNews","UpdateNewsCgNewsSuccess","UpdateNewsCgNewsError","StopNewsCg","StopNewsCgSuccess","StopNewsCgError","initialState","isLoaded","cgSettings","newsCgState","reducer","state","action","getReviewNewsState","ControlEffects","actions$","controlService","GetNewsCgNews$","pipe","getNewsCgNews","data","UpdateNewsCgNews$","updateNewsCgText","StopNewsCg$","stopNewsCg","TickerComponent","selector","templateUrl","styleUrls","id","OnairComponent","onAirService","dialog","snackBar","sidePanelOpened","sidePanelOpened_noNews","destroySubject$","getSlides","subscribe","onair","slides","sidenav","toggle","window","matchMedia","matches","slide","selectedSlide","settings_selected_slide","slideId","content","slideData","dialogRef","open","width","height","maxHeight","componentInstance","onAdd","result","addSlideData","re","forEach","err","status","deleteSlideData","sideBarToggle","Slide","lang","s_id","active","language","on_air_slides_id","ControlModule","forChild","forFeature","imports","declarations","entryComponents","SlideDataDialogComponent","dhivehiEnabled","slide_data","confirmation","close","language_code","emit","changeLanguage","closeDialog","addData","OnairService","SmsComponent","ControlRoutes","path","children","component","role","NewsCgComponent","store","updates$","NewsList","selectedNewsKey","viewingKeyTmp","viewingKey","dispatch","select","ControlState","list","list_news","selectedNews","length","previousNews","nextNews","CgTextComponent"],"mappings":"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","file":"control-control-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams, HttpErrorResponse } from '@angular/common/http';\n\nimport { environment } from './../../../environments/environment';\nimport { News, ListOrder } from '../../news/models/news';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ControlService {\n  private apiUrl = environment.apiUrl;\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  // get selected list\n  getNewsCgNews () {\n    return this.http.get<any>(this.apiUrl + 'control/news/cg');\n  }\n\n  // get selected list\n  getNewsCgSettings () {\n    console.log('Getting cg settings')\n    //return this.http.get<any>(this.apiUrl + 'control/cg/settings/all');\n    return this.http.get<any>(this.apiUrl + 'control/news/cg');\n  }\n\n  //update news cg text\n  updateNewsCgText(news_bar_id: number) {\n    return this.http.put<any>(this.apiUrl + 'control/news/cg/update/', { \"news_bar_id\": news_bar_id, \"ip\": '' });\n  }\n\n  stopNewsCg() {\n    return this.http.post<any>(this.apiUrl + 'control/cg/news/stop', {});\n  }\n\n\n}\n","import { Action } from '@ngrx/store';\nimport { News, ListOrder, NewsList } from '../../news/models/news';\n\nexport const LOGOUT_CONTROL = '[Control] LOGOUT_CONTROL';\n\nexport const GET_NEWS_CG_NEWS = '[Control] GET_NEWS_CG_NEWS';\nexport const GET_NEWS_CG_NEWS_SUCCESS = '[Control] GET_NEWS_CG_NEWS_SUCCESS';\nexport const GET_NEWS_CG_NEWS_ERROR = '[Control] GET_NEWS_CG_NEWS_ERROR';\n\nexport const UPDATE_NEWS_CG_NEWS = '[Control] UPDATE_NEWS_CG_NEWS';\nexport const UPDATE_NEWS_CG_NEWS_SUCCESS = '[Control] UPDATE_NEWS_CG_NEWS_SUCCESS';\nexport const UPDATE_NEWS_CG_NEWS_ERROR = '[Control] UPDATE_NEWS_CG_NEWS_ERROR';\n\nexport const GET_CG_SETTINGS = '[Control] GET_CG_SETTINGS';\nexport const GET_CG_SETTINGS_SUCCESS = '[Control] GET_CG_SETTINGS_SUCCESS';\nexport const GET_CG_SETTINGS_ERROR = '[Control] GET_CG_SETTINGS_ERROR';\n\nexport const STOP_NEWS_CG = '[Control] STOP_NEWS_CG';\nexport const STOP_NEWS_CG_SUCCESS = '[Control] STOP_NEWS_CG_SUCCESS';\nexport const STOP_NEWS_CG_ERROR = '[Control] STOP_NEWS_CG_ERROR';\n\nexport class LogoutEditorState implements Action {\n  readonly type = LOGOUT_CONTROL;\n}\n\n\n/**\n * --------------------------------------------------> Get cg news\n */\nexport class GetNewsCgNews implements Action {\n  readonly type = GET_NEWS_CG_NEWS;\n}\n\nexport class GetNewsCgNewsSuccess implements Action {\n  readonly type = GET_NEWS_CG_NEWS_SUCCESS;\n  constructor(public payload: NewsList) {}\n}\n\nexport class GetNewsCgNewsError implements Action {\n  readonly type = GET_NEWS_CG_NEWS_ERROR;\n}\n\n\n/**\n * --------------------------------------------------> Get cg Settings\n */\nexport class GetCgSettings implements Action {\n  readonly type = GET_CG_SETTINGS;\n}\n\nexport class GetCgSettingsSuccess implements Action {\n  readonly type = GET_CG_SETTINGS_SUCCESS;\n  constructor(public payload: NewsList) {}\n}\n\nexport class GetCgSettingsError implements Action {\n  readonly type = GET_CG_SETTINGS_ERROR;\n}\n\n\n/**\n * --------------------------------------------------> Update cg news\n */\nexport class UpdateNewsCgNews implements Action {\n  readonly type = UPDATE_NEWS_CG_NEWS;\n  constructor(public payload: { news_bar_id: number }) {}\n}\n\nexport class UpdateNewsCgNewsSuccess implements Action {\n  readonly type = UPDATE_NEWS_CG_NEWS_SUCCESS;\n}\n\nexport class UpdateNewsCgNewsError implements Action {\n  readonly type = UPDATE_NEWS_CG_NEWS_ERROR;\n}\n\n\n/**\n * --------------------------------------------------> stop cg\n */\nexport class StopNewsCg implements Action {\n  readonly type = STOP_NEWS_CG;\n  //constructor(public payload: { news_bar_id: number }) {}\n}\n\nexport class StopNewsCgSuccess implements Action {\n  readonly type = STOP_NEWS_CG_SUCCESS;\n}\n\nexport class StopNewsCgError implements Action {\n  readonly type = STOP_NEWS_CG_ERROR;\n}\n\n\n\nexport type All = any;\n","\nimport { Action, createFeatureSelector, createSelector } from '@ngrx/store';\n\nimport * as ControlActions from './control.actions';\nimport { ControlState } from '../../store/app.state';\n\n\n\n\n\nexport const initialState: ControlState = {\n    // news: [],\n    // isLoaded: false,\n    // // pageState: {currentPage: null, perPage: null, lastPages: null, totalResults: null},\n    // lists: [],\n    isLoaded: true,\n    cgSettings: null,\n    newsCgState: null\n  };\n\nexport type Actions = ControlActions.All;\nexport interface ActionWithPayload<T> extends Action {\n  payload: T;\n}\n\nexport function reducer(state = initialState, action: ActionWithPayload<any>): ControlState {\n  console.log(state, action);\n\n  switch (action.type) {\n\n    case ControlActions.GET_NEWS_CG_NEWS: {\n      return {\n        ...state,\n        isLoaded: false\n      };\n    }\n\n    case ControlActions.GET_NEWS_CG_NEWS_SUCCESS: {\n      return {\n        ...state,\n        isLoaded: true,\n        newsCgState: action.payload\n      };\n    }\n\n    case ControlActions.GET_CG_SETTINGS: {\n      return {\n        ...state,\n        isLoaded: false\n      };\n    }\n\n    case ControlActions.GET_CG_SETTINGS_SUCCESS: {\n      return {\n        ...state,\n        isLoaded: true,\n        cgSettings: action.payload\n      };\n    }\n\n    case ControlActions.LOGOUT_CONTROL: {\n      return initialState;\n    }\n\n    default: {\n      return state;\n    }\n  }\n\n}\n\nexport const getReviewNewsState = createFeatureSelector<ControlState>('ControlState');\n","\nimport {catchError, mergeMap,  map } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport { Observable ,  of } from 'rxjs';\nimport { Action } from '@ngrx/store';\n\n\n\n\nimport {Actions, Effect, ofType} from '@ngrx/effects';\n\nimport * as ControlActions from './control.actions';\nimport { ControlService } from '../services/control.service';\n\n@Injectable()\nexport class ControlEffects {\n\n  constructor(\n    private actions$: Actions,\n    private controlService: ControlService,\n  ) { }\n\n  @Effect()\n  GetNewsCgNews$: Observable<Action> = this.actions$.\n    pipe(\n      ofType<ControlActions.GetNewsCgNews>(ControlActions.GET_NEWS_CG_NEWS),\n      mergeMap(action =>\n        this.controlService.getNewsCgNews().pipe(\n        map((data) => {\n          console.log(data);\n          return new ControlActions.GetNewsCgNewsSuccess(data);\n        }),\n        catchError(() => of(new ControlActions.GetNewsCgNewsError())),)\n      )\n    );\n\n\n\n  /*GetCgSettings$: Observable<Action> = this.actions$.\n    ofType<ControlActions.GetNewsCgNews>(ControlActions.GET_NEWS_CG_NEWS)\n    .mergeMap(action =>\n      this.controlService.getNewsCgSettings()\n      .map((data) => {\n        console.log(data);\n        return new ControlActions.GetCgSettingsSuccess(data);\n      })\n      .catch(() => of(new ControlActions.GetCgSettingsError()))\n    );*/\n\n\n  @Effect()\n  UpdateNewsCgNews$: Observable<Action> = this.actions$.\n    pipe(\n      ofType<ControlActions.UpdateNewsCgNews>(ControlActions.UPDATE_NEWS_CG_NEWS),\n      mergeMap(action =>\n        this.controlService.updateNewsCgText(action.payload.news_bar_id).pipe(\n        map((data) => {\n          console.log(data);\n          return new ControlActions.UpdateNewsCgNewsSuccess();\n        }),\n        catchError(() => of(new ControlActions.UpdateNewsCgNewsError())),)\n      )\n    );\n\n\n    @Effect()\n    StopNewsCg$: Observable<Action> = this.actions$.\n      pipe(\n        ofType<ControlActions.UpdateNewsCgNews>(ControlActions.STOP_NEWS_CG),\n        mergeMap(action =>\n          this.controlService.stopNewsCg().pipe(\n          map((data) => {\n            console.log(data);\n            return new ControlActions.StopNewsCgSuccess();\n          }),\n          catchError(() => of(new ControlActions.StopNewsCgError())),)\n        )\n      );\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-ticker',\n  templateUrl: './ticker.component.html',\n  styleUrls: ['./ticker.component.css']\n})\nexport class TickerComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<p>\n  ticker works!\n</p>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSidenav } from '@angular/material/sidenav';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ControlService } from '../services/control.service';\nimport { OnairService } from '../services/onair.service';\nimport { SlideDataDialogComponent } from '../slide-data-dialog/slide-data-dialog.component';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { Language } from '../../news/models/news';\n\n@Component({\n  selector: 'app-onair',\n  templateUrl: './onair.component.html',\n  styleUrls: ['./onair.component.css']\n})\nexport class OnairComponent implements OnInit {\n\n  sidePanelOpened = true;\n  sidePanelOpened_noNews = true;\n\n  slides: Slide[];\n  selectedSlide: Slide;\n  settings_selected_slide: number;\n  destroySubject$: Subject<void> = new Subject();\n\n  @ViewChild('sidebar', {static: true}) sidenav: MatSidenav;\n\n  constructor(\n    private onAirService: OnairService,\n    public dialog: MatDialog,\n    public snackBar: MatSnackBar\n  ) { }\n\n  ngOnInit() {\n    this.onAirService.getSlides().subscribe(onair => {\n      this.slides = onair;\n      console.log(this.slides);\n    });\n  }\n\n\n\n  sideBarToggle() {\n    this.sidenav.toggle();\n  }\n\n  isOver(): boolean {\n    return window.matchMedia(`(max-width: 960px)`).matches;\n  }\n\n  onSelectSlide(slide:Slide){\n    this.selectedSlide = slide;\n    this.settings_selected_slide = slide.id;\n    console.log(slide)\n  }\n\n  addSlideData(slideId: number) {\n    let content = new slideData(null, new Language('Dhv'), this.settings_selected_slide, 0);\n\n    let dialogRef = this.dialog.open(SlideDataDialogComponent, { width: '40%', height: 'auto', maxHeight: '95%', data: content });\n\n    dialogRef.componentInstance.onAdd.subscribe((result: slideData) => {\n      console.log(result)\n      this.onAirService.addSlideData(result).subscribe(re => {\n        console.log(re)\n        this.slides = re;\n        this.slides.forEach(data => {\n          if(data.id === this.settings_selected_slide) {\n            this.selectedSlide = data;\n          }\n        })\n      })\n    },\n    err=>{\n      console.log(\"status code--->\"+err.status);\n    });\n  }\n\n  deleteContent(id: number) {\n    this.onAirService.deleteSlideData(id).subscribe(re => {\n\n      this.onAirService.getSlides().subscribe(onair => {\n        this.slides = onair;\n\n        this.slides.forEach(data => {\n          if(data.id === this.settings_selected_slide) {\n            this.selectedSlide = data;\n          }\n        })\n      });\n    },\n    err=>{\n      console.log(\"Err Deleting Slide Data, status code--->\"+err.status);\n    });\n  }\n\n\n}\n\n\n\n\nexport class Slide {\n  id: number;\n  slide_id: string;\n  slide_name: string;\n  onairslidecontent: slideData[];\n}\n\nexport class slideData{\n  data: string;\n  language: Language;\n  on_air_slides_id: number;\n  active: number;\n\n  constructor(data?: string, lang?: Language, s_id?: number, active?: number) {\n    this.data     = data;\n    this.language = lang;\n    this.on_air_slides_id = s_id;\n    this.active   = active;\n  }\n}\n","<!-- ============================================================== -->\n<!-- Simple four boxes Row -->\n<!-- ============================================================== -->\n<!-- <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n  <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n    <mat-card>\n      <mat-card-content>\n          <div class=\"d-flex no-block\">\n              <button mat-raised-button color=\"primary\"><mat-icon>refresh</mat-icon> Load CG</button>\n              <button mat-raised-button color=\"warn\" class=\"m-l-20 m-r-20\" (click)=\"stopCg()\"><mat-icon>stop</mat-icon> Stop Bar</button>\n\n              <mat-button-toggle-group #group=\"matButtonToggleGroup\" class=\"m-l-20\">\n                <mat-button-toggle value=\"left\">\n                  LIVE\n                </mat-button-toggle>\n                <mat-button-toggle value=\"center\">\n                  REPEAT\n                </mat-button-toggle>\n                <mat-button-toggle value=\"right\">\n                  RECORDED\n                </mat-button-toggle>\n                <mat-button-toggle value=\"justify\">\n                  NOTHING\n                </mat-button-toggle>\n              </mat-button-toggle-group>\n          </div>\n      </mat-card-content>\n    </mat-card>\n  </div>\n</div> -->\n\n\n\n\n\n\n\n\n\n\n<div fxLayout=\"row\" fxLayoutAlign=\"center start\">\n  <div fxFlex.gt-md=\"100\" fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n    <mat-card class=\"mat-card-top\">\n      <mat-sidenav-container [ngClass]=\"{ 'side-panel-opened': sidePanelOpened, 'side-panel-closed': !sidePanelOpened }\">\n\n        <mat-sidenav #sidebar [mode]=\"isOver() ? 'over' : 'side'\" [opened]=\"!isOver()\" (open)=\"sidePanelOpened = true || sidePanelOpened_noNews == true\"\n        (close)=\"sidePanelOpened = false || sidePanelOpened_noNews == false\">\n          <mat-toolbar color=\"primary\" class=\"no-shadow\">\n            <div fxLayout=\"row\" fxFlex=\"100\" >\n              <span class=\"m-t-0 font-14\">\n                <!-- <button mat-icon-button class=\"mr-1\"><mat-icon>inbox</mat-icon></button> -->\n\n                <mat-form-field>\n                  <!--<input matInput [matDatepicker]=\"picker\" [(ngModel)]=\"show_list_date\" (ngModelChange)=\"loadDateList($event)\">-->\n                  <input matInput [matDatepicker]=\"picker\">\n                  <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                  <mat-datepicker #picker></mat-datepicker>\n                </mat-form-field>\n\n              </span>\n            </div>\n          </mat-toolbar>\n\n          <mat-nav-list>\n            <mat-list-item (click)=\"onSelectSlide(slide)\" *ngFor=\"let slide of slides\" [style.background-color]=\"slide==selectedSlide ? 'rgba(127, 255, 212, 0.6)' : 'rgba(255, 255, 255, 0)'\">\n\n              <mat-icon *ngIf=\"slide==selectedSlide\" color=\"primary\">subdirectory_arrow_right</mat-icon>\n\n              <h3 matLine> {{slide.slide_name}} </h3>\n              <p matLine class=\"text-muted\"> {{slide.slide_id}} </p>\n\n              <mat-icon *ngIf=\"slide.id == settings_selected_slide\" color=\"warn\">offline_pin</mat-icon>\n\n              <button [matMenuTriggerFor]=\"them\" mat-icon-button class=\"ml-1\" *ngIf=\"slide.id != settings_selected_slide\">\n                <mat-icon>more_vert</mat-icon>\n              </button>\n              <mat-menu #them=\"matMenu\" x-position=\"before\">\n                <button mat-menu-item color=\"primary\" (click)=\"updateSelectedSlide(slide.id)\">Set Selected</button>\n              </mat-menu>\n\n\n            </mat-list-item>\n          </mat-nav-list>\n        </mat-sidenav>\n\n        <mat-toolbar class=\"bg-success no-shadow chat-right-panel\" color=\"warn\">\n          <div fxLayout=\"row\" fxFlex=\"100\" fxLayoutAlign=\"center center\">\n            <button (click)=\"sideBarToggle()\" class=\"mr-1\" mat-icon-button>\n              <mat-icon>short_text</mat-icon>\n            </button>\n            <!-- <span class=\"top-avatar m-r-10\">\n              <img src=\"{{selectedMessage.photo}}\" class=\"img-circle\">\n            </span> -->\n            <div fxFlex>\n              <!--<div class=\"font-14\" *ngIf=\"selectedList\">{{ selectedList.created_at | date }} {{ selectedList.name }}</div>-->\n              <div class=\"font-14\">&nbsp;</div>\n            </div>\n            <div fxFlex>\n              <div class=\"font-14\">News</div>\n            </div>\n            <!-- <button [matMenuTriggerFor]=\"them\" mat-icon-button class=\"ml-1\">\n              <mat-icon>more_vert</mat-icon>\n            </button>\n            <mat-menu #them=\"matMenu\" x-position=\"before\">\n              <button mat-menu-item color=\"primary\" [disabled]=\"!selectedNews\">Approve</button>\n              <button mat-menu-item color=\"warn\" [disabled]=\"!selectedNews\">Reject</button>\n              <button mat-menu-item color=\"link\" [disabled]=\"!selectedNews\">Edit</button>\n            </mat-menu> -->\n          </div>\n        </mat-toolbar>\n\n        <mat-card-content class=\"chat-middle-box\" style=\"min-height:700px;\">\n          <!-- selected list -->\n          <div class=\"table-rasponsive\" *ngIf=\"selectedSlide\">\n\n            <div class=\"table\">\n              <div class=\"table-header\">\n                <div class=\"header__item column-value\">Data</div>\n                <div class=\"header__item column-actions\">Actions</div>\n              </div>\n              <div class=\"table-content\">\n                <div class=\"table-row status_{{slide_content.id}}\" *ngFor=\"let slide_content of selectedSlide.onairslidecontent\" id=\"{{ slide_content.id }}\">\n                  <div class=\"table-data column-value\">{{ slide_content.value }}</div>\n\n                  <div class=\"table-data column-actions\">\n                      <button mat-icon-button color=\"basic\" matTooltip=\"View News\" matTooltipPosition=\"below\" *ngIf=\"active === 1\">\n                          <mat-icon aria-label=\"view news\">zoom_in</mat-icon>\n                      </button>\n\n                      <button mat-icon-button color=\"warn\" matTooltip=\"Remove News\" matTooltipPosition=\"below\" (click)=\"deleteContent(slide_content.id)\">\n                        <mat-icon aria-label=\"Edit\">delete</mat-icon>\n                      </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n          </div>\n        </mat-card-content>\n\n        <mat-card-actions class=\"chat-footer\">\n            <div align=\"end\">\n              <button mat-raised-button color=\"primary\" [disabled]=\"!selectedSlide\" (click)=\"addSlideData(selectedSlide.id)\">Add New</button>\n              <!-- <button mat-button color=\"basic\" [disabled]=\"!selectedNews\" (click)=\"onEdit()\">Edit</button>\n              <button mat-raised-button color=\"warn\" [disabled]=\"!selectedNews\" (click)=\"rejectNews()\">Reject</button>\n              <button mat-raised-button color=\"primary\" [disabled]=\"!selectedNews\" (click)=\"approveNews(selectedNews)\">Approve</button> -->\n            </div>\n          <!-- <div fxLayout=\"row\" layout-align=\"start center\">\n            <mat-form-field class=\"mr-1 ml-1\" fxFlex>\n              <input matInput placeholder=\"Send message\" >\n            </mat-form-field>\n            <button mat-fab color=\"warn\" >\n              <mat-icon>send</mat-icon>\n            </button>\n          </div> -->\n        </mat-card-actions>\n      </mat-sidenav-container>\n    </mat-card>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NewsCgComponent } from './news-cg/news-cg.component';\nimport { CgTextComponent } from './cg-text/cg-text.component';\nimport { TickerComponent } from './ticker/ticker.component';\nimport { RouterModule } from '@angular/router';\nimport { ControlRoutes } from './control.routing';\nimport { FormsModule } from '@angular/forms';\n\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\nimport { DemoMaterialModule } from '../demo-material-module';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { PerfectScrollbarModule } from 'ngx-perfect-scrollbar';\nimport { DragulaModule } from 'ng2-dragula';\nimport { SharedModule } from '../shared/shared.module';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducer } from './store/control.reducer';\nimport { ControlEffects } from './store/control.effects';\nimport { OnairComponent } from './onair/onair.component';\nimport { SlideDataDialogComponent } from './slide-data-dialog/slide-data-dialog.component';\nimport { SmsComponent } from './sms/sms.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(ControlRoutes),\n    FormsModule,\n    DemoMaterialModule,\n    FlexLayoutModule,\n    PerfectScrollbarModule,\n    DragulaModule,\n    SharedModule,\n    NgxDatatableModule,\n    StoreModule.forFeature('ControlState', reducer),\n    EffectsModule.forFeature([ControlEffects]),\n  ],\n  declarations: [\n    NewsCgComponent,\n    CgTextComponent,\n    TickerComponent,\n    OnairComponent,\n    SlideDataDialogComponent,\n    SmsComponent,\n  ],\n  entryComponents: [\n    SlideDataDialogComponent\n  ]\n})\nexport class ControlModule { }\n","import { Component, OnInit, Inject, Input, EventEmitter } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { slideData } from '../onair/onair.component';\nimport { Language } from '../../news/models/news';\n\n@Component({\n  selector: 'app-slide-data-dialog',\n  templateUrl: './slide-data-dialog.component.html',\n  styleUrls: ['./slide-data-dialog.component.css']\n})\nexport class SlideDataDialogComponent implements OnInit {\n\n  @Input() public dhivehiEnabled = true;\n  slide_data: slideData = new slideData(null, new Language('Dhv'), null);\n  onAdd = new EventEmitter();\n\n  constructor(\n    public dialogRef: MatDialogRef<SlideDataDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: slideData\n    ) { }\n\n  ngOnInit() {\n    this.slide_data = this.data;\n  }\n\n  closeDialog(confirmation: boolean) {\n    this.dialogRef.close(confirmation);\n  }\n\n  changeLanguage() {\n    if (this.dhivehiEnabled) {\n      this.slide_data.language.language_code = 'Dhv';\n    } else {\n      this.slide_data.language.language_code = 'Eng';\n    }\n  }\n\n  addData() {\n    // this.store.dispatch(new adminActions.CreateUser(this.user));\n    this.onAdd.emit(this.slide_data);\n    this.dialogRef.close(true);\n  }\n\n}\n","<h3 mat-dialog-title>Add Data To Slide</h3>\n<mat-slide-toggle labelPosition=\"after\" color=\"secondary\" [(ngModel)]=\"dhivehiEnabled\" (ngModelChange)=\"changeLanguage()\">{{slide_data.language.language_code}}</mat-slide-toggle>\n<form class=\"basic-form\" #userForm=\"ngForm\">\n  <div mat-dialog-content>\n\n      <div style=\"margin-top:20px;\" fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n          <div fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Slide Data</mat-label>\n              <input matInput mat-autosize required name=\"templateName\" [(ngModel)]=\"slide_data.data\" [appDnrmsThaana]=\"dhivehiEnabled\">\n            </mat-form-field>\n            {{ slide_data | json }}\n          </div>\n      </div>\n<!-- {{template|json}} -->\n  </div>\n  <!-- actions column -->\n  <div mat-dialog-actions align=\"end\">\n    <button mat-button color=\"basic\" (click)=\"closeDialog(true)\">Cancel</button>\n    <button mat-raised-button color=\"primary\" (click)=\"addData()\" [disabled]=\"!userForm.form.valid\">Add</button>\n    <!-- <button mat-button color=\"basic\" *ngIf=\"data.newsstatus.status != 'published' && data.newsstatus.status != 'deleted'\" routerLink=\"/news/{{data.id}}\" (click)=\"closeDialog(true)\">Edit</button> -->\n  </div>\n\n</form>\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams, HttpErrorResponse } from '@angular/common/http';\nimport { environment } from './../../../environments/environment';\nimport { slideData } from '../onair/onair.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OnairService {\n  private apiUrl = environment.apiUrl;\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  // get selected list\n  getSlides () {\n    return this.http.get<any>(this.apiUrl + 'control/onair/slides');\n  }\n\n  //add slide data\n  addSlideData(data: slideData) {\n    return this.http.post<any>(this.apiUrl + 'control/onair/slide/data', data);\n  }\n\n  //add slide data\n  deleteSlideData(id: number) {\n    return this.http.delete<any>(this.apiUrl + 'control/onair/slide/data/'+id);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-sms',\n  templateUrl: './sms.component.html',\n  styleUrls: ['./sms.component.css']\n})\nexport class SmsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<p>\n  sms works!\n</p>\n","import { Routes } from '@angular/router';\nimport { NewsCgComponent } from './news-cg/news-cg.component';\nimport { CgTextComponent } from './cg-text/cg-text.component';\nimport { TickerComponent } from './ticker/ticker.component';\nimport { OnairComponent } from './onair/onair.component';\nimport { SmsComponent } from './sms/sms.component';\n\nexport const ControlRoutes: Routes = [\n {\n    path: '',\n    children: [\n    {\n      path: 'news-cg',\n      component: NewsCgComponent,\n      data: { role: 'control' }\n    }, {\n      path: 'cg-text',\n      component: CgTextComponent,\n      data: { role: 'control' }\n    }, {\n      path: 'ticker',\n      component: TickerComponent,\n      data: { role: 'control' }\n    }, {\n      path: 'on-air',\n      component: OnairComponent,\n      data: { role: 'control' }\n    }, {\n      path: 'sms',\n      component: SmsComponent,\n      data: { role: 'control' }\n    }]\n  }\n];\n","import { Component, OnInit } from '@angular/core';\nimport { News, NewsList, ListNews, ListOrder } from './../../news/models/news';\n\nimport { Store } from '@ngrx/store';\nimport * as controlActions from '../store/control.actions';\nimport {Actions, ofType} from '@ngrx/effects';\n\n@Component({\n  selector: 'app-news-cg',\n  templateUrl: './news-cg.component.html',\n  styleUrls: ['./news-cg.component.css']\n})\nexport class NewsCgComponent implements OnInit {\n\n  NewsList = new NewsList();\n  selectedNews: ListNews;\n  selectedNewsKey = 0;\n\n  viewingKeyTmp: number = null;\n  viewingKey: number = null;\n\n  constructor(\n    private store: Store<any>,\n    private updates$: Actions,\n  ) { }\n\n  ngOnInit() {\n    this.store.dispatch(new controlActions.GetNewsCgNews());\n\n    this.updates$\n      .pipe(ofType(controlActions.GET_NEWS_CG_NEWS_SUCCESS))\n      .subscribe(() => {\n        this.store.select(store => store.ControlState.newsCgState)\n          .subscribe((list: NewsList) => {\n            this.NewsList = list;\n            if(this.NewsList.list_news){\n              this.selectedNews = this.NewsList.list_news[this.selectedNewsKey];\n            }else{\n              this.selectedNews = null;\n            }\n          });\n      });\n\n    this.updates$\n      .pipe(ofType(controlActions.UPDATE_NEWS_CG_NEWS_SUCCESS))\n      .subscribe(() => {\n        this.viewingKey = this.viewingKeyTmp;\n      });\n  }\n\n  nextNews() {\n    if (this.selectedNewsKey < (this.NewsList.list_news.length - 1)){\n      this.selectedNewsKey = this.selectedNewsKey + 1;\n    }\n    this.selectedNews = this.NewsList.list_news[this.selectedNewsKey];\n  }\n\n  previousNews() {\n    if (this.selectedNewsKey > 0){\n      this.selectedNewsKey = this.selectedNewsKey - 1;\n    }\n    this.selectedNews = this.NewsList.list_news[this.selectedNewsKey];\n  }\n\n  updateCg(id: number) {\n    this.viewingKeyTmp = id;\n    this.store.dispatch(new controlActions.UpdateNewsCgNews({ news_bar_id: id }));\n  }\n\n  stopCg() {\n    this.store.dispatch(new controlActions.StopNewsCg());\n  }\n\n}\n","<!-- ============================================================== -->\n<!-- Simple four boxes Row -->\n<!-- ============================================================== -->\n<!-- <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n  <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n    <mat-card>\n      <mat-card-content>\n\n          <div class=\"d-flex no-block\">\n\n              <button mat-raised-button color=\"primary\"><mat-icon>refresh</mat-icon> Load CG</button>\n              <button mat-raised-button color=\"warn\" class=\"m-l-20\" (click)=\"stopCg()\"><mat-icon>stop</mat-icon> Stop Bar</button>\n\n          </div>\n      </mat-card-content>\n    </mat-card>\n  </div>\n</div> -->\n\n\n\n  <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n      <!-- Column-->\n      <div fxFlex.gt-lg=\"75\" fxFlex.gt-md=\"60\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n        <mat-card>\n            <mat-card-content>\n              <div class=\"mb-1\">\n                <h1 class=\"mt-0\"><strong>{{NewsList.name}}</strong></h1>\n\n              </div>\n\n              <div fxLayout=\"row\" fxLayoutWrap=\"wrap\" *ngIf=\"NewsList.list_news.length > 0\">\n                <div fxFlex.gt-xs=\"100\" fxFlex=\"100\" *ngIf=\"selectedNews\">\n                  <h4 class=\"text-danger font-bold\" style=\"text-align:center;\">{{selectedNews.news.news_name}}</h4>\n                  <div fxLayout=\"column\">\n                    <span *ngIf=\"selectedNews.news.language.language_code == 'Dhv'\" class=\"dhv\" style=\"text-align:center;\">{{selectedNews.news.heading}}</span>\n                    <span *ngIf=\"selectedNews.news.language.language_code != 'Dhv'\" style=\"text-align:center;\">{{selectedNews.news.heading}}</span>\n                  </div>\n                </div>\n              </div>\n            </mat-card-content>\n\n            <!-- Nothing state -->\n            <mat-card-content class=\"table-responsive\" *ngIf=\"NewsList.list_news.length == 0\">\n              <div style=\"padding-top:100px;\">\n                <div fxLayout=\"row\" fxLayoutWrap=\"wrap\" style=\"height: 100%;padding: 0;margin: 0;display: -webkit-box;display: -moz-box;display: -ms-flexbox;display: -webkit-flex;display: flex;align-items: center;justify-content: center;\">\n                  <div fxLayout=\"row\">\n                      <img src=\"/assets/images/nothing-states/nothing-in-list.png\" style=\"width:auto; height:200px;\">\n                      <br>\n                  </div>\n                </div>\n                <div fxLayout=\"row\" fxLayoutWrap=\"wrap\" style=\"height: 100%;padding: 0;margin: 0;display: -webkit-box;display: -moz-box;display: -ms-flexbox;display: -webkit-flex;display: flex;align-items: center;justify-content: center;\">\n                    <div fxLayout=\"row\">\n                        <h3>No News in the List</h3>\n                      </div>\n                </div>\n              </div>\n            </mat-card-content>\n\n            <mat-card-content class=\"table-responsive\" *ngIf=\"NewsList.list_news.length > 0 && selectedNews\">\n                <ngx-datatable\n                  class=\"material\"\n                  [rows]=\"selectedNews.news.newsbar\"\n                  [columnMode]=\"'flex'\"\n                  [headerHeight]=\"50\"\n                  [footerHeight]=\"0\"\n                  [rowHeight]=\"'auto'\">\n\n                  <ngx-datatable-column name=\"News Bar\" [flexGrow]=\"4\">\n                    <ng-template ngx-datatable-cell-template let-row=\"row\">\n\n                      <strong *ngIf=\"selectedNews.news.language.language_code == 'Dhv'\" class=\"dhv\">{{row.title}}</strong>\n                      <strong *ngIf=\"selectedNews.news.language.language_code != 'Dhv'\">{{row.title}}</strong>\n                      <br/>\n                      <span class=\"mat-text-muted\" *ngIf=\"selectedNews.news.language.language_code == 'Dhv'\" class=\"dhv\">{{row.detail}}</span>\n                      <span class=\"mat-text-muted\" *ngIf=\"selectedNews.news.language.language_code != 'Dhv'\">{{row.detail}}</span>\n\n                    </ng-template>\n                  </ngx-datatable-column>\n\n                  <ngx-datatable-column name=\"Action\" [flexGrow]=\"1\">\n                    <ng-template ngx-datatable-cell-template let-row=\"row\">\n\n                        <button mat-icon-button color=\"warn\" (click)=\"updateCg(row.id)\" *ngIf=\"viewingKey != row.id\">\n                            <mat-icon aria-label=\"Play CG\">play_circle_outline</mat-icon>\n                        </button>\n                        <button mat-icon-button color=\"warn\" (click)=\"updateCg(row.id)\" *ngIf=\"viewingKey == row.id\">\n                            <mat-icon aria-label=\"Play CG\">play_circle_filled</mat-icon>\n                        </button>\n\n                    </ng-template>\n                  </ngx-datatable-column>\n\n                </ngx-datatable>\n            </mat-card-content>\n\n            <mat-card-content class=\"bg-light\">\n              <div class=\"d-flex\">\n                  <button mat-icon-button color=\"primary\" (click)=\"previousNews()\" [disabled]=\"!NewsList.list_news\">\n                      <mat-icon aria-label=\"Example icon-button with a heart icon\">chevron_left</mat-icon>\n                  </button>\n\n                  <button mat-icon-button color=\"primary\" (click)=\"nextNews()\" [disabled]=\"!NewsList.list_news\">\n                      <mat-icon aria-label=\"Example icon-button with a heart icon\">chevron_right</mat-icon>\n                  </button>\n              </div>\n            </mat-card-content>\n\n\n\n          </mat-card>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-cg-text',\n  templateUrl: './cg-text.component.html',\n  styleUrls: ['./cg-text.component.css']\n})\nexport class CgTextComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<p>\n  cg-text works!\n</p>\n"]}