{"version":3,"sources":["webpack:///src/app/editor/add-to-list-dialog/add-to-list-dialog.component.ts","webpack:///src/app/editor/add-to-list-dialog/add-to-list-dialog.component.html","webpack:///src/app/editor/edit/edit.component.html","webpack:///src/app/editor/edit/edit.component.ts","webpack:///src/app/editor/editor-dashboard/editor-dashboard.component.ts","webpack:///src/app/editor/editor-dashboard/editor-dashboard.component.html","webpack:///src/app/editor/editor.module.ts","webpack:///src/app/editor/editor.routing.ts","webpack:///src/app/editor/list/list.component.html","webpack:///src/app/editor/list/list.component.ts","webpack:///src/app/editor/notes-dialog/notes-dialog.component.html","webpack:///src/app/editor/notes-dialog/notes-dialog.component.ts","webpack:///src/app/editor/review/review.component.html","webpack:///src/app/editor/review/review.component.ts","webpack:///src/app/editor/services/editor-news.service.ts","webpack:///src/app/editor/store/news-editor.effects.ts"],"names":["AddToListDialogComponent","dialogRef","apiService","store","updates$","data","onDelete","EventEmitter","onAdd","onUndo","displayedColumns","displayedColumnsBreaker","getTodaysNews","subscribe","news","newsData","loadDataSource","news_data","dataSource","NewsListDataSource","checkIfInList","dataSource1","dataSource2","dataSource3","dataSource4","dataSource5","dataSource6","dataSourceBreakers","id","console","log","dispatch","list_id","list","news_id","emit","pipe","ofType","select","news_store","ReviewNews","lists","forEach","element","news_re","i_index","index","found","list_news","list_index","confirmation","close","closeDialog","MAT_DIALOG_DATA","staticData","of","DataSource","EditComponent","snackBar","router","newsService","aRoute","dialog","location","news_bar","NewsBar","ticker_news","TickerNews","edit_id","snapshot","params","tickerEnabled","submitted","loaded","loaded2","loadEditNews","editNews","response","new_news","language","language_code","dhivehiEnabled","error","message","open","draft","updateNews","isLoaded","navigate","nBar","newsbar","push","barId","ticker","tickernews","tickerIndex","splice","JSON","stringify","e","ev","el","nativeElement","selectionStart","start","end","selectionEnd","value","substr","newBodyText","toString","length","body","ContextMenuComponent","selectionchange","EditorDashboardComponent","EditorModule","CommonModule","RouterModule","NewsEditorRoutes","FormsModule","DemoMaterialModule","FlexLayoutModule","PerfectScrollbarModule","DragulaModule","SharedModule","StoreModule","reducer","EffectsModule","NewsEditorEffects","ContextMenuModule","ReviewComponent","NotesDialogComponent","ListComponent","path","children","component","role","overlay","dragulaService","displayedColumnsPublished","sidePanelOpened","sidePanelOpened_noNews","show_list_date","Date","show_list_date_f","formatDate","destroy$","Subject","subs","Subscription","add","dropModel","sourceModel","targetModel","item","post_str","ListOrder","selectedList","sub","val","settings_selected_list","ViewNewsDialogComponent","width","afterClosed","result","height","maxHeight","componentInstance","_list_id","sidenav","toggle","window","matchMedia","matches","next","event","date","MatPaginator","loadDateList","sideBarToggle","addNewsToList","onReject","editorNotes","RejectNotes","tmpNote","noteInp","addNote","doReject","newsId","notes","containNotes","note","review_news_count","init_news$","Object","keys","reviewList","selectedNews","toApprove","url","navigateByUrl","skipLocationChange","onEdit","rejectNews","approveNews","EditorNewsService","http","apiUrl","environment","get","post","reject","save_news","headers","HttpHeaders","newsstatus_id","parse","put","ordered_list","actions$","GetMyNews$","mergeMap","action","getReviewNews","map","catchError","ApproveNews$","payload","RejectNews$","reJectNews","getLists$","getNewsLists","getListsByDate$","getNewsListsByDate","AddToList$","RemoveFromList$","removeNewsFromList","UpdateListOrder$","orderList","GetSelectedList$","getSelectedList","UpdateSelectedList$","updateSelectedList","Effect","Observable"],"mappings":"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ACE;;AACA;;AAIF;;AAGA;;AACI;;AACA;;AAQJ;;AAIA;;AACA;;AACE;;AACA;;AAgBF;;AACA;;AAEA;;AACA;;AACF;;AACF;;AACJ;;AACF;;AASA;;AACE;;AACI;;AACE;;AAKE;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AAIF;;AAGA;;AACI;;AACA;;AAQJ;;AAIA;;AACA;;AACE;;AACA;;AAgBF;;AACA;;AAEA;;AACA;;AACF;;AACF;;AACJ;;AACF;;AASA;;AACE;;AACI;;AACE;;AAKE;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AAIF;;AAGA;;AACI;;AACA;;AAQJ;;AAIA;;AACA;;AACE;;AACA;;AAgBF;;AACA;;AAEA;;AACA;;AACF;;AACF;;AACJ;;AACF;;AASA;;AACE;;AACI;;AACE;;AAKE;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AAIF;;AAGA;;AACI;;AACA;;AAQJ;;AAIA;;AACA;;AACE;;AACA;;AAgBF;;AACA;;AAEA;;AACA;;AACF;;AACF;;AACJ;;AACF;;AASA;;AACE;;AACI;;AACE;;AAKE;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AAIF;;AAGA;;AACI;;AACA;;AAQJ;;AAIA;;AACA;;AACE;;AACA;;AAgBF;;AACA;;AAEA;;AACA;;AACF;;AACF;;AACJ;;AACF;;AASA;;AACE;;AACI;;AACE;;AAKE;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AAIF;;AAGA;;AACI;;AACA;;AAQJ;;AAIA;;AACA;;AACE;;AACA;;AAgBF;;AACA;;AAEA;;AACA;;AACF;;AACF;;AACJ;;AACF;;AAKA;;AACI;;AACI;;AACE;;AAKE;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AAIF;;AAGA;;AACI;;AACA;;AAQJ;;A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","file":"src_app_editor_editor_module_ts-es5.js","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { PageEvent } from '@angular/material/paginator';\nimport { EditorNewsService } from '../services/editor-news.service';\nimport { News, ListNews, NewsList } from '../../news/models/news';\nimport { DataSource } from '@angular/cdk/table';\nimport { Observable } from 'rxjs';\n\nimport { of } from 'rxjs';\n/*import 'rxjs/add/observable/of';*/\n\nimport { Store } from '@ngrx/store';\nimport * as editorActions from '../store/news-editor.actions';\nimport * as newsActions from '../../news/store/news.actions';\n\nimport {Actions, ofType} from '@ngrx/effects';\n\n@Component({\n  selector: 'app-add-to-list-dialog',\n  templateUrl: './add-to-list-dialog.component.html',\n  styleUrls: ['./add-to-list-dialog.component.css']\n})\nexport class AddToListDialogComponent implements OnInit {\n  onDelete = new EventEmitter();\n  onAdd = new EventEmitter();\n  onUndo = new EventEmitter();\n\n  newsData: News[];\n\n  // mat table\n  displayedColumns = ['news_name', 'heading', 'date', 'actions'];\n  displayedColumnsBreaker = ['heading_br', 'actions_br'];\n  dataSource: DataSource<any>;\n  dataSource1: DataSource<any>;\n  dataSource2: DataSource<any>;\n  dataSource3: DataSource<any>;\n  dataSource4: DataSource<any>;\n  dataSource5: DataSource<any>;\n  dataSource6: DataSource<any>;\n  dataSource7: DataSource<any>;\n  dataSourceBreakers: DataSource<any>;\n\n  constructor(\n    public dialogRef: MatDialogRef<AddToListDialogComponent>,\n    public apiService: EditorNewsService,\n    private store: Store<any>,\n    private updates$: Actions,\n    @Inject(MAT_DIALOG_DATA) public data: { list: NewsList }\n  ) { }\n\n  ngOnInit() {\n    // console.log(this.data)\n    this.apiService.getTodaysNews().subscribe((news: any) => {\n      this.newsData = news;\n      this.loadDataSource(this.newsData);\n    });\n  }\n\n  loadDataSource(news_data: News[]) {\n    this.dataSource  = new NewsListDataSource(this.checkIfInList(news_data[\"1\"][\"data\"]));\n    this.dataSource1 = new NewsListDataSource(this.checkIfInList(news_data[\"2\"][\"data\"]));\n    this.dataSource2 = new NewsListDataSource(this.checkIfInList(news_data[\"3\"][\"data\"]));\n    this.dataSource3 = new NewsListDataSource(this.checkIfInList(news_data[\"4\"][\"data\"]));\n    this.dataSource4 = new NewsListDataSource(this.checkIfInList(news_data[\"5\"][\"data\"]));\n    this.dataSource5 = new NewsListDataSource(this.checkIfInList(news_data[\"6\"][\"data\"]));\n    this.dataSource6 = new NewsListDataSource(this.checkIfInList(news_data[\"7\"][\"data\"]));\n    this.dataSourceBreakers = new NewsListDataSource(this.checkIfInList(news_data[\"breakers\"]));\n  }\n\n  addToList(id: number) {\n    console.log(id);\n    // this.store.dispatch(new newsActions.UpdateMyNewsLoaded({ isMyNewsLoaded: false }));\n    this.store.dispatch(new editorActions.AddToList({ list_id: this.data.list.id, news_id: id }));\n    this.onAdd.emit({ list_id: this.data.list.id, news_id: id });\n\n\n    this.updates$\n    .pipe(ofType(editorActions.ADD_TO_LIST_SUCCESS))\n    .subscribe(() => {\n      this.store.select(news_store => news_store.ReviewNews.lists)\n      .subscribe(list => {\n        list.forEach((element: NewsList) => {\n          if (element.id === this.data.list.id) {\n            // console.log(element)\n            this.data = { list: element };\n            this.loadDataSource(this.newsData);\n          }\n        });\n      });\n\n    });\n  }\n\n  checkIfInList(news_data: News[]) {\n    let news_re: News[] = [];\n    let i_index = 0;\n    news_data.forEach((news, index) => {\n      let found = false;\n\n      this.data.list.list_news.forEach((list_news, list_index) => {\n        if (news.id === list_news.news.id) {\n          found = true;\n        }\n      });\n\n      if(!found){\n        news_re[i_index] = news;\n        i_index = i_index + 1;\n      }\n\n    });\n    return news_re;\n  }\n\n  closeDialog(confirmation: boolean) {\n    this.dialogRef.close(confirmation);\n  }\n\n  doDelete(id) {\n    this.closeDialog(false);\n    this.onDelete.emit(id);\n  }\n\n  doAdd(id) {\n    this.closeDialog(false);\n    this.onAdd.emit(id);\n  }\n\n  doUndo(id) {\n    this.closeDialog(false);\n    this.onUndo.emit(id);\n  }\n\n}\n\nexport class NewsListDataSource extends DataSource<News> {\n  constructor(private staticData: News[]) {\n    super();\n  }\n\n  connect(): Observable<News[]> {\n    return of(this.staticData);\n  }\n\n  disconnect() {}\n}\n","<h3 mat-dialog-title>Add News To: <i>{{data.list.name}}</i></h3>\n\n  <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n      <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n          <mat-card>\n              <!-- <mat-toolbar color=\"primary\" class=\"no-shadow\">\n                <div fxLayout=\"row\" fxFlex=\"100\" >\n                  <span class=\"m-t-0 font-14\">My News</span>\n                </div>\n              </mat-toolbar> -->\n              <mat-card-content>\n\n\n                <mat-tab-group>\n                  <!-- TODAYS -->\n                  <mat-tab label=\"Todays News\">\n                    <mat-card-content>\n                      <div class=\"table-rasponsive\">\n                        <mat-table #table [dataSource]=\"dataSource\">\n                            <!--- Note that these columns can be defined in any order.\n                                  The actual rendered columns are set as a property on the row definition\" -->\n\n                            <!-- Name Column -->\n                            <ng-container matColumnDef=\"news_name\">\n                              <mat-header-cell *matHeaderCellDef> News Name </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\"> {{ news.news_name | uppercase }} </mat-cell>\n                            </ng-container>\n\n                            <!-- Heading Column -->\n                            <ng-container matColumnDef=\"heading\">\n                              <mat-header-cell *matHeaderCellDef> Heading </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\" [class.dhv_nosize]=\"news.language.language_code=='Dhv'\"> {{news.heading}} </mat-cell>\n                            </ng-container>\n\n                            <!-- Date Column -->\n                            <ng-container matColumnDef=\"date\">\n                              <mat-header-cell *matHeaderCellDef> Date </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\" matTooltip=\"{{news.created_at | date:'medium'}}\" matTooltipPosition=\"below\" [className]=\"(news.created_at|date) != (news.updated_at|date) ? 'nottodays' : 'todays'\">\n                                <span *ngIf=\"(news.created_at|date) === (news.updated_at|date)\">{{news.created_at | date}}</span>\n                                <mat-chip-list><mat-chip selected=\"true\" *ngIf=\"(news.created_at|date) != (news.updated_at|date)\" class=\"bg-warning\">{{news.created_at | date}}</mat-chip></mat-chip-list>\n                              </mat-cell>\n                            </ng-container>\n\n                            <!-- Status Column -->\n                            <ng-container matColumnDef=\"status\">\n                                <mat-header-cell *matHeaderCellDef> &nbsp; </mat-header-cell>\n                                <mat-cell *matCellDef=\"let news\">\n                                  <mat-chip-list>\n                                    <mat-chip selected=\"false\" *ngIf=\"news.newsstatus.status == 'draft'\">Draft</mat-chip>\n                                    <mat-chip class=\"bg-success\" selected=\"true\" *ngIf=\"news.newsstatus.status == 'published'\">Approved</mat-chip>\n                                    <mat-chip color=\"primary\" selected=\"true\" *ngIf=\"news.newsstatus.status == 'ready'\">In-Review</mat-chip>\n                                    <mat-chip selected=\"true\" *ngIf=\"news.newsstatus.status == 'reject'\" class=\"bg-warning\">Rejected</mat-chip>\n                                  </mat-chip-list>\n                              </mat-cell>\n                            </ng-container>\n\n                            <!-- Actions Column -->\n                            <!--<div [hidden]=\"iii !=hoveredIndex\">-->\n                            <div>\n                            <ng-container matColumnDef=\"actions\">\n                              <mat-header-cell *matHeaderCellDef> Actions </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\" style=\"display: flex; justify-content: flex-end;\">\n                                  <!-- <button mat-button color=\"warn\" *ngIf=\"news.newsstatus.status != 'published'\" (click)=\"deleteNews(news.id)\">Delete</button> -->\n                                  <!-- <button mat-button color=\"basic\" *ngIf=\"news.newsstatus.status != 'published'\" routerLink=\"/news/{{news.id}}\">Edit</button> -->\n\n                                  <button mat-icon-button color=\"warn\" (click)=\"addToList(news.id)\" matTooltip=\"Add to List\" matTooltipPosition=\"below\">\n                                    <mat-icon aria-label=\"Edit\">add</mat-icon>\n                                  </button>\n\n                                  <!-- <button mat-icon-button color=\"basic\" *ngIf=\"news.newsstatus.status != 'published'\" routerLink=\"/news/{{news.id}}\" matTooltip=\"Edit News\" matTooltipPosition=\"below\">\n                                    <mat-icon aria-label=\"Edit\">edit</mat-icon>\n                                  </button>\n                                  <button mat-icon-button color=\"basic\" (click)=\"viewNews(news.id)\" matTooltip=\"View News\" matTooltipPosition=\"below\">\n                                      <mat-icon aria-label=\"view news\">zoom_in</mat-icon>\n                                  </button> -->\n\n                              </mat-cell>\n                            </ng-container>\n                            </div>\n\n                            <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n                            <mat-row *matRowDef=\"let row; columns: displayedColumns; let i=index\"></mat-row>\n                          </mat-table>\n                        </div>\n                    </mat-card-content>\n                  </mat-tab>\n\n\n\n\n\n\n                  <!-- DAY -1 -->\n                  <mat-tab label=\"{{newsData['2']['date']}}\">\n                    <mat-card-content>\n                        <div class=\"table-rasponsive\">\n                          <mat-table #table [dataSource]=\"dataSource1\">\n                            <!--- Note that these columns can be defined in any order.\n                                  The actual rendered columns are set as a property on the row definition\" -->\n\n                            <!-- Name Column -->\n                            <ng-container matColumnDef=\"news_name\">\n                              <mat-header-cell *matHeaderCellDef> News Name </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\"> {{ news.news_name | uppercase }} </mat-cell>\n                            </ng-container>\n\n                            <!-- Heading Column -->\n                            <ng-container matColumnDef=\"heading\">\n                              <mat-header-cell *matHeaderCellDef> Heading </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\" [class.dhv_nosize]=\"news.language.language_code=='Dhv'\"> {{news.heading}} </mat-cell>\n                            </ng-container>\n\n                            <!-- Date Column -->\n                            <ng-container matColumnDef=\"date\">\n                              <mat-header-cell *matHeaderCellDef> Date </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\" matTooltip=\"{{news.created_at | date:'medium'}}\" matTooltipPosition=\"below\">\n                                  <span *ngIf=\"(news.created_at|date) === (news.updated_at|date)\">{{news.created_at | date}}</span>\n                                  <mat-chip-list><mat-chip selected=\"true\" *ngIf=\"(news.created_at|date) != (news.updated_at|date)\" class=\"bg-warning\">{{news.created_at | date}}</mat-chip></mat-chip-list>\n                              </mat-cell>\n                            </ng-container>\n\n                            <!-- Status Column -->\n                            <ng-container matColumnDef=\"status\">\n                                <mat-header-cell *matHeaderCellDef> &nbsp; </mat-header-cell>\n                                <mat-cell *matCellDef=\"let news\">\n                                  <mat-chip-list>\n                                    <mat-chip selected=\"false\" *ngIf=\"news.newsstatus.status == 'draft'\">Draft</mat-chip>\n                                    <mat-chip class=\"bg-success\" selected=\"true\" *ngIf=\"news.newsstatus.status == 'published'\">Approved</mat-chip>\n                                    <mat-chip color=\"primary\" selected=\"true\" *ngIf=\"news.newsstatus.status == 'ready'\">In-Review</mat-chip>\n                                    <mat-chip selected=\"true\" *ngIf=\"news.newsstatus.status == 'reject'\" class=\"bg-warning\">Rejected</mat-chip>\n                                  </mat-chip-list>\n                              </mat-cell>\n                            </ng-container>\n\n                            <!-- Actions Column -->\n                            <!--<div [hidden]=\"iii!=hoveredIndex\">-->\n                            <div>\n                            <ng-container matColumnDef=\"actions\">\n                              <mat-header-cell *matHeaderCellDef> Actions </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\" style=\"display: flex; justify-content: flex-end;\">\n                                  <!-- <button mat-button color=\"warn\" *ngIf=\"news.newsstatus.status != 'published'\" (click)=\"deleteNews(news.id)\">Delete</button> -->\n                                  <!-- <button mat-button color=\"basic\" *ngIf=\"news.newsstatus.status != 'published'\" routerLink=\"/news/{{news.id}}\">Edit</button> -->\n\n                                  <button mat-icon-button color=\"warn\" (click)=\"addToList(news.id)\" matTooltip=\"Add to List\" matTooltipPosition=\"below\">\n                                    <mat-icon aria-label=\"Edit\">add</mat-icon>\n                                  </button>\n\n                                  <!-- <button mat-icon-button color=\"basic\" *ngIf=\"news.newsstatus.status != 'published'\" routerLink=\"/news/{{news.id}}\" matTooltip=\"Edit News\" matTooltipPosition=\"below\">\n                                    <mat-icon aria-label=\"Edit\">edit</mat-icon>\n                                  </button>\n                                  <button mat-icon-button color=\"basic\" (click)=\"viewNews(news.id)\" matTooltip=\"View News\" matTooltipPosition=\"below\">\n                                      <mat-icon aria-label=\"view news\">zoom_in</mat-icon>\n                                  </button> -->\n\n                              </mat-cell>\n                            </ng-container>\n                            </div>\n\n                            <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n                            <mat-row *matRowDef=\"let row; columns: displayedColumns; let i=index\"></mat-row>\n                          </mat-table>\n                        </div>\n                    </mat-card-content>\n                  </mat-tab>\n\n\n\n\n\n\n\n                  <!-- DAY -2 -->\n                  <mat-tab label=\"{{newsData['3']['date']}}\">\n                    <mat-card-content>\n                        <div class=\"table-rasponsive\">\n                          <mat-table #table [dataSource]=\"dataSource2\">\n                            <!--- Note that these columns can be defined in any order.\n                                  The actual rendered columns are set as a property on the row definition\" -->\n\n                            <!-- Name Column -->\n                            <ng-container matColumnDef=\"news_name\">\n                              <mat-header-cell *matHeaderCellDef> News Name </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\"> {{ news.news_name | uppercase }} </mat-cell>\n                            </ng-container>\n\n                            <!-- Heading Column -->\n                            <ng-container matColumnDef=\"heading\">\n                              <mat-header-cell *matHeaderCellDef> Heading </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\" [class.dhv_nosize]=\"news.language.language_code=='Dhv'\"> {{news.heading}} </mat-cell>\n                            </ng-container>\n\n                            <!-- Date Column -->\n                            <ng-container matColumnDef=\"date\">\n                              <mat-header-cell *matHeaderCellDef> Date </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\" matTooltip=\"{{news.created_at | date:'medium'}}\" matTooltipPosition=\"below\">\n                                  <span *ngIf=\"(news.created_at|date) === (news.updated_at|date)\">{{news.created_at | date}}</span>\n                                  <mat-chip-list><mat-chip selected=\"true\" *ngIf=\"(news.created_at|date) != (news.updated_at|date)\" class=\"bg-warning\">{{news.created_at | date}}</mat-chip></mat-chip-list>\n                              </mat-cell>\n                            </ng-container>\n\n                            <!-- Status Column -->\n                            <ng-container matColumnDef=\"status\">\n                                <mat-header-cell *matHeaderCellDef> &nbsp; </mat-header-cell>\n                                <mat-cell *matCellDef=\"let news\">\n                                  <mat-chip-list>\n                                    <mat-chip selected=\"false\" *ngIf=\"news.newsstatus.status == 'draft'\">Draft</mat-chip>\n                                    <mat-chip class=\"bg-success\" selected=\"true\" *ngIf=\"news.newsstatus.status == 'published'\">Approved</mat-chip>\n                                    <mat-chip color=\"primary\" selected=\"true\" *ngIf=\"news.newsstatus.status == 'ready'\">In-Review</mat-chip>\n                                    <mat-chip selected=\"true\" *ngIf=\"news.newsstatus.status == 'reject'\" class=\"bg-warning\">Rejected</mat-chip>\n                                  </mat-chip-list>\n                              </mat-cell>\n                            </ng-container>\n\n                            <!-- Actions Column -->\n                            <!--<div [hidden]=\"iii!=hoveredIndex\">-->\n                            <div>\n                            <ng-container matColumnDef=\"actions\">\n                              <mat-header-cell *matHeaderCellDef> Actions </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\" style=\"display: flex; justify-content: flex-end;\">\n                                  <!-- <button mat-button color=\"warn\" *ngIf=\"news.newsstatus.status != 'published'\" (click)=\"deleteNews(news.id)\">Delete</button> -->\n                                  <!-- <button mat-button color=\"basic\" *ngIf=\"news.newsstatus.status != 'published'\" routerLink=\"/news/{{news.id}}\">Edit</button> -->\n\n                                  <button mat-icon-button color=\"warn\" (click)=\"addToList(news.id)\" matTooltip=\"Add to List\" matTooltipPosition=\"below\">\n                                    <mat-icon aria-label=\"Edit\">add</mat-icon>\n                                  </button>\n\n                                  <!-- <button mat-icon-button color=\"basic\" *ngIf=\"news.newsstatus.status != 'published'\" routerLink=\"/news/{{news.id}}\" matTooltip=\"Edit News\" matTooltipPosition=\"below\">\n                                    <mat-icon aria-label=\"Edit\">edit</mat-icon>\n                                  </button>\n                                  <button mat-icon-button color=\"basic\" (click)=\"viewNews(news.id)\" matTooltip=\"View News\" matTooltipPosition=\"below\">\n                                      <mat-icon aria-label=\"view news\">zoom_in</mat-icon>\n                                  </button> -->\n\n                              </mat-cell>\n                            </ng-container>\n                            </div>\n\n                            <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n                            <mat-row *matRowDef=\"let row; columns: displayedColumns; let i=index\"></mat-row>\n                          </mat-table>\n                        </div>\n                    </mat-card-content>\n                  </mat-tab>\n\n\n\n\n\n\n\n                  <!-- DAY -3 -->\n                  <mat-tab label=\"{{newsData['4']['date']}}\">\n                    <mat-card-content>\n                        <div class=\"table-rasponsive\">\n                          <mat-table #table [dataSource]=\"dataSource3\">\n                            <!--- Note that these columns can be defined in any order.\n                                  The actual rendered columns are set as a property on the row definition\" -->\n\n                            <!-- Name Column -->\n                            <ng-container matColumnDef=\"news_name\">\n                              <mat-header-cell *matHeaderCellDef> News Name </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\"> {{ news.news_name | uppercase }} </mat-cell>\n                            </ng-container>\n\n                            <!-- Heading Column -->\n                            <ng-container matColumnDef=\"heading\">\n                              <mat-header-cell *matHeaderCellDef> Heading </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\" [class.dhv_nosize]=\"news.language.language_code=='Dhv'\"> {{news.heading}} </mat-cell>\n                            </ng-container>\n\n                            <!-- Date Column -->\n                            <ng-container matColumnDef=\"date\">\n                              <mat-header-cell *matHeaderCellDef> Date </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\" matTooltip=\"{{news.created_at | date:'medium'}}\" matTooltipPosition=\"below\">\n                                  <span *ngIf=\"(news.created_at|date) === (news.updated_at|date)\">{{news.created_at | date}}</span>\n                                  <mat-chip-list><mat-chip selected=\"true\" *ngIf=\"(news.created_at|date) != (news.updated_at|date)\" class=\"bg-warning\">{{news.created_at | date}}</mat-chip></mat-chip-list>\n                              </mat-cell>\n                            </ng-container>\n\n                            <!-- Status Column -->\n                            <ng-container matColumnDef=\"status\">\n                                <mat-header-cell *matHeaderCellDef> &nbsp; </mat-header-cell>\n                                <mat-cell *matCellDef=\"let news\">\n                                  <mat-chip-list>\n                                    <mat-chip selected=\"false\" *ngIf=\"news.newsstatus.status == 'draft'\">Draft</mat-chip>\n                                    <mat-chip class=\"bg-success\" selected=\"true\" *ngIf=\"news.newsstatus.status == 'published'\">Approved</mat-chip>\n                                    <mat-chip color=\"primary\" selected=\"true\" *ngIf=\"news.newsstatus.status == 'ready'\">In-Review</mat-chip>\n                                    <mat-chip selected=\"true\" *ngIf=\"news.newsstatus.status == 'reject'\" class=\"bg-warning\">Rejected</mat-chip>\n                                  </mat-chip-list>\n                              </mat-cell>\n                            </ng-container>\n\n                            <!-- Actions Column -->\n                            <!--<div [hidden]=\"iii!=hoveredIndex\">-->\n                            <div>\n                            <ng-container matColumnDef=\"actions\">\n                              <mat-header-cell *matHeaderCellDef> Actions </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\" style=\"display: flex; justify-content: flex-end;\">\n                                  <!-- <button mat-button color=\"warn\" *ngIf=\"news.newsstatus.status != 'published'\" (click)=\"deleteNews(news.id)\">Delete</button> -->\n                                  <!-- <button mat-button color=\"basic\" *ngIf=\"news.newsstatus.status != 'published'\" routerLink=\"/news/{{news.id}}\">Edit</button> -->\n\n                                  <button mat-icon-button color=\"warn\" (click)=\"addToList(news.id)\" matTooltip=\"Add to List\" matTooltipPosition=\"below\">\n                                    <mat-icon aria-label=\"Edit\">add</mat-icon>\n                                  </button>\n\n                                  <!-- <button mat-icon-button color=\"basic\" *ngIf=\"news.newsstatus.status != 'published'\" routerLink=\"/news/{{news.id}}\" matTooltip=\"Edit News\" matTooltipPosition=\"below\">\n                                    <mat-icon aria-label=\"Edit\">edit</mat-icon>\n                                  </button>\n                                  <button mat-icon-button color=\"basic\" (click)=\"viewNews(news.id)\" matTooltip=\"View News\" matTooltipPosition=\"below\">\n                                      <mat-icon aria-label=\"view news\">zoom_in</mat-icon>\n                                  </button> -->\n\n                              </mat-cell>\n                            </ng-container>\n                            </div>\n\n                            <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n                            <mat-row *matRowDef=\"let row; columns: displayedColumns; let i=index\"></mat-row>\n                          </mat-table>\n                        </div>\n                    </mat-card-content>\n                  </mat-tab>\n\n\n\n\n\n\n\n                  <!-- DAY -4 -->\n                  <mat-tab label=\"{{newsData['5']['date']}}\">\n                    <mat-card-content>\n                        <div class=\"table-rasponsive\">\n                          <mat-table #table [dataSource]=\"dataSource4\">\n                            <!--- Note that these columns can be defined in any order.\n                                  The actual rendered columns are set as a property on the row definition\" -->\n\n                            <!-- Name Column -->\n                            <ng-container matColumnDef=\"news_name\">\n                              <mat-header-cell *matHeaderCellDef> News Name </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\"> {{ news.news_name | uppercase }} </mat-cell>\n                            </ng-container>\n\n                            <!-- Heading Column -->\n                            <ng-container matColumnDef=\"heading\">\n                              <mat-header-cell *matHeaderCellDef> Heading </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\" [class.dhv_nosize]=\"news.language.language_code=='Dhv'\"> {{news.heading}} </mat-cell>\n                            </ng-container>\n\n                            <!-- Date Column -->\n                            <ng-container matColumnDef=\"date\">\n                              <mat-header-cell *matHeaderCellDef> Date </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\" matTooltip=\"{{news.created_at | date:'medium'}}\" matTooltipPosition=\"below\">\n                                  <span *ngIf=\"(news.created_at|date) === (news.updated_at|date)\">{{news.created_at | date}}</span>\n                                  <mat-chip-list><mat-chip selected=\"true\" *ngIf=\"(news.created_at|date) != (news.updated_at|date)\" class=\"bg-warning\">{{news.created_at | date}}</mat-chip></mat-chip-list>\n                              </mat-cell>\n                            </ng-container>\n\n                            <!-- Status Column -->\n                            <ng-container matColumnDef=\"status\">\n                                <mat-header-cell *matHeaderCellDef> &nbsp; </mat-header-cell>\n                                <mat-cell *matCellDef=\"let news\">\n                                  <mat-chip-list>\n                                    <mat-chip selected=\"false\" *ngIf=\"news.newsstatus.status == 'draft'\">Draft</mat-chip>\n                                    <mat-chip class=\"bg-success\" selected=\"true\" *ngIf=\"news.newsstatus.status == 'published'\">Approved</mat-chip>\n                                    <mat-chip color=\"primary\" selected=\"true\" *ngIf=\"news.newsstatus.status == 'ready'\">In-Review</mat-chip>\n                                    <mat-chip selected=\"true\" *ngIf=\"news.newsstatus.status == 'reject'\" class=\"bg-warning\">Rejected</mat-chip>\n                                  </mat-chip-list>\n                              </mat-cell>\n                            </ng-container>\n\n                            <!-- Actions Column -->\n                            <!--<div [hidden]=\"iii!=hoveredIndex\">-->\n                            <div>\n                            <ng-container matColumnDef=\"actions\">\n                              <mat-header-cell *matHeaderCellDef> Actions </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\" style=\"display: flex; justify-content: flex-end;\">\n                                  <!-- <button mat-button color=\"warn\" *ngIf=\"news.newsstatus.status != 'published'\" (click)=\"deleteNews(news.id)\">Delete</button> -->\n                                  <!-- <button mat-button color=\"basic\" *ngIf=\"news.newsstatus.status != 'published'\" routerLink=\"/news/{{news.id}}\">Edit</button> -->\n\n                                  <button mat-icon-button color=\"warn\" (click)=\"addToList(news.id)\" matTooltip=\"Add to List\" matTooltipPosition=\"below\">\n                                    <mat-icon aria-label=\"Edit\">add</mat-icon>\n                                  </button>\n\n                                  <!-- <button mat-icon-button color=\"basic\" *ngIf=\"news.newsstatus.status != 'published'\" routerLink=\"/news/{{news.id}}\" matTooltip=\"Edit News\" matTooltipPosition=\"below\">\n                                    <mat-icon aria-label=\"Edit\">edit</mat-icon>\n                                  </button>\n                                  <button mat-icon-button color=\"basic\" (click)=\"viewNews(news.id)\" matTooltip=\"View News\" matTooltipPosition=\"below\">\n                                      <mat-icon aria-label=\"view news\">zoom_in</mat-icon>\n                                  </button> -->\n\n                              </mat-cell>\n                            </ng-container>\n                            </div>\n\n                            <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n                            <mat-row *matRowDef=\"let row; columns: displayedColumns; let i=index\"></mat-row>\n                          </mat-table>\n                        </div>\n                    </mat-card-content>\n                  </mat-tab>\n\n\n\n\n\n\n\n                  <!-- DAY -5 -->\n                  <mat-tab label=\"{{newsData['6']['date']}}\">\n                    <mat-card-content>\n                        <div class=\"table-rasponsive\">\n                          <mat-table #table [dataSource]=\"dataSource5\">\n                            <!--- Note that these columns can be defined in any order.\n                                  The actual rendered columns are set as a property on the row definition\" -->\n\n                            <!-- Name Column -->\n                            <ng-container matColumnDef=\"news_name\">\n                              <mat-header-cell *matHeaderCellDef> News Name </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\"> {{ news.news_name | uppercase }} </mat-cell>\n                            </ng-container>\n\n                            <!-- Heading Column -->\n                            <ng-container matColumnDef=\"heading\">\n                              <mat-header-cell *matHeaderCellDef> Heading </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\" [class.dhv_nosize]=\"news.language.language_code=='Dhv'\"> {{news.heading}} </mat-cell>\n                            </ng-container>\n\n                            <!-- Date Column -->\n                            <ng-container matColumnDef=\"date\">\n                              <mat-header-cell *matHeaderCellDef> Date </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\" matTooltip=\"{{news.created_at | date:'medium'}}\" matTooltipPosition=\"below\">\n                                  <span *ngIf=\"(news.created_at|date) === (news.updated_at|date)\">{{news.created_at | date}}</span>\n                                  <mat-chip-list><mat-chip selected=\"true\" *ngIf=\"(news.created_at|date) != (news.updated_at|date)\" class=\"bg-warning\">{{news.created_at | date}}</mat-chip></mat-chip-list>\n                              </mat-cell>\n                            </ng-container>\n\n                            <!-- Status Column -->\n                            <ng-container matColumnDef=\"status\">\n                                <mat-header-cell *matHeaderCellDef> &nbsp; </mat-header-cell>\n                                <mat-cell *matCellDef=\"let news\">\n                                  <mat-chip-list>\n                                    <mat-chip selected=\"false\" *ngIf=\"news.newsstatus.status == 'draft'\">Draft</mat-chip>\n                                    <mat-chip class=\"bg-success\" selected=\"true\" *ngIf=\"news.newsstatus.status == 'published'\">Approved</mat-chip>\n                                    <mat-chip color=\"primary\" selected=\"true\" *ngIf=\"news.newsstatus.status == 'ready'\">In-Review</mat-chip>\n                                    <mat-chip selected=\"true\" *ngIf=\"news.newsstatus.status == 'reject'\" class=\"bg-warning\">Rejected</mat-chip>\n                                  </mat-chip-list>\n                              </mat-cell>\n                            </ng-container>\n\n                            <!-- Actions Column -->\n                            <!--<div [hidden]=\"iii!=hoveredIndex\">-->\n                            <div>\n                            <ng-container matColumnDef=\"actions\">\n                              <mat-header-cell *matHeaderCellDef> Actions </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\" style=\"display: flex; justify-content: flex-end;\">\n                                  <!-- <button mat-button color=\"warn\" *ngIf=\"news.newsstatus.status != 'published'\" (click)=\"deleteNews(news.id)\">Delete</button> -->\n                                  <!-- <button mat-button color=\"basic\" *ngIf=\"news.newsstatus.status != 'published'\" routerLink=\"/news/{{news.id}}\">Edit</button> -->\n\n                                  <button mat-icon-button color=\"warn\" (click)=\"addToList(news.id)\" matTooltip=\"Add to List\" matTooltipPosition=\"below\">\n                                    <mat-icon aria-label=\"Edit\">add</mat-icon>\n                                  </button>\n\n                                  <!-- <button mat-icon-button color=\"basic\" *ngIf=\"news.newsstatus.status != 'published'\" routerLink=\"/news/{{news.id}}\" matTooltip=\"Edit News\" matTooltipPosition=\"below\">\n                                    <mat-icon aria-label=\"Edit\">edit</mat-icon>\n                                  </button>\n                                  <button mat-icon-button color=\"basic\" (click)=\"viewNews(news.id)\" matTooltip=\"View News\" matTooltipPosition=\"below\">\n                                      <mat-icon aria-label=\"view news\">zoom_in</mat-icon>\n                                  </button> -->\n\n                              </mat-cell>\n                            </ng-container>\n                            </div>\n\n                            <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n                            <mat-row *matRowDef=\"let row; columns: displayedColumns; let i=index\"></mat-row>\n                          </mat-table>\n                        </div>\n                    </mat-card-content>\n                  </mat-tab>\n\n\n\n\n\n\n\n                  <!-- DAY -6 -->\n                  <mat-tab label=\"{{newsData['7']['date']}}\">\n                    <mat-card-content>\n                        <div class=\"table-rasponsive\">\n                          <mat-table #table [dataSource]=\"dataSource6\">\n                            <!--- Note that these columns can be defined in any order.\n                                  The actual rendered columns are set as a property on the row definition\" -->\n\n                            <!-- Name Column -->\n                            <ng-container matColumnDef=\"news_name\">\n                              <mat-header-cell *matHeaderCellDef> News Name </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\"> {{ news.news_name | uppercase }} </mat-cell>\n                            </ng-container>\n\n                            <!-- Heading Column -->\n                            <ng-container matColumnDef=\"heading\">\n                              <mat-header-cell *matHeaderCellDef> Heading </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\" [class.dhv_nosize]=\"news.language.language_code=='Dhv'\"> {{news.heading}} </mat-cell>\n                            </ng-container>\n\n                            <!-- Date Column -->\n                            <ng-container matColumnDef=\"date\">\n                              <mat-header-cell *matHeaderCellDef> Date </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\" matTooltip=\"{{news.created_at | date:'medium'}}\" matTooltipPosition=\"below\">\n                                  <span *ngIf=\"(news.created_at|date) === (news.updated_at|date)\">{{news.created_at | date}}</span>\n                                  <mat-chip-list><mat-chip selected=\"true\" *ngIf=\"(news.created_at|date) != (news.updated_at|date)\" class=\"bg-warning\">{{news.created_at | date}}</mat-chip></mat-chip-list>\n                              </mat-cell>\n                            </ng-container>\n\n                            <!-- Status Column -->\n                            <ng-container matColumnDef=\"status\">\n                                <mat-header-cell *matHeaderCellDef> &nbsp; </mat-header-cell>\n                                <mat-cell *matCellDef=\"let news\">\n                                  <mat-chip-list>\n                                    <mat-chip selected=\"false\" *ngIf=\"news.newsstatus.status == 'draft'\">Draft</mat-chip>\n                                    <mat-chip class=\"bg-success\" selected=\"true\" *ngIf=\"news.newsstatus.status == 'published'\">Approved</mat-chip>\n                                    <mat-chip color=\"primary\" selected=\"true\" *ngIf=\"news.newsstatus.status == 'ready'\">In-Review</mat-chip>\n                                    <mat-chip selected=\"true\" *ngIf=\"news.newsstatus.status == 'reject'\" class=\"bg-warning\">Rejected</mat-chip>\n                                  </mat-chip-list>\n                              </mat-cell>\n                            </ng-container>\n\n                            <!-- Actions Column -->\n                            <!--<div [hidden]=\"iii!=hoveredIndex\">-->\n                            <div>\n                            <ng-container matColumnDef=\"actions\">\n                              <mat-header-cell *matHeaderCellDef> Actions </mat-header-cell>\n                              <mat-cell *matCellDef=\"let news\" style=\"display: flex; justify-content: flex-end;\">\n                                  <!-- <button mat-button color=\"warn\" *ngIf=\"news.newsstatus.status != 'published'\" (click)=\"deleteNews(news.id)\">Delete</button> -->\n                                  <!-- <button mat-button color=\"basic\" *ngIf=\"news.newsstatus.status != 'published'\" routerLink=\"/news/{{news.id}}\">Edit</button> -->\n\n                                  <button mat-icon-button color=\"warn\" (click)=\"addToList(news.id)\" matTooltip=\"Add to List\" matTooltipPosition=\"below\">\n                                    <mat-icon aria-label=\"Edit\">add</mat-icon>\n                                  </button>\n\n                                  <!-- <button mat-icon-button color=\"basic\" *ngIf=\"news.newsstatus.status != 'published'\" routerLink=\"/news/{{news.id}}\" matTooltip=\"Edit News\" matTooltipPosition=\"below\">\n                                    <mat-icon aria-label=\"Edit\">edit</mat-icon>\n                                  </button>\n                                  <button mat-icon-button color=\"basic\" (click)=\"viewNews(news.id)\" matTooltip=\"View News\" matTooltipPosition=\"below\">\n                                      <mat-icon aria-label=\"view news\">zoom_in</mat-icon>\n                                  </button> -->\n\n                              </mat-cell>\n                            </ng-container>\n                            </div>\n\n                            <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n                            <mat-row *matRowDef=\"let row; columns: displayedColumns; let i=index\"></mat-row>\n                          </mat-table>\n                        </div>\n                    </mat-card-content>\n                  </mat-tab>\n\n\n\n                  <!-- BREAKERS -->\n                  <mat-tab label=\"Breakers\">\n                      <mat-card-content>\n                          <div class=\"table-rasponsive\">\n                            <mat-table #table [dataSource]=\"dataSourceBreakers\">\n                              <!--- Note that these columns can be defined in any order.\n                                    The actual rendered columns are set as a property on the row definition\" -->\n\n                              <!-- Name Column -->\n                              <ng-container matColumnDef=\"news_name\">\n                                <mat-header-cell *matHeaderCellDef> News Name </mat-header-cell>\n                                <mat-cell *matCellDef=\"let news\"> {{ news.news_name | uppercase }} </mat-cell>\n                              </ng-container>\n\n                              <!-- Heading Column -->\n                              <ng-container matColumnDef=\"heading_br\">\n                                <mat-header-cell *matHeaderCellDef> Heading </mat-header-cell>\n                                <mat-cell *matCellDef=\"let news\" [class.dhv_nosize]=\"news.language.language_code=='Dhv'\"> {{news.heading}} </mat-cell>\n                              </ng-container>\n\n                              <!-- Date Column -->\n                              <ng-container matColumnDef=\"date\">\n                                <mat-header-cell *matHeaderCellDef> Date </mat-header-cell>\n                                <mat-cell *matCellDef=\"let news\" matTooltip=\"{{news.created_at | date:'medium'}}\" matTooltipPosition=\"below\">\n                                    <span *ngIf=\"(news.created_at|date) === (news.updated_at|date)\">{{news.created_at | date}}</span>\n                                    <mat-chip-list><mat-chip selected=\"true\" *ngIf=\"(news.created_at|date) != (news.updated_at|date)\" class=\"bg-warning\">{{news.created_at | date}}</mat-chip></mat-chip-list>\n                                </mat-cell>\n                              </ng-container>\n\n                              <!-- Status Column -->\n                              <ng-container matColumnDef=\"status\">\n                                  <mat-header-cell *matHeaderCellDef> &nbsp; </mat-header-cell>\n                                  <mat-cell *matCellDef=\"let news\">\n                                    <mat-chip-list>\n                                      <mat-chip selected=\"false\" *ngIf=\"news.newsstatus.status == 'draft'\">Draft</mat-chip>\n                                      <mat-chip class=\"bg-success\" selected=\"true\" *ngIf=\"news.newsstatus.status == 'published'\">Approved</mat-chip>\n                                      <mat-chip color=\"primary\" selected=\"true\" *ngIf=\"news.newsstatus.status == 'ready'\">In-Review</mat-chip>\n                                      <mat-chip selected=\"true\" *ngIf=\"news.newsstatus.status == 'reject'\" class=\"bg-warning\">Rejected</mat-chip>\n                                    </mat-chip-list>\n                                </mat-cell>\n                              </ng-container>\n\n                              <!-- Actions Column -->\n                              <!--<div [hidden]=\"iii!=hoveredIndex\">-->\n                              <div>\n                              <ng-container matColumnDef=\"actions_br\">\n                                <mat-header-cell *matHeaderCellDef> Actions </mat-header-cell>\n                                <mat-cell *matCellDef=\"let news\" style=\"display: flex; justify-content: flex-end;\">\n                                    <!-- <button mat-button color=\"warn\" *ngIf=\"news.newsstatus.status != 'published'\" (click)=\"deleteNews(news.id)\">Delete</button> -->\n                                    <!-- <button mat-button color=\"basic\" *ngIf=\"news.newsstatus.status != 'published'\" routerLink=\"/news/{{news.id}}\">Edit</button> -->\n\n                                    <button mat-icon-button color=\"warn\" (click)=\"addToList(news.id)\" matTooltip=\"Add to List\" matTooltipPosition=\"below\">\n                                      <mat-icon aria-label=\"Edit\">add</mat-icon>\n                                    </button>\n\n                                    <!-- <button mat-icon-button color=\"basic\" *ngIf=\"news.newsstatus.status != 'published'\" routerLink=\"/news/{{news.id}}\" matTooltip=\"Edit News\" matTooltipPosition=\"below\">\n                                      <mat-icon aria-label=\"Edit\">edit</mat-icon>\n                                    </button>\n                                    <button mat-icon-button color=\"basic\" (click)=\"viewNews(news.id)\" matTooltip=\"View News\" matTooltipPosition=\"below\">\n                                        <mat-icon aria-label=\"view news\">zoom_in</mat-icon>\n                                    </button> -->\n\n                                </mat-cell>\n                              </ng-container>\n                              </div>\n\n                              <mat-header-row *matHeaderRowDef=\"displayedColumnsBreaker\"></mat-header-row>\n                              <mat-row *matRowDef=\"let row; columns: displayedColumnsBreaker; let i=index\"></mat-row>\n                            </mat-table>\n                          </div>\n                      </mat-card-content>\n                    </mat-tab>\n\n\n\n\n\n\n\n                  <!-- SEARCH NEWS TO ADD -->\n                  <!-- <mat-tab label=\"Todays News\">\n                      <mat-card-content>\n\n                      </mat-card-content>\n                    </mat-tab>\n                    -->\n                </mat-tab-group>\n\n\n\n              </mat-card-content>\n          </mat-card>\n      </div>\n  </div>\n  <!-- <button mat-fab color=\"warn\" class=\"bottom-right\" routerLink=\"/news/write\">\n    <mat-icon class=\"mat-24\">create</mat-icon>\n  </button> -->\n","<div [hidden]=\"submitted\" *ngIf=\"loaded\">\n  <mat-toolbar color=\"secondary\" class=\"no-shadow\">\n    <mat-toolbar-row>\n        <span fxFlex fxShow=\"false\" fxShow.gt-xs>\n\n          <mat-chip-list>Edit News&nbsp;\n            <mat-chip selected=\"false\" *ngIf=\"new_news.newsstatus.status == 'draft'\">Draft</mat-chip>\n            <mat-chip color=\"warn\" selected=\"true\" *ngIf=\"new_news.newsstatus.status == 'published'\">Published</mat-chip>\n            <mat-chip color=\"primary\" selected=\"true\" *ngIf=\"new_news.newsstatus.status == 'ready'\">Pending</mat-chip>\n          </mat-chip-list>\n        </span>\n        <div fxShow=\"false\" fxShow.gt-xs>\n            <mat-slide-toggle labelPosition=\"after\" color=\"secondary\" [(ngModel)]=\"dhivehiEnabled\" (ngModelChange)=\"changeLanguage($event)\">{{new_news.language.language_code}}</mat-slide-toggle>\n            &nbsp;&nbsp;\n            <mat-slide-toggle labelPosition=\"after\" color=\"secondary\" [(ngModel)]=\"tickerEnabled\" (ngModelChange)=\"toggleTicker()\">Ticker</mat-slide-toggle>\n        </div>\n    </mat-toolbar-row>\n  </mat-toolbar>\n  </div>\n\n  <form class=\"basic-form\" #newsForm=\"ngForm\" [hidden]=\"submitted\" *ngIf=\"loaded\">\n  <div fxLayout=\"row\" fxLayoutAlign=\"center start\">\n    <div fxFlex.gt-md=\"100\" fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n      <mat-card class=\"mat-card-top\">\n\n        <mat-toolbar color=\"primary\" class=\"no-shadow\">\n          <div fxLayout=\"row\" fxFlex=\"100\" >\n            <span class=\"m-t-0 font-14\">Body</span>\n          </div>\n        </mat-toolbar>\n\n\n        <mat-card-content>\n\n                <!-- ============================================================== -->\n                <!-- column -->\n                <!-- ============================================================== -->\n\n                <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n\n                    <!-- <div fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n                      <code>{{diagnostic}}</code>\n                    </div> -->\n\n                    <!-- column -->\n                    <div fxFlex.gt-md=\"100\" fxFlex=\"100\">\n                      <mat-form-field appearance=\"outline\">\n                        <mat-label>News Name</mat-label>\n                        <input matInput placeholder=\"News Name\" #newsName required\n                        [(ngModel)]=\"new_news.news_name\"\n                        name=\"newsName\">\n                      </mat-form-field>\n                    </div>\n                    <!-- column -->\n                    <div fxFlex.gt-md=\"100\" fxFlex=\"100\">\n                      <mat-form-field appearance=\"outline\">\n                          <mat-label>News Title</mat-label>\n                          <textarea matInput mat-autosize matAutosizeMinRows=\"2\" #dhvHeading required\n                          [appDnrmsThaana]=\"dhivehiEnabled\"\n                          [(ngModel)]=\"new_news.heading\"\n                            name=\"dhvHeading\"></textarea>\n                      </mat-form-field>\n                    </div>\n                    <!-- column -->\n                    <div fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n                      <mat-form-field appearance=\"outline\">\n                        <mat-label>News Body</mat-label>\n                        <textarea matInput mat-autosize matAutosizeMinRows=\"20\" #news_body required\n                        [appDnrmsThaana]=\"dhivehiEnabled\"\n                        [(ngModel)]=\"new_news.body\"\n                        [contextMenu]=\"basicMenu\" [contextMenuSubject]=\"dhvInputBody\"\n                        name=\"dhvInputBody\"></textarea>\n                      </mat-form-field>\n                    </div>\n\n\n                </div>\n\n        </mat-card-content>\n      </mat-card>\n\n      <mat-card class=\"mat-card-top\" *ngFor=\"let cBar of new_news.newsbar; let i = index\">\n        <mat-toolbar color=\"primary\" *ngIf=\"i === 0\" class=\"no-shadow\">\n          <div fxLayout=\"row\" fxFlex=\"100\" >\n            <span class=\"m-t-0 font-14\">\n              News Bar <span *ngIf=\"i != 0\">{{i+1}}</span>\n            </span>\n          </div>\n          <span class=\"example-fill-remaining-space\"></span>\n\n          <mat-icon (click)=\"addBar()\">add_circle_outline</mat-icon>\n          <mat-icon (click)=\"removeBar(i)\" *ngIf=\"i !== 0\">highlight_off</mat-icon>\n        </mat-toolbar>\n\n        <mat-toolbar color=\"secondary\" *ngIf=\"i != 0\" class=\"no-shadow\">\n          <div fxLayout=\"row\" fxFlex=\"100\" >\n            <span class=\"m-t-0 font-14\">\n              News Bar <span *ngIf=\"i != 0\">{{i+1}}</span>\n            </span>\n          </div>\n          <span class=\"example-fill-remaining-space\"></span>\n\n          <mat-icon (click)=\"addBar()\">add_circle_outline</mat-icon>\n          <mat-icon (click)=\"removeBar(cBar.id)\" *ngIf=\"i !== 0\">highlight_off</mat-icon>\n        </mat-toolbar>\n\n        <mat-card-content>\n            <!--<mat-divider *ngIf=\"i > 0\"></mat-divider>-->\n            <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n              <!-- column -->\n              <div fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n                <mat-form-field appearance=\"outline\">\n                    <mat-label>Bar Title</mat-label>\n                  <textarea matInput mat-autosize matAutosizeMinRows=\"2\" #BarTitledhvInput{{i}} required\n                  [appDnrmsThaana]=\"dhivehiEnabled\"\n                  [(ngModel)]=\"cBar.title\"\n                    name=\"BarTitledhvInput{{i}} \"></textarea>\n                </mat-form-field>\n              </div>\n              <!-- column -->\n              <div fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n                <mat-form-field appearance=\"outline\">\n                    <mat-label>Bar Detail</mat-label>\n                  <textarea matInput mat-autosize matAutosizeMinRows=\"2\" #BarDetailedhvInput{{i}} required\n                  [appDnrmsThaana]=\"dhivehiEnabled\"\n                  [(ngModel)]=\"cBar.detail\"\n                    name=\"BarDetailedhvInput{{i}} \"></textarea>\n                </mat-form-field>\n              </div>\n            </div>\n        </mat-card-content>\n      </mat-card>\n\n\n      <span *ngIf=\"tickerEnabled\">\n      <mat-card class=\"mat-card-top\" *ngFor=\"let cTicker of new_news.tickernews; let i = index\">\n        <mat-toolbar color=\"primary\" *ngIf=\"i === 0\" class=\"no-shadow\">\n            <div fxLayout=\"row\" fxFlex=\"100\">\n              <span class=\"m-t-0 font-14\">\n                  Ticker News <span *ngIf=\"i != 0\">{{i+1}}</span>\n              </span>\n            </div>\n            <span class=\"example-fill-remaining-space\"></span>\n\n            <mat-icon (click)=\"addTicker()\">add_circle_outline</mat-icon>\n            <mat-icon (click)=\"removeTicker(i)\" *ngIf=\"i !== 0\">highlight_off</mat-icon>\n          </mat-toolbar>\n\n          <mat-toolbar color=\"secondary\" *ngIf=\"i != 0\" class=\"no-shadow\">\n              <div fxLayout=\"row\" fxFlex=\"100\">\n                <span class=\"m-t-0 font-14\">\n                    Ticker News <span *ngIf=\"i != 0\">{{i+1}}</span>\n                </span>\n              </div>\n              <span class=\"example-fill-remaining-space\"></span>\n\n              <mat-icon (click)=\"addTicker()\">add_circle_outline</mat-icon>\n              <mat-icon (click)=\"removeTicker(i)\" *ngIf=\"i !== 0\">highlight_off</mat-icon>\n            </mat-toolbar>\n\n        <mat-card-content>\n            <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n\n              <!-- column -->\n              <div fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n                <mat-form-field appearance=\"outline\">\n                  <mat-label>Ticker Text</mat-label>\n                  <textarea matInput mat-autosize matAutosizeMinRows=\"2\" #tickerdhvInput{{i}} required\n                  [appDnrmsThaana]=\"dhivehiEnabled\"\n                  [(ngModel)]=\"cTicker.news\"\n                    name=\"tickerdhvInput{{i}}\"></textarea>\n                </mat-form-field>\n              </div>\n\n            </div>\n        </mat-card-content>\n      </mat-card>\n      </span>\n\n      <mat-card class=\"mat-card-top\">\n          <mat-card-content>\n              <mat-card-actions align=\"end\">\n              <!-- column -->\n              <div fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n                <button mat-button color=\"warn\" (click)=\"cancelWrite()\">Cancel</button>\n                <button type=\"button\" (click)=\"onSubmit(false)\" mat-raised-button color=\"primary\" [disabled]=\"!newsForm.form.valid\">Save</button>\n                <!-- <button mat-raised-button color=\"primary\" (click)=\"approveNews(new_news.id)\">Approve</button> -->\n              </div>\n              </mat-card-actions>\n          </mat-card-content>\n      </mat-card>\n\n    </div>\n  </div>\n  </form>\n\n  <div *ngIf=\"submitted || loaded2\">\n  <div fxLayout=\"row\">\n      <div fxFlex.gt-sm=\"100%\" >\n          <mat-card>\n              <mat-card-content>\n                <mat-card-title>Saving News</mat-card-title>\n                <mat-progress-bar mode=\"indeterminate\" value=\"40\" class=\"m-t-30\"></mat-progress-bar>\n              </mat-card-content>\n          </mat-card>\n      </div>\n  </div>\n  </div>\n\n\n  <context-menu [menuClass]=\"'c-menu'\">\n    <ng-template contextMenuItem (execute)=\"selectionchange($event)\">\n        <button mat-menu-item><mat-icon>comment</mat-icon> Add Comment </button>\n    </ng-template>\n    <ng-template contextMenuItem (execute)=\"selectionchange()\">\n        <button mat-menu-item><mat-icon>highlight</mat-icon> Highlight Selected </button>\n    </ng-template>\n  </context-menu>\n","import { Location } from '@angular/common';\nimport { Component, OnInit, Input, Output, HostListener, HostBinding, ViewChild, ElementRef, Renderer2 } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { News, NewsBar, TickerNews } from '../../news/models/news';\nimport { NewsState } from '../../store/app.state';\nimport * as editorActions from '../store/news-editor.actions';\nimport { EditorNewsService } from '../services/editor-news.service';\n\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ConfirmDialogComponent } from './../../shared/component/confirm-dialog/confirm-dialog.component';\nimport { ContextMenuComponent } from 'ngx-contextmenu';\n\n@Component({\n  selector: 'app-edit',\n  templateUrl: './edit.component.html',\n  styleUrls: ['./edit.component.css']\n})\nexport class EditComponent implements OnInit {\n\n  news_bar = new NewsBar('', '');\n  ticker_news = new TickerNews('');\n  public new_news: News;\n  edit_id = this.aRoute.snapshot.params.id;\n\n  @Input() public dhivehiEnabled: boolean;\n  @Input() public tickerEnabled = false;\n  submitted = false;\n  @Input() loaded = false;\n  loaded2 = false;\n\n  @ViewChild(ContextMenuComponent, {static: true}) public basicMenu: ContextMenuComponent;\n  @ViewChild('news_body', {static: true}) el:ElementRef;\n\n  constructor(\n    public snackBar: MatSnackBar,\n    private router: Router,\n    private newsService: EditorNewsService,\n    private aRoute: ActivatedRoute,\n    private store: Store<NewsState>,\n    public dialog: MatDialog,\n    private location: Location\n  ) {\n    this.loadEditNews(this.edit_id);\n  }\n\n  ngOnInit() {\n  }\n\n  loadEditNews(id: number) {\n    this.loaded = false;\n    this.edit_id = id;\n    this.newsService.editNews(this.edit_id)\n      .subscribe(\n        (response) => {\n          this.new_news = response;\n          if ( this.new_news.language.language_code === 'Dhv' ) { this.dhivehiEnabled = true; } else { this.dhivehiEnabled = false; }\n          this.loaded = true;\n        },\n        (error) => {\n          this.submitted = false;\n          const message = '';\n          this.snackBar.open(message, 'dismiss');\n        });\n  }\n\n  onSubmit(draft: boolean) {\n    this.submitted = true;\n    this.new_news.draft = draft;\n    this.newsService.updateNews(this.new_news, this.edit_id)\n        .subscribe(\n          (response) => {\n            this.store.dispatch(new editorActions.UpdateReviewNewsLoaded({ isLoaded: false }));\n            // this.location.back();\n            this.router.navigate(['/editor/review']);\n          },\n          (error) => {\n            this.submitted = false;\n          }\n    );\n  }\n\n  cancelWrite() {\n    this.router.navigate(['/editor/review']);\n  }\n\n  approveNews(id) {\n    this.store.dispatch(new editorActions.ApproveNews({ id: id }));\n    this.router.navigate(['/editor/review']);\n    this.store.dispatch(new editorActions.UpdateReviewNewsLoaded({ isLoaded: false }));\n  }\n\n  changeLanguage() {\n    if (this.dhivehiEnabled) {\n      this.new_news.language.language_code = 'Dhv';\n    } else {\n      this.new_news.language.language_code = 'Eng';\n    }\n  }\n\n  addBar() {\n    const nBar = new NewsBar(null, null, null, null, null, null);\n    this.new_news.newsbar.push(nBar);\n  }\n\n  removeBar(barId) {\n\n    // let dialogRef = this.dialog.open( ConfirmDialogComponent, { width: '350px' });\n\n    // dialogRef.afterClosed().subscribe((result: string) => {\n    //     dialogRef = null;\n    //     if (result) { // user confirmed to delete\n    //       this.newsService.destroyBar(barId)\n    //       .subscribe(\n    //         (response) => {\n    //           /*\n    //           ---------- // TODO\n    //           instead of reloading the model, remove the bar from fiest loaded model ->'this.new_news'\n    //           because now the if the user had made any changes before removing a bar,\n    //           the changes made earlier are reloaded with the old data from database.\n    //           */\n    //           this.loadEditNews(this.edit_id);\n    //           console.log(response);\n    //         }\n    //       );\n    //     }\n    // });\n\n  }\n\n  addTicker() {\n    const ticker = new TickerNews('');\n    this.new_news.tickernews.push(ticker);\n  }\n\n  removeTicker(tickerIndex) {\n    this.new_news.tickernews.splice(tickerIndex, 1);\n  }\n\n  toggleTicker() {\n    if (!this.tickerEnabled) {\n      this.new_news.tickernews = null;\n    }else {\n      const ticker = new TickerNews('');\n      this.new_news.tickernews = [ticker];\n    }\n  }\n\n  // TODO: Remove this when we're done, this is here for debugging purpose\n  get diagnostic() { return JSON.stringify(this.new_news); }\n\n  selectionchange(e?: any) {\n    let ev = this.el.nativeElement;\n    console.log(ev.selectionStart)\n\n    const start = ev.selectionStart;\n    const end = ev.selectionEnd;\n\n    console.log(ev.value.substr(start, end - start))\n\n    let newBodyText = ev.value.substr(0, start)+'<review>'+ev.value.substr(start, end - start)+'</review>'+ev.value.substr(end, ev.value.toString().length);\n    this.new_news.body = newBodyText;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-editor-dashboard',\n  templateUrl: './editor-dashboard.component.html',\n  styleUrls: ['./editor-dashboard.component.css']\n})\nexport class EditorDashboardComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<p>\n  editor-dashboard works!\n</p>\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { NewsEditorRoutes } from './editor.routing';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { DemoMaterialModule } from '../demo-material-module';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { PerfectScrollbarModule } from 'ngx-perfect-scrollbar';\n\n/*import { DragulaModule } from 'ng2-dragula/ng2-dragula';*/\nimport { DragulaModule } from 'ng2-dragula';\n\nimport { EditorDashboardComponent } from './editor-dashboard/editor-dashboard.component';\nimport { ReviewComponent } from './review/review.component';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { NewsEditorEffects } from './store/news-editor.effects';\nimport { reducer } from './store/news-editor.reducer';\nimport { NotesDialogComponent } from './notes-dialog/notes-dialog.component';\nimport { EditComponent } from './edit/edit.component';\n\nimport { SharedModule } from '../shared/shared.module';\nimport { ListComponent } from './list/list.component';\nimport { AddToListDialogComponent } from './add-to-list-dialog/add-to-list-dialog.component';\n\nimport { ContextMenuModule } from 'ngx-contextmenu';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(NewsEditorRoutes),\n    FormsModule,\n    DemoMaterialModule,\n    FlexLayoutModule,\n    PerfectScrollbarModule,\n    DragulaModule.forRoot(),\n    SharedModule,\n    StoreModule.forFeature('ReviewNews', reducer),\n    EffectsModule.forFeature([NewsEditorEffects]),\n    ContextMenuModule.forRoot(),\n  ],\n  declarations: [\n    EditorDashboardComponent,\n    ReviewComponent,\n    NotesDialogComponent,\n    AddToListDialogComponent,\n    EditComponent,\n    ListComponent,\n  ],\n  entryComponents: [NotesDialogComponent, AddToListDialogComponent]\n})\nexport class EditorModule { }\n","import { Routes } from '@angular/router';\nimport { EditorDashboardComponent } from './editor-dashboard/editor-dashboard.component';\nimport { ReviewComponent } from './review/review.component';\n\nimport { EditComponent } from './edit/edit.component';\nimport { ListComponent } from './list/list.component';\n\nexport const NewsEditorRoutes: Routes = [\n {\n    path: '',\n    children: [{\n      path: 'dashboard',\n      component: EditorDashboardComponent,\n      data: { role: 'editor' }\n    },\n    {\n      path: 'review',\n      component: ReviewComponent,\n      data: { role: 'editor' }\n    }, {\n      path: 'edit/:id',\n      component: EditComponent,\n      data: { role: 'editor' }\n    }, {\n      path: 'list',\n      component: ListComponent,\n      data: { role: 'editor' }\n    }]\n  }\n];\n","<div fxLayout=\"row\" fxLayoutAlign=\"center start\">\n  <div fxFlex.gt-md=\"100\" fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n    <mat-card class=\"mat-card-top\">\n      <mat-sidenav-container [ngClass]=\"{ 'side-panel-opened': sidePanelOpened, 'side-panel-closed': !sidePanelOpened }\">\n\n        <mat-sidenav #sidebar [mode]=\"isOver() ? 'over' : 'side'\" [opened]=\"!isOver()\" (open)=\"sidePanelOpened = true || sidePanelOpened_noNews == true\"\n        (close)=\"sidePanelOpened = false || sidePanelOpened_noNews == false\">\n          <mat-toolbar color=\"primary\" class=\"no-shadow\">\n            <div fxLayout=\"row\" fxFlex=\"100\" >\n              <span class=\"m-t-0 font-14\">\n                <!-- <button mat-icon-button class=\"mr-1\"><mat-icon>inbox</mat-icon></button> -->\n\n                <mat-form-field>\n                  <input matInput [matDatepicker]=\"picker\" [(ngModel)]=\"show_list_date\" (ngModelChange)=\"loadDateList($event)\">\n                  <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                  <mat-datepicker #picker></mat-datepicker>\n                </mat-form-field>\n\n              </span>\n            </div>\n          </mat-toolbar>\n\n          <mat-nav-list>\n            <mat-list-item (click)=\"onSelectList(list)\" *ngFor=\"let list of lists | async\" [style.background-color]=\"list==selectedList ? 'rgba(127, 255, 212, 0.6)' : 'rgba(255, 255, 255, 0)'\">\n              <mat-icon *ngIf=\"list==selectedList\" color=\"primary\">subdirectory_arrow_right</mat-icon>\n\n              <h3 matLine> {{list.name}} </h3>\n              <p matLine class=\"text-muted\"> {{list.list_news.length}} </p>\n\n              <mat-icon *ngIf=\"list.id == settings_selected_list\" color=\"warn\">offline_pin</mat-icon>\n\n              <button [matMenuTriggerFor]=\"them\" mat-icon-button class=\"ml-1\" *ngIf=\"list.id != settings_selected_list\">\n                <mat-icon>more_vert</mat-icon>\n              </button>\n              <mat-menu #them=\"matMenu\" x-position=\"before\">\n                <button mat-menu-item color=\"primary\" (click)=\"updateSelectedList(list.id)\">Set Selected</button>\n              </mat-menu>\n\n\n            </mat-list-item>\n          </mat-nav-list>\n        </mat-sidenav>\n\n        <mat-toolbar class=\"bg-success no-shadow chat-right-panel\" color=\"warn\">\n          <div fxLayout=\"row\" fxFlex=\"100\" fxLayoutAlign=\"center center\">\n            <button (click)=\"sideBarToggle()\" class=\"mr-1\" mat-icon-button>\n              <mat-icon>short_text</mat-icon>\n            </button>\n            <!-- <span class=\"top-avatar m-r-10\">\n              <img src=\"{{selectedMessage.photo}}\" class=\"img-circle\">\n            </span> -->\n            <div fxFlex>\n              <div class=\"font-14\" *ngIf=\"selectedList\">{{ selectedList.created_at | date }} {{ selectedList.name }}</div>\n            </div>\n            <div fxFlex>\n              <!--<div class=\"font-14\" *ngIf=\"selectedNews\">News</div>-->\n            </div>\n            <!-- <button [matMenuTriggerFor]=\"them\" mat-icon-button class=\"ml-1\">\n              <mat-icon>more_vert</mat-icon>\n            </button>\n            <mat-menu #them=\"matMenu\" x-position=\"before\">\n              <button mat-menu-item color=\"primary\" [disabled]=\"!selectedNews\">Approve</button>\n              <button mat-menu-item color=\"warn\" [disabled]=\"!selectedNews\">Reject</button>\n              <button mat-menu-item color=\"link\" [disabled]=\"!selectedNews\">Edit</button>\n            </mat-menu> -->\n          </div>\n        </mat-toolbar>\n\n        <mat-card-content class=\"chat-middle-box\" style=\"min-height:700px;\">\n          <!-- selected list -->\n          <div class=\"table-rasponsive\" *ngIf=\"selectedList\">\n\n            <div class=\"table\">\n              <div class=\"table-header\">\n                <div class=\"header__item column-news_name\">News Name</div>\n                <div class=\"header__item column-heading\">Heading</div>\n                <div class=\"header__item column-date\">Date</div>\n                <div class=\"header__item column-actions\">Actions</div>\n              </div>\n              <div class=\"table-content\" [dragula]=\"'news-list'\" [dragulaModel]=\"selectedList.list_news\">\n                <div class=\"table-row status_{{news.news.newsstatus.status}}\" *ngFor=\"let news of selectedList.list_news\" id=\"{{ news.news.id }}\">\n                  <div class=\"table-data column-news_name\">{{ news.news.news_name }}</div>\n\n                  <div class=\"table-data column-heading dhv\" *ngIf=\"news.news.language.language_code === 'Dhv'\">{{ news.news.heading }}</div>\n                  <div class=\"table-data column-heading\" *ngIf=\"news.news.language.language_code != 'Dhv'\">{{ news.news.heading }}</div>\n\n                  <div class=\"table-data column-date\" matTooltip=\"{{ news.news.created_at}}\" matTooltipPosition=\"below\">{{ news.news.created_at | date }}</div>\n                  <div class=\"table-data column-actions\">\n                      <button mat-icon-button color=\"basic\" (click)=\"viewNews(news.news)\" *ngIf=\"news.news.newsstatus.status != 'breaker'\" matTooltip=\"View News\" matTooltipPosition=\"below\">\n                          <mat-icon aria-label=\"view news\">zoom_in</mat-icon>\n                      </button>\n\n                      <button mat-icon-button color=\"warn\" (click)=\"deleteNews(news.id, selectedList.id)\" matTooltip=\"Remove News\" matTooltipPosition=\"below\">\n                        <mat-icon aria-label=\"Edit\">delete</mat-icon>\n                      </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n          </div>\n        </mat-card-content>\n\n        <mat-card-actions class=\"chat-footer\">\n            <div align=\"end\">\n              <button mat-raised-button color=\"primary\" [disabled]=\"!selectedList\" (click)=\"addNewsToList(selectedList.id)\">Add News To List</button>\n              <!-- <button mat-button color=\"basic\" [disabled]=\"!selectedNews\" (click)=\"onEdit()\">Edit</button>\n              <button mat-raised-button color=\"warn\" [disabled]=\"!selectedNews\" (click)=\"rejectNews()\">Reject</button>\n              <button mat-raised-button color=\"primary\" [disabled]=\"!selectedNews\" (click)=\"approveNews(selectedNews)\">Approve</button> -->\n            </div>\n          <!-- <div fxLayout=\"row\" layout-align=\"start center\">\n            <mat-form-field class=\"mr-1 ml-1\" fxFlex>\n              <input matInput placeholder=\"Send message\" >\n            </mat-form-field>\n            <button mat-fab color=\"warn\" >\n              <mat-icon>send</mat-icon>\n            </button>\n          </div> -->\n        </mat-card-actions>\n      </mat-sidenav-container>\n    </mat-card>\n  </div>\n</div>\n\n\n\n\n\n\n\n<!-- <mat-table #table [dataSource]=\"dataSource\">\n\n    <ng-container matColumnDef=\"news_name\">\n      <mat-header-cell *matHeaderCellDef> News Name </mat-header-cell>\n      <mat-cell *matCellDef=\"let listnews\"> {{ listnews.news.news_name | uppercase }} </mat-cell>\n    </ng-container>\n\n\n    <ng-container matColumnDef=\"heading\">\n      <mat-header-cell *matHeaderCellDef> Heading </mat-header-cell>\n      <mat-cell *matCellDef=\"let listnews\" [class.dhv_nosize]=\"listnews.news.language.language_code=='Dhv'\"> {{listnews.news.heading}} </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"date\">\n      <mat-header-cell *matHeaderCellDef> Date </mat-header-cell>\n      <mat-cell *matCellDef=\"let listnews\" matTooltip=\"{{listnews.news.created_at | date:'medium'}}\" matTooltipPosition=\"below\"> {{listnews.news.created_at | date}} </mat-cell>\n    </ng-container>\n\n\n    <ng-container matColumnDef=\"status\">\n        <mat-header-cell *matHeaderCellDef> &nbsp; </mat-header-cell>\n        <mat-cell *matCellDef=\"let listnews\">\n          <mat-chip-list>\n            <mat-chip selected=\"false\" *ngIf=\"listnews.news.newsstatus.status == 'draft'\">Draft</mat-chip>\n            <mat-chip class=\"bg-success\" selected=\"true\" *ngIf=\"listnews.news.newsstatus.status == 'published'\">Approved</mat-chip>\n            <mat-chip color=\"primary\" selected=\"true\" *ngIf=\"listnews.news.newsstatus.status == 'ready'\">In-Review</mat-chip>\n            <mat-chip selected=\"true\" *ngIf=\"listnews.news.newsstatus.status == 'reject'\" class=\"bg-warning\">Rejected</mat-chip>\n          </mat-chip-list>\n      </mat-cell>\n    </ng-container>\n\n\n    <div>\n      <ng-container matColumnDef=\"actions\">\n        <mat-header-cell *matHeaderCellDef> Actions </mat-header-cell>\n        <mat-cell *matCellDef=\"let listnews\" style=\"display: flex; justify-content: flex-end;\">\n\n            <button mat-icon-button color=\"basic\" (click)=\"viewNews(listnews.news)\" matTooltip=\"View News\" matTooltipPosition=\"below\">\n                <mat-icon aria-label=\"view news\">zoom_in</mat-icon>\n            </button>\n\n            <button mat-icon-button color=\"warn\" (click)=\"deleteNews(listnews.id, selectedList.id)\" matTooltip=\"Remove News\" matTooltipPosition=\"below\">\n              <mat-icon aria-label=\"Edit\">delete</mat-icon>\n            </button>\n\n        </mat-cell>\n      </ng-container>\n    </div>\n\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n    <mat-row *matRowDef=\"let row; columns: displayedColumns; let i=index\" [dragula]='\"task-group\"'></mat-row>\n  </mat-table> -->\n","\nimport {takeUntil} from 'rxjs/operators';\nimport { Component, OnInit, ViewChild, OnDestroy } from '@angular/core';\nimport { MatSidenav } from '@angular/material/sidenav';\nimport { Router } from '@angular/router';\n\nimport { Store } from '@ngrx/store';\nimport { News, NewsList, ListNews, ListOrder } from '../../news/models/news';\nimport * as editorActions from '../store/news-editor.actions';\nimport {Actions, ofType} from '@ngrx/effects';\n\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { DataSource } from '@angular/cdk/table';\nimport {Observable, of, Subject} from 'rxjs';\n\nimport { ViewNewsDialogComponent } from '../../shared/component/view-news-dialog/view-news-dialog.component';\nimport { AddToListDialogComponent } from '../add-to-list-dialog/add-to-list-dialog.component';\n\nimport {Overlay} from '@angular/cdk/overlay';\nimport { DragulaService } from 'ng2-dragula';\nimport { formatDate } from \"@angular/common\";\nimport {Subscription} from \"Rxjs\";\n\n@Component({\n  selector: 'app-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.css']\n})\nexport class ListComponent implements OnInit, OnDestroy {\n\n  displayedColumns = ['news_name', 'heading', 'date', 'status', 'actions'];\n  displayedColumnsPublished = ['news_name', 'heading', 'date', 'status'];\n  // dataSource = new NewsListDataSource(this.selectedList);\n  dataSource;\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\n  pageEvent: PageEvent;\n\n  sidePanelOpened = true;\n  sidePanelOpened_noNews = true;\n\n  lists; // : NewsList[] = [];\n  selectedList: NewsList;\n  settings_selected_list: any;\n\n  view_dialog$: any;\n\n  // initializers\n  init_news$;\n\n  //date for selected dates lists\n  show_list_date = new Date();\n  show_list_date_f = formatDate(new Date(), 'dd/MM/yyyy', 'en-US');\n\n  @ViewChild('sidebar', {static: true}) sidenav: MatSidenav;\n\n  private destroy$ = new Subject();\n  subs = new Subscription();\n\n  constructor(\n    public dialog: MatDialog,\n    private store: Store<any>,\n    private router: Router,\n    private updates$: Actions,\n    private overlay: Overlay,\n    private dragulaService: DragulaService\n    ) {\n\n      this.subs.add(this.dragulaService.dropModel('news-list')\n        .subscribe(({ sourceModel, targetModel, item }) => {\n\n            let post_str: ListOrder[] = [];\n            targetModel.forEach((news, index) => {\n              post_str[index] = new ListOrder(this.selectedList.id, news.id, index + 1);\n              console.log(post_str)\n            });\n\n            //update order\n            this.store.dispatch(new editorActions.UpdateListOrder(post_str));\n\n            // update selected list selection\n            this.updates$\n              .pipe(ofType(editorActions.UPDATE_LIST_ORDER_SUCCESS))\n              .subscribe(() => {\n                let sub = this.store.select(news_store => news_store.ReviewNews.lists)\n                  .subscribe(list => {\n                    list.forEach((element: NewsList) => {\n                      if (element.id === this.selectedList.id) {\n                        this.selectedList = element\n                        this.dataSource = new NewsListDataSource(element.list_news);\n                        // sub.unsubscribe();\n                      }\n                    });\n                  });\n            });\n\n          }\n        )\n      );\n\n    }\n\n\n\n      /*this.dragulaService.dropModel('news-list').pipe(\n        takeUntil(this.destroy$)\n      ).subscribe((result) => {\n        let post_str: ListOrder[] = [];\n        this.selectedList.list_news.forEach((news, index) => {\n          post_str[index] = new ListOrder(this.selectedList.id, news.id, index + 1);\n          console.log(post_str)\n        });\n\n          //update order\n          this.store.dispatch(new editorActions.UpdateListOrder(post_str));\n\n          // update selected list selection\n          this.updates$\n          .pipe(ofType(editorActions.UPDATE_LIST_ORDER_SUCCESS))\n          .subscribe(() => {\n            let sub = this.store.select(news_store => news_store.ReviewNews.lists)\n            .subscribe(list => {\n              list.forEach((element: NewsList) => {\n                if (element.id === this.selectedList.id) {\n                  this.selectedList = element\n                  this.dataSource = new NewsListDataSource(element.list_news);\n                  // sub.unsubscribe();\n                }\n              });\n            });\n          });\n        }\n      );\n    }*/\n\n  ngOnInit() {\n    // this.init_news$ = this.store.select(store => store.ReviewNews.isListLoaded)\n    // .take(1)\n    // .subscribe(\n    //   (isLoaded) => {\n    //     if (!isLoaded) {\n    //       console.log('Loading News Lists!');\n    //       this.store.dispatch(new editorActions.GetLists());\n    //     } else {\n    //       this.lists = this.store.select(news_store => news_store.ReviewNews.lists);\n    //     }\n    //   }\n    // );\n    this.store.dispatch(new editorActions.GetLists());\n\n    //this.lists = this.store.select(news_store => news_store.ReviewNews.lists);\n\n    this.updates$\n      .pipe(ofType(editorActions.GET_LISTS_SUCCESS))\n      .subscribe(() => {\n        this.store.dispatch(new editorActions.GetSelectedList());\n      });\n    //this.store.dispatch(new editorActions.GetSelectedList());\n\n    this.updates$\n      .pipe(ofType(editorActions.GET_SELECTED_LIST_SUCCESS))\n      .subscribe(() => {\n        this.lists = this.store.select(news_store => news_store.ReviewNews.lists);\n\n        this.store.select(news_store => news_store.ReviewNews.selectedList)\n          .subscribe(val => {\n            this.settings_selected_list = val;\n          });\n\n      });\n  }\n\n  onSelectList(list: NewsList) {\n    if (this.selectedList && this.selectedList.id === list.id) {\n      this.selectedList = null;\n    }else {\n      this.selectedList = list;\n      this.dataSource = new NewsListDataSource(list.list_news);\n    }\n    console.log('LIST SELECTION')\n  }\n\n  viewNews(news: News) {\n    let dialogRef = this.dialog.open(ViewNewsDialogComponent, { width: '90%', data: news });\n\n    dialogRef.afterClosed().subscribe((result: string) => {\n      dialogRef = null;\n      if (result) {\n      }\n    });\n\n    return false;\n  }\n\n  addNewsToList(id: number) {\n    let dialogRef = this.dialog.open(AddToListDialogComponent, { width: '95%', height: '90%', maxHeight: '95%', data: { list: this.selectedList } });\n\n    dialogRef.componentInstance.onAdd.subscribe((result: any) => {\n      console.log(result);\n\n      this.updates$\n        .pipe(ofType(editorActions.ADD_TO_LIST_SUCCESS))\n        .subscribe(() => {\n\n          this.store.select(news_store => news_store.ReviewNews.lists)\n          .subscribe(list => {\n            list.forEach((element: NewsList) => {\n              if (element.id === result.list_id) {\n                this.selectedList = element\n                this.dataSource = new NewsListDataSource(element.list_news);\n              }\n            });\n          });\n\n        });\n    });\n\n    dialogRef.afterClosed().subscribe((result: string) => {\n      dialogRef = null;\n      if (result) {\n      }\n    });\n\n    return false;\n  }\n\n  deleteNews (news_id: number, list_id: number) {\n\n    this.store.dispatch(new editorActions.RemoveFromList({ id: news_id }));\n\n    this.updates$\n    .pipe(ofType(editorActions.REMOVE_FROM_LIST_SUCCESS))\n    .subscribe(() => {\n      this.store.select(news_store => news_store.ReviewNews.lists)\n      .subscribe(list => {\n        list.forEach((element: NewsList) => {\n          if (element.id === list_id) {\n            // console.log('LISTTTTTTTTTTT'+news_id)\n            this.selectedList = element\n            this.dataSource = new NewsListDataSource(element.list_news);\n          }\n        });\n      });\n\n    });\n  }\n\n  updateSelectedList(_list_id: number) {\n    console.log(_list_id)\n    this.store.dispatch(new editorActions.UpdateSelectedList({ list_id: _list_id }));\n  }\n\n  sideBarToggle() {\n    this.sidenav.toggle();\n  }\n\n  isOver(): boolean {\n    return window.matchMedia(`(max-width: 960px)`).matches;\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n  }\n\n  // Load Lists for selected date\n  loadDateList(event) {\n\n    this.show_list_date = new Date(event);\n    this.show_list_date_f = formatDate(event, 'yyyy-M-dd', 'en-US');\n    console.log(this.show_list_date_f);\n\n\n    //get selected date's lists\n    this.store.dispatch(new editorActions.GetListsByDate({ date: this.show_list_date_f }));\n\n    this.updates$\n      .pipe(ofType(editorActions.GET_LISTS_BY_DATE_SUCCESS))\n      .subscribe(() => {\n        this.store.dispatch(new editorActions.GetSelectedList());\n      });\n    //this.store.dispatch(new editorActions.GetSelectedList());\n\n    this.updates$\n      .pipe(ofType(editorActions.GET_SELECTED_LIST_SUCCESS))\n      .subscribe(() => {\n        this.lists = this.store.select(news_store => news_store.ReviewNews.lists);\n\n        this.store.select(news_store => news_store.ReviewNews.selectedList)\n          .subscribe(val => {\n            this.settings_selected_list = val;\n          });\n\n      });\n\n  }\n\n}\n\n\n\nexport class NewsListDataSource extends DataSource<ListNews> {\n  constructor(private staticData: ListNews[]) {\n    super();\n  }\n\n  connect(): Observable<ListNews[]> {\n    return of(this.staticData);\n  }\n\n  disconnect() {}\n}\n","<h1 mat-dialog-title>Add Note to news</h1>\n<div mat-dialog-content>\n    <!-- <mat-card>\n        <mat-card-content> -->\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <mat-list role=\"list\">\n              <mat-list-item role=\"listitem\" *ngFor=\"let note of editorNotes.notes\">\n                {{note}}\n                <!-- <button mat-button position=\"after\"><mat-icon>close</mat-icon></button> -->\n              </mat-list-item>\n              <mat-list-item role=\"listitem\" *ngIf=\"!editorNotes.notes[0]\"><i>Reject without any notes.</i></mat-list-item>\n            </mat-list>\n          </div>\n\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n            <!-- hr column -->\n            <div fxFlex.gt-sm=\"100\" fxFlex=\"100\" class=\"m-t-20\">\n              <mat-divider></mat-divider>\n            </div>\n          </div>\n\n          <div fxLayout=\"row\" fxLayoutWrap=\"wrap\" class=\"m-t-30\">\n            <!-- column -->\n            <div fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label>Note</mat-label>\n                <textarea matInput mat-autosize matAutosizeMinRows=\"2\" #rejectNote name=\"rejectNote\" [(ngModel)]=\"noteInp\"></textarea>\n              </mat-form-field>\n            </div>\n\n            <div fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n                <button mat-button color=\"primary\" (click)=\"addNote()\">Add Note</button>\n            </div>\n\n          </div>\n        <!-- </mat-card-content>\n    </mat-card> -->\n</div>\n<div mat-dialog-actions align=\"end\">\n  <button mat-button (click)=\"closeDialog(false)\" tabindex=\"2\">Cancel</button>\n  <button mat-raised-button color=\"warn\" (click)=\"doReject()\" tabindex=\"-1\">Reject</button>\n</div>\n","import { Component, OnInit, Inject, EventEmitter } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { News } from './../../news/models/news';\n\n@Component({\n  selector: 'app-notes-dialog',\n  templateUrl: './notes-dialog.component.html'\n})\nexport class NotesDialogComponent implements OnInit {\n  onReject = new EventEmitter();\n  noteInp;\n  editorNotes;\n\n  constructor(\n    public dialogRef: MatDialogRef<NotesDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) { }\n\n  ngOnInit() {\n    this.editorNotes = new RejectNotes(this.data.id);\n    console.log(this.data);\n  }\n\n  closeDialog(confirmation: boolean) {\n    this.dialogRef.close(confirmation);\n  }\n\n  addNote() {\n    const tmpNote = this.noteInp;\n    this.editorNotes.addNote(tmpNote);\n    this.noteInp = '';\n  }\n\n  doReject() {\n    this.closeDialog(false);\n    this.onReject.emit(this.editorNotes);\n  }\n\n}\n\nexport class RejectNotes {\n\n  news_id: any;\n  notes?: any = [];\n  containNotes = false;\n\n  constructor(\n    newsId\n  ) {\n    this.news_id = newsId;\n  }\n\n  addNote(note: string) {\n    this.containNotes = true;\n    this.notes.push(note);\n  }\n}\n","\n\n<div fxLayout=\"row\" fxLayoutAlign=\"center start\">\n  <div fxFlex.gt-md=\"100\" fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n    <mat-card class=\"mat-card-top\">\n      <mat-sidenav-container [ngClass]=\"{ 'side-panel-opened': sidePanelOpened, 'side-panel-closed': !sidePanelOpened }\">\n\n        <mat-sidenav #sidebar [mode]=\"isOver() ? 'over' : 'side'\" [opened]=\"!isOver()\" (open)=\"sidePanelOpened = true || sidePanelOpened_noNews == true\"\n        (close)=\"sidePanelOpened = false || sidePanelOpened_noNews == false\">\n          <mat-toolbar color=\"primary\" class=\"no-shadow\">\n            <div fxLayout=\"row\" fxFlex=\"100\" >\n              <span class=\"m-t-0 font-14\">\n                <button mat-icon-button class=\"mr-1\"><mat-icon>inbox</mat-icon></button>\n                News in Review\n              </span>\n            </div>\n          </mat-toolbar>\n\n          <mat-nav-list>\n            <mat-list-item (click)=\"onSelect(news)\" *ngFor=\"let news of reviewList | async\" [style.background-color]=\"news==selectedNews ? 'rgba(127, 255, 212, 0.6)' : 'rgba(255, 255, 255, 0)'\">\n              <!-- <img mat-list-avatar src=\"{{message.photo}}\" alt=\"\"> -->\n              <mat-icon *ngIf=\"news==selectedNews\" color=\"primary\">subdirectory_arrow_right</mat-icon>\n              <h3 matLine> {{news.news_name}} </h3>\n              <p matLine class=\"text-muted\"> {{news.user.name}} </p>\n            </mat-list-item>\n          </mat-nav-list>\n        </mat-sidenav>\n\n        <mat-toolbar class=\"bg-success no-shadow chat-right-panel\" color=\"warn\">\n          <div fxLayout=\"row\" fxFlex=\"100\" fxLayoutAlign=\"center center\">\n            <button (click)=\"sideBarToggle()\" class=\"mr-1\" mat-icon-button>\n              <mat-icon>short_text</mat-icon>\n            </button>\n            <!-- <span class=\"top-avatar m-r-10\">\n              <img src=\"{{selectedMessage.photo}}\" class=\"img-circle\">\n            </span> -->\n            <div fxFlex>\n              <div class=\"font-14\" *ngIf=\"selectedNews\">{{selectedNews.news_name}}</div>\n            </div>\n            <button [matMenuTriggerFor]=\"them\" mat-icon-button class=\"ml-1\">\n              <mat-icon>more_vert</mat-icon>\n            </button>\n            <mat-menu #them=\"matMenu\" x-position=\"before\">\n              <button mat-menu-item color=\"primary\" [disabled]=\"!selectedNews\">Approve</button>\n              <button mat-menu-item color=\"warn\" [disabled]=\"!selectedNews\">Reject</button>\n              <button mat-menu-item color=\"link\" [disabled]=\"!selectedNews\">Edit</button>\n            </mat-menu>\n          </div>\n        </mat-toolbar>\n\n        <mat-card-content class=\"chat-middle-box\" style=\"min-height:700px;\">\n          <div  *ngIf=\"!selectedNews\">\n              <div class=\"login-register-box error-card text-center\" style=\"margin: 200px auto;\" *ngIf=\"review_news_count > 0\">\n                <img src=\"/assets/images/nothing-states/select_to_view.png\" style=\"width:auto; height:150px;\">\n                <p class=\"text-muted m-t-30 m-b-30\">Select a news from left sidebar to view</p>\n              </div>\n              <div class=\"login-register-box error-card text-center\" style=\"margin: 200px auto;\" *ngIf=\"review_news_count <= 0\">\n                <img src=\"/assets/images/nothing-states/nothing-to-approve.png\" style=\"width:auto; height:150px;\">\n                <h3 class=\"text-muted m-t-30 m-b-30\">No news to Approve !</h3>\n              </div>\n          </div>\n          <div *ngIf=\"selectedNews\">\n              <div fxLayout=\"column\" fxLayoutWrap=\"wrap\">\n                  <!-- title column -->\n                  <div fxFlex.gt-sm=\"100\" fxFlex=\"100\" [class.dhv-title]=\"selectedNews.language.language_code == 'Dhv'\">\n                      {{selectedNews.heading}}\n                  </div>\n                  <!-- hr column -->\n                  <div fxFlex.gt-sm=\"100\" fxFlex=\"100\" class=\"m-t-20\">\n                    <mat-divider></mat-divider>\n                  </div>\n                  <!-- news body column -->\n                  <div fxFlex.gt-sm=\"100\" fxFlex=\"100\" class=\"m-t-20\">\n                      <div [innerHTML]=\"selectedNews.body\" style=\"white-space: pre-wrap\" [class.dhv]=\"selectedNews.language.language_code == 'Dhv'\"></div>\n                  </div>\n                  <!-- hr column -->\n                  <div fxFlex.gt-sm=\"100\" fxFlex=\"100\" class=\"m-t-20\">\n                    <mat-divider></mat-divider>\n                  </div>\n                  <!-- news bars column -->\n                  <div fxFlex.gt-sm=\"100\" fxFlex=\"100\" class=\"m-t-20\">\n                      <mat-card>\n                          <mat-card-content>\n                              <mat-card-title>News Bar(s)</mat-card-title>\n                          </mat-card-content>\n                          <mat-tab-group>\n                              <mat-tab *ngFor=\"let bar of selectedNews.newsbar; let i = index\" label=\"Bar {{i+1}}\">\n                                <mat-card-content>\n                                  <p [class]=\"selectedNews.language.language_code == 'Dhv' ? 'dhv' : '' \">{{bar.title}}</p>\n                                  <p [class]=\"selectedNews.language.language_code == 'Dhv' ? 'dhv m-t-20' : '' \">{{bar.detail}}</p>\n                                </mat-card-content>\n                              </mat-tab>\n                          </mat-tab-group>\n                      </mat-card>\n                  </div>\n              </div>\n          </div>\n        </mat-card-content>\n\n        <mat-card-actions class=\"chat-footer\">\n            <div align=\"end\">\n              <button mat-button color=\"basic\" [disabled]=\"!selectedNews\" (click)=\"onEdit()\">Edit</button>\n              <button mat-raised-button color=\"warn\" [disabled]=\"!selectedNews\" (click)=\"rejectNews()\">Reject</button>\n              <button mat-raised-button color=\"primary\" [disabled]=\"!selectedNews\" (click)=\"approveNews(selectedNews)\">Approve</button>\n            </div>\n          <!-- <div fxLayout=\"row\" layout-align=\"start center\">\n            <mat-form-field class=\"mr-1 ml-1\" fxFlex>\n              <input matInput placeholder=\"Send message\" >\n            </mat-form-field>\n            <button mat-fab color=\"warn\" >\n              <mat-icon>send</mat-icon>\n            </button>\n          </div> -->\n        </mat-card-actions>\n      </mat-sidenav-container>\n    </mat-card>\n  </div>\n</div>\n","import { Router } from '@angular/router';\nimport { ConfirmDialogComponent } from './../../shared/component/confirm-dialog/confirm-dialog.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSidenav } from '@angular/material/sidenav';\nimport { Component, OnInit, ViewChild } from '@angular/core';\n\nimport { Store } from '@ngrx/store';\nimport { News } from './../../news/models/news';\nimport * as editorActions from '../store/news-editor.actions';\n\nimport { NotesDialogComponent, RejectNotes } from './../notes-dialog/notes-dialog.component';\n\n\n\n@Component({\n  selector: 'app-review',\n  templateUrl: './review.component.html',\n  styleUrls: ['./review.component.css']\n})\nexport class ReviewComponent implements OnInit {\n  them;\n  user;\n  sidePanelOpened = true;\n  sidePanelOpened_noNews = true;\n  review_news_count = null;\n\n  @ViewChild('sidebar', {static: true}) sidenav: MatSidenav;\n\n  // MESSAGE\n  selectedNews: News;\n  reviewList;\n\n  // initializers\n  init_news$;\n\n  constructor(\n    private store: Store<any>,\n    private dialog: MatDialog,\n    private router: Router\n  ) {\n    // this.selectedMessage = this.messages[1];\n  }\n\n  ngOnInit() {\n    // this.init_news$ = this.store.select(store => store.ReviewNews.isLoaded)\n    // .take(1)\n    // .subscribe(\n    //   (isLoaded) => {\n    //     if (!isLoaded) {\n    //       console.log('loading news for review');\n    //       this.store.dispatch(new editorActions.GetReviewNews());\n    //     }\n    //   }\n    // );\n    this.store.dispatch(new editorActions.GetReviewNews());\n\n    // no of news for approval count\n    this.init_news$ = this.store.select(store => store.ReviewNews)\n    .subscribe(\n      (ReviewNews) => {\n        if (ReviewNews.isLoaded) {\n          this.review_news_count = Object.keys(ReviewNews.news).length;\n          if (this.review_news_count <= 0) {\n            this.sideBarToggle();\n          }\n        }\n      }\n    );\n\n    this.reviewList = this.store.select(news_store => news_store.ReviewNews.news);\n  }\n\n  sideBarToggle() {\n    this.sidenav.toggle();\n  }\n\n  isOver(): boolean {\n    return window.matchMedia(`(max-width: 960px)`).matches;\n  }\n\n  onSelect(news: News): void {\n    if (this.selectedNews && this.selectedNews.id === news.id) {\n      this.selectedNews = null;\n    }else {\n      this.selectedNews = news;\n    }\n  }\n\n  approveNews(toApprove: News) {\n    this.store.dispatch(new editorActions.ApproveNews({ id: toApprove.id }));\n    this.selectedNews = null;\n  }\n\n  rejectNews() {\n\n    let dialogRef = this.dialog.open(NotesDialogComponent, { width: '50%', data: this.selectedNews });\n\n    dialogRef.afterClosed().subscribe((result: string) => {\n      dialogRef = null;\n      if (result) {\n      }\n    });\n    dialogRef.componentInstance.onReject.subscribe((result: RejectNotes) => {\n      this.store.dispatch(new editorActions.RejectNews(result));\n      this.selectedNews = null;\n    });\n\n    return false;\n  }\n\n  onEdit() {\n    if (this.selectedNews) {\n      const url = '/editor/edit/' + this.selectedNews.id;\n      this.router.navigateByUrl(url, { skipLocationChange: true });\n    }\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\n\nimport { environment } from './../../../environments/environment';\nimport { News, ListOrder } from '../../news/models/news';\nimport { RejectNotes } from '../notes-dialog/notes-dialog.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EditorNewsService {\n  private apiUrl = environment.apiUrl;\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  // get all news in ready status (review)\n  getReviewNews () {\n    return this.http.get<any>(this.apiUrl + 'news/editor/ready');\n  }\n\n  // get all news in ready status (review)\n  approveNews (id: number) {\n    return this.http.post<any>(this.apiUrl + 'news/editor/approve', { newsId: id });\n  }\n\n  // reject news\n  reJectNews (reject: RejectNotes) {\n    return this.http.post<any>(this.apiUrl + 'news/editor/reject', reject);\n    // { news_id: reject.news_id, notes: reject.notes, containNotes: reject.containNotes }\n  }\n\n  // get a news for editing\n  editNews (id: number) {\n    return this.http.get<any>( this.apiUrl + 'news/editor/edit/' + id );\n  }\n\n  // save a news, with bar(s) & ticker(s)\n  updateNews (save_news: News, id: number) {\n    const headers = new HttpHeaders({'Content-Type': 'application/json; charset=utf-8'});\n\n    save_news.newsstatus_id = 1;\n    const post_str = JSON.parse(JSON.stringify(save_news));\n\n    return this.http.put<any>(this.apiUrl + 'news/editor/' + id, post_str, { headers: headers });\n  }\n\n\n  /**\n   * News List Services\n   */\n\n  // get todays lists\n  getNewsLists () {\n    return this.http.get<any>(this.apiUrl + 'news/editor/lists');\n  }\n\n  // get lists for given date, date format = 'Y-m-d' eg: 2018-11-20\n  getNewsListsByDate (date: string) {\n    return this.http.get<any>(this.apiUrl + 'news/editor/lists/' + date);\n  }\n\n  // get all news written today if published\n  getTodaysNews () {\n    return this.http.get<any>(this.apiUrl + 'news/editor/news/todays');\n  }\n\n  // add a news to a list\n  addNewsToList (data: { list_id: number, news_id: number }) {\n    return this.http.post<any>(this.apiUrl + 'news/editor/list/news/add', data);\n  }\n\n  // add a news to a list\n  removeNewsFromList (news_id: number) {\n    return this.http.delete<any>(this.apiUrl + 'news/editor/list/news/remove/' + news_id);\n  }\n\n  //order news in a list\n  orderList(ordered_list: ListOrder[]) {\n    return this.http.post<any>(this.apiUrl + 'news/editor/list/order/update', ordered_list);\n  }\n\n  //update selected news list\n  updateSelectedList(list_id: number) {\n    return this.http.put<any>(this.apiUrl + 'news/editor/list/selected/update', { \"settings_value\": list_id });\n  }\n\n  // get selected list\n  getSelectedList () {\n    return this.http.get<any>(this.apiUrl + 'news/lists/selected-list');\n  }\n}\n","\nimport {catchError, mergeMap,  map } from 'rxjs/operators';\nimport { EditorNewsService } from './../services/editor-news.service';\nimport { Injectable } from '@angular/core';\nimport { Observable ,  of } from 'rxjs';\nimport { Action } from '@ngrx/store';\n\n\n\n\nimport {Actions, Effect, ofType} from '@ngrx/effects';\n\nimport * as NewsActions from './news-editor.actions';\nimport { News } from '../../news/models/news';\n\n@Injectable()\nexport class NewsEditorEffects {\n\n  constructor(\n    private actions$: Actions,\n    private newsService: EditorNewsService,\n  ) { }\n\n  @Effect()\n  GetMyNews$: Observable<Action> = this.actions$.\n    pipe(\n      ofType<NewsActions.GetReviewNews>(NewsActions.GET_REVIEW_NEWS),\n      mergeMap(action =>\n        this.newsService.getReviewNews().pipe(\n        map((data) => {\n          console.log(data);\n          return new NewsActions.GetReviewNewsSuccess(data);\n        }),\n        catchError(() => of(new NewsActions.GetReviewNewsError())),)\n      )\n    );\n\n  @Effect()\n  ApproveNews$: Observable<Action> = this.actions$.\n    pipe(\n      ofType<NewsActions.ApproveNews>(NewsActions.APPROVE_NEWS),\n      mergeMap(action =>\n        this.newsService.approveNews(action.payload.id).pipe(\n        map((data) => {\n          console.log(data);\n          return new NewsActions.ApproveNewsSuccess({ id: action.payload.id });\n        }),\n        catchError(() => of(new NewsActions.ApproveNewsError())),)\n      )\n    );\n\n  @Effect()\n  RejectNews$: Observable<Action> = this.actions$.\n    pipe(\n      ofType<NewsActions.RejectNews>(NewsActions.REJECT_NEWS),\n      mergeMap(action =>\n        this.newsService.reJectNews(action.payload).pipe(\n        map((data) => {\n          console.log(data);\n          return new NewsActions.RejectNewsSuccess(action.payload);\n        }),\n        catchError(() => of(new NewsActions.RejectNewsError())),)\n      )\n    );\n\n  // @Effect()\n  // GetTrashNews$: Observable<Action> = this.actions$.\n  //   ofType<NewsActions.GetReviewNews>(NewsActions.GET_REVIEW_NEWS)\n  //   .mergeMap(action =>\n  //     this.newsService.trashNews(action.payload.perPage, action.payload.currentPage)\n  //     .map((data) => {\n  //       return new NewsActions.GetReviewNewsSuccess(data);\n  //     })\n  //     .catch(() => of(new NewsActions.GetReviewNewsError()))\n  //   );\n\n  @Effect()\n  getLists$: Observable<Action> = this.actions$.\n    pipe(\n      ofType<NewsActions.GetLists>(NewsActions.GET_LISTS),\n      mergeMap(action =>\n        this.newsService.getNewsLists().pipe(\n        map((data) => {\n          console.log(data);\n          // new NewsActions.GetSelectedList(); //load selected list\n          return new NewsActions.GetListsSuccess(data);\n        }),\n        catchError(() => of(new NewsActions.GetListsError())),)\n      )\n    );\n\n\n  @Effect()\n  getListsByDate$: Observable<Action> = this.actions$.\n    pipe(\n      ofType<NewsActions.GetListsByDate>(NewsActions.GET_LISTS_BY_DATE),\n      mergeMap(action =>\n        this.newsService.getNewsListsByDate(action.payload.date).pipe(\n        map((data) => {\n          console.log(data);\n          // new NewsActions.GetSelectedList(); //load selected list\n          return new NewsActions.GetListsByDateSuccess(data);\n        }),\n        catchError(() => of(new NewsActions.GetListsByDateError())),)\n      )\n    );\n\n\n  @Effect()\n  AddToList$: Observable<Action> = this.actions$.\n    pipe(\n      ofType<NewsActions.AddToList>(NewsActions.ADD_TO_LIST),\n      mergeMap(action =>\n        this.newsService.addNewsToList({ list_id: action.payload.list_id, news_id: action.payload.news_id }).pipe(\n        map((data) => {\n          console.log(data);\n          return new NewsActions.AddToListSuccess(data);\n        }),\n        catchError(() => of(new NewsActions.AddToListError())),)\n      )\n    );\n\n\n  @Effect()\n  RemoveFromList$: Observable<Action> = this.actions$.\n    pipe(\n      ofType<NewsActions.RemoveFromList>(NewsActions.REMOVE_FROM_LIST),\n      mergeMap(action =>\n        this.newsService.removeNewsFromList(action.payload.id).pipe(\n        map((data) => {\n          //console.log(data);\n          return new NewsActions.RemoveFromListSuccess(data);\n        }),\n        catchError(() => of(new NewsActions.RemoveFromListError())),)\n      )\n    );\n\n\n  @Effect()\n  UpdateListOrder$: Observable<Action> = this.actions$.\n    pipe(\n      ofType<NewsActions.UpdateListOrder>(NewsActions.UPDATE_LIST_ORDER),\n      mergeMap(action =>\n        this.newsService.orderList(action.payload).pipe(\n        map((data) => {\n          //console.log(data);\n          return new NewsActions.UpdateListOrderSuccess(data);\n        }),\n        catchError(() => of(new NewsActions.UpdateListOrderError())),)\n      )\n    );\n\n\n  @Effect()\n  GetSelectedList$: Observable<Action> = this.actions$.\n    pipe(\n      ofType<NewsActions.GetSelectedList>(NewsActions.GET_SELECTED_LIST),\n      mergeMap(action =>\n        this.newsService.getSelectedList().pipe(\n        map((data) => {\n          //console.log(data);\n          return new NewsActions.GetSelectedListSuccess({ list_id: data });\n        }),\n        catchError(() => of(new NewsActions.GetSelectedListError())),)\n      )\n    );\n\n  @Effect()\n  UpdateSelectedList$: Observable<Action> = this.actions$.\n    pipe(\n      ofType<NewsActions.UpdateSelectedList>(NewsActions.UPDATE_SELECTED_LIST),\n      mergeMap(action =>\n        this.newsService.updateSelectedList(action.payload.list_id).pipe(\n        map((data) => {\n          //console.log(data);\n          return new NewsActions.UpdateSelectedListSuccess({ list_id: data });\n        }),\n        catchError(() => of(new NewsActions.UpdateSelectedListError())),)\n      )\n    );\n\n}\n"]}