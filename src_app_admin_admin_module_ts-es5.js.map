{"version":3,"sources":["webpack:///src/app/admin/add-news-breaker-dialog/add-news-breaker-dialog.component.ts","webpack:///src/app/admin/add-news-breaker-dialog/add-news-breaker-dialog.component.html","webpack:///src/app/admin/add-news-list-template-dialog/add-news-list-template-dialog.component.ts","webpack:///src/app/admin/add-news-list-template-dialog/add-news-list-template-dialog.component.html","webpack:///src/app/admin/add-user-dialog/add-user-dialog.component.ts","webpack:///src/app/admin/add-user-dialog/add-user-dialog.component.html","webpack:///src/app/admin/admin.module.ts","webpack:///src/app/admin/admin.routing.ts","webpack:///src/app/admin/assign-role-dialog/assign-role-dialog.component.html","webpack:///src/app/admin/assign-role-dialog/assign-role-dialog.component.ts","webpack:///src/app/admin/dashboard/dashboard.component.ts","webpack:///src/app/admin/dashboard/dashboard.component.html","webpack:///src/app/admin/models/admin-news.models.ts","webpack:///src/app/admin/models/user.model.ts","webpack:///src/app/admin/news-breakers/news-breakers.component.html","webpack:///src/app/admin/news-breakers/news-breakers.component.ts","webpack:///src/app/admin/news-list/news-list.component.html","webpack:///src/app/admin/news-list/news-list.component.ts","webpack:///src/app/admin/services/news.service.ts","webpack:///src/app/admin/services/user.service.ts","webpack:///src/app/admin/store/admin.actions.ts","webpack:///src/app/admin/store/admin.effects.ts","webpack:///src/app/admin/store/admin.reducer.ts","webpack:///src/app/admin/user/user.component.html","webpack:///src/app/admin/user/user.component.ts"],"names":["AddNewsBreakerDialogComponent","dialogRef","data","store","userService","updates$","onAdd","EventEmitter","breaker","News","emit","close","console","log","JSON","stringify","confirmation","MAT_DIALOG_DATA","closeDialog","addBreaker","AddNewsListDialogComponent","template","NewsListTemplate","enabled","addTemplate","AddUserDialogComponent","user","Users","dispatch","addUser","AdminModule","CommonModule","RouterModule","AdminRoutes","FormsModule","DemoMaterialModule","FlexLayoutModule","PerfectScrollbarModule","DragulaModule","SharedModule","NgxDatatableModule","StoreModule","reducer","EffectsModule","AdminEffects","DashboardComponent","UserComponent","AssignRoleDialogComponent","NewsListComponent","NewsBreakersComponent","path","children","component","role","roles","destroySubject$","Subject","getRoles","subscribe","role_","re","forEach","element","name","roleid","user_id","id","role_id","pipe","ofType","takeUntil","select","Admin","users","next","list_name","SettingsKey","email","password","Roles","Permissions","Activity","Profile","dob","gender","fb","insta","twitter","phone","profilepic","coverimage","adminNewsService","dialog","snackBar","getBreakers","breakers","open","width","height","maxHeight","componentInstance","result","createBreaker","ConfirmDialogComponent","title","message","afterClosed","deleteBreakers","onAddBreaker","templates","generationTime","key","getListTemplates","getListGenTime","time","value","enableListTemplate","template_id","disableListTemplate","setSettingsKey","openSnackBar","createListTemplate","deleteListTemplate","action","duration","onAddTemplate","updateTime","NewsService","http","apiUrl","environment","get","body","put","post","UserService","user_role","GET_USERS","GET_USERS_SUCCESS","GET_USERS_ERROR","ASSIGN_ROLE","ASSIGN_ROLE_SUCCESS","ASSIGN_ROLE_ERROR","REMOVE_ROLE","REMOVE_ROLE_SUCCESS","REMOVE_ROLE_ERROR","CREATE_USER","CREATE_USER_SUCCESS","CREATE_USER_ERROR","UPDATE_USER","UPDATE_USER_SUCCESS","UPDATE_USER_ERROR","CHANGE_LOADED","LOGOUT_ADMIN_STATE","GetUsers","type","GetUsersSuccess","payload","GetUsersError","AssignRole","AssignRoleSuccess","AssignRoleError","RemoveRole","RemoveRoleSuccess","RemovenRoleError","CreateUser","CreateUserSuccess","CreateUserError","UpdateUser","UpdateUserSuccess","UpdateUserError","LogoutAdminState","UpdateLoaded","actions$","GetMyNews$","mergeMap","getUsers","map","catchError","of","AssignRole$","assignRole","RemoveRole$","removeRole","CreateUser$","createUser","UpdateUser$","updateUser","Effect","Observable","initialState","isLoaded","state","getAdminState","createFeatureSelector","sessionService","sidePanelOpened","selectedUser","storagePath","sub","adminStore","userList","UserState","currentUserEmail","userid","urole","window","matchMedia","matches","right","checkRole","onAddUser","onAddRole"],"mappings":"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","file":"src_app_admin_admin_module_ts-es5.js","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { Store } from '@ngrx/store';\nimport * as adminActions from '../store/admin.actions';\nimport { UserService } from '../services/user.service';\nimport { Roles, Users } from '../models/user.model';\nimport { Actions } from '@ngrx/effects';\nimport { News } from '../../news/models/news';\n\n@Component({\n  selector: 'add-news-breaker-dialog',\n  templateUrl: './add-news-breaker-dialog.component.html',\n  styleUrls: ['./add-news-breaker-dialog.component.css']\n})\n\nexport class AddNewsBreakerDialogComponent implements OnInit {\n  onAdd = new EventEmitter();\n  breaker: News = new News();\n\n  constructor(\n    public dialogRef: MatDialogRef<AddNewsBreakerDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: Users,\n    private store: Store<any>,\n    private userService: UserService,\n    private updates$: Actions,\n  ) { }\n\n  ngOnInit() {\n  }\n\n  addBreaker() {\n    // this.store.dispatch(new adminActions.CreateUser(this.user));\n    this.onAdd.emit(this.breaker);\n    this.dialogRef.close(true);\n    console.log(JSON.stringify(this.breaker));\n  }\n\n  closeDialog(confirmation: boolean) {\n    this.dialogRef.close(confirmation);\n  }\n\n}\n","<h3 mat-dialog-title>Add News Breaker</h3>\n<form class=\"basic-form\" #userForm=\"ngForm\">\n  <div mat-dialog-content>\n\n      <div style=\"margin-top:20px;\" fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n          <div fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Breaker Name</mat-label>\n              <input matInput mat-autosize required name=\"templateName\" [(ngModel)]=\"breaker.news_name\">\n            </mat-form-field>\n          </div>\n      </div>\n<!-- {{template|json}} -->\n  </div>\n  <!-- actions column -->\n  <div mat-dialog-actions align=\"end\">\n    <button mat-button color=\"basic\" (click)=\"closeDialog(true)\">Cancel</button>\n    <button mat-raised-button color=\"primary\" (click)=\"addBreaker()\" [disabled]=\"!userForm.form.valid\">Add Breaker</button>\n    <!-- <button mat-button color=\"basic\" *ngIf=\"data.newsstatus.status != 'published' && data.newsstatus.status != 'deleted'\" routerLink=\"/news/{{data.id}}\" (click)=\"closeDialog(true)\">Edit</button> -->\n  </div>\n\n</form>\n","import { Component, OnInit, Input, Output, EventEmitter, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { Store } from '@ngrx/store';\nimport * as adminActions from '../store/admin.actions';\nimport { UserService } from '../services/user.service';\nimport { Roles, Users } from '../models/user.model';\nimport { Actions } from '@ngrx/effects';\nimport { NewsListTemplate } from '../models/admin-news.models';\n\n@Component({\n  selector: 'add-news-list-template-dialog',\n  templateUrl: './add-news-list-template-dialog.component.html',\n  styleUrls: ['./add-news-list-template-dialog.component.css']\n})\n\nexport class AddNewsListDialogComponent implements OnInit {\n  onAdd = new EventEmitter();\n  template: NewsListTemplate = new NewsListTemplate();\n\n  constructor(\n    public dialogRef: MatDialogRef<AddNewsListDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: Users,\n    private store: Store<any>,\n    private userService: UserService,\n    private updates$: Actions,\n  ) { }\n\n  ngOnInit() {\n    this.template.enabled = true;\n  }\n\n  addTemplate() {\n    // this.store.dispatch(new adminActions.CreateUser(this.user));\n    this.onAdd.emit(this.template);\n    this.dialogRef.close(true);\n  }\n\n  closeDialog(confirmation: boolean) {\n    this.dialogRef.close(confirmation);\n  }\n\n}\n","<h3 mat-dialog-title>Add News List Template</h3>\n<form class=\"basic-form\" #userForm=\"ngForm\">\n  <div mat-dialog-content>\n\n      <div style=\"margin-top:20px;\" fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n          <div fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Template Name</mat-label>\n              <input matInput mat-autosize required name=\"templateName\" [(ngModel)]=\"template.list_name\">\n            </mat-form-field>\n          </div>\n      </div>\n<!-- {{template|json}} -->\n  </div>\n  <!-- actions column -->\n  <div mat-dialog-actions align=\"end\">\n    <button mat-button color=\"basic\" (click)=\"closeDialog(true)\">Cancel</button>\n    <button mat-raised-button color=\"primary\" (click)=\"addTemplate()\" [disabled]=\"!userForm.form.valid\">Add Template</button>\n    <!-- <button mat-button color=\"basic\" *ngIf=\"data.newsstatus.status != 'published' && data.newsstatus.status != 'deleted'\" routerLink=\"/news/{{data.id}}\" (click)=\"closeDialog(true)\">Edit</button> -->\n  </div>\n\n</form>\n","import { Component, OnInit, Input, Output, EventEmitter, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { Store } from '@ngrx/store';\nimport * as adminActions from '../store/admin.actions';\nimport { UserService } from '../services/user.service';\nimport { Roles, Users } from '../models/user.model';\nimport { Actions } from '@ngrx/effects';\n\n@Component({\n  selector: 'add-user-dialog',\n  templateUrl: './add-user-dialog.component.html',\n  styleUrls: ['./add-user-dialog.component.css']\n})\n\nexport class AddUserDialogComponent implements OnInit {\n  onAdd = new EventEmitter();\n  user: Users = new Users(null, null, null);\n\n  constructor(\n    public dialogRef: MatDialogRef<AddUserDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: Users,\n    private store: Store<any>,\n    private userService: UserService,\n    private updates$: Actions,\n  ) { }\n\n  ngOnInit() {}\n\n  addUser() {\n    this.store.dispatch(new adminActions.CreateUser(this.user));\n    this.onAdd.emit();\n    this.dialogRef.close(true);\n  }\n\n  closeDialog(confirmation: boolean) {\n    this.dialogRef.close(confirmation);\n  }\n\n}\n","<h3 mat-dialog-title>Add User</h3>\n<form class=\"basic-form\" #userForm=\"ngForm\">\n  <div mat-dialog-content>\n\n      <div style=\"margin-top:20px;\" fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n          <div fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Name</mat-label>\n              <input matInput mat-autosize required name=\"tickerName\" [(ngModel)]=\"user.name\">\n            </mat-form-field>\n          </div>\n      </div>\n\n      <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n          <div fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Email</mat-label>\n              <input matInput mat-autosize required name=\"tickerName\" [(ngModel)]=\"user.email\">\n            </mat-form-field>\n          </div>\n      </div>\n\n      <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n          <div fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Password</mat-label>\n              <input type=\"password\" matInput mat-autosize required name=\"tickerName\" [(ngModel)]=\"user.password\">\n            </mat-form-field>\n          </div>\n      </div>\n\n      <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n          <div fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n              <code>{{user|json}}</code>\n          </div>\n      </div>\n\n  </div>\n  <!-- actions column -->\n  <div mat-dialog-actions align=\"end\">\n    <button mat-button color=\"basic\" (click)=\"closeDialog(true)\">Cancel</button>\n    <button mat-raised-button color=\"primary\" (click)=\"addUser()\" [disabled]=\"!userForm.form.valid\">Add User</button>\n    <!-- <button mat-button color=\"basic\" *ngIf=\"data.newsstatus.status != 'published' && data.newsstatus.status != 'deleted'\" routerLink=\"/news/{{data.id}}\" (click)=\"closeDialog(true)\">Edit</button> -->\n  </div>\n\n</form>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { RouterModule } from '@angular/router';\nimport { AdminRoutes } from './admin.routing';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { SharedModule } from '../shared/shared.module';\n\nimport { DemoMaterialModule } from '../demo-material-module';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { PerfectScrollbarModule } from 'ngx-perfect-scrollbar';\n\n/*import { DragulaModule } from 'ng2-dragula/ng2-dragula';*/\nimport { DragulaModule } from 'ng2-dragula';\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { DashboardComponent } from './dashboard/dashboard.component';\n\nimport { reducer } from './store/admin.reducer';\nimport { AdminEffects } from './store/admin.effects';\nimport { UserComponent } from './user/user.component';\nimport { AssignRoleDialogComponent } from './assign-role-dialog/assign-role-dialog.component';\nimport { AddUserDialogComponent } from './add-user-dialog/add-user-dialog.component';\nimport { NewsListComponent } from './news-list/news-list.component';\nimport { NewsBreakersComponent } from './news-breakers/news-breakers.component';\nimport { AddNewsListDialogComponent } from './add-news-list-template-dialog/add-news-list-template-dialog.component';\nimport { AddNewsBreakerDialogComponent } from './add-news-breaker-dialog/add-news-breaker-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(AdminRoutes),\n    FormsModule,\n    DemoMaterialModule,\n    FlexLayoutModule,\n    PerfectScrollbarModule,\n    DragulaModule,\n    SharedModule,\n    NgxDatatableModule,\n    StoreModule.forFeature('Admin', reducer),\n    EffectsModule.forFeature([AdminEffects]),\n  ],\n  declarations: [\n    DashboardComponent,\n    UserComponent,\n    AssignRoleDialogComponent,\n    AddUserDialogComponent,\n    AddNewsListDialogComponent,\n    AddNewsBreakerDialogComponent,\n    NewsListComponent,\n    NewsBreakersComponent\n  ],\n  entryComponents: [\n    AssignRoleDialogComponent,\n    AddUserDialogComponent,\n    AddNewsListDialogComponent,\n    AddNewsBreakerDialogComponent\n  ]\n})\nexport class AdminModule { }\n","import { Routes } from '@angular/router';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { UserComponent } from './user/user.component';\nimport { NewsListComponent } from './news-list/news-list.component';\nimport { NewsBreakersComponent } from './news-breakers/news-breakers.component';\n\nexport const AdminRoutes: Routes = [\n {\n    path: '',\n    children: [{\n      path: 'admin-dashboard',\n      component: DashboardComponent,\n      data: { role: 'admin' }\n    },{\n      path: 'user-console',\n      component: UserComponent,\n      data: { role: 'admin' }\n    },{\n      path: 'news-settings/list',\n      component: NewsListComponent,\n      data: { role: 'admin' }\n    },{\n      path: 'news-settings/breakers',\n      component: NewsBreakersComponent,\n      data: { role: 'admin' }\n    },\n  ]\n  }\n];\n","<h3 mat-dialog-title>Assign Role to {{data.name}}</h3>\n\n<div mat-dialog-content>\n  <!-- <div fxLayout=\"row\" fxLayoutWrap=\"wrap\"> -->\n      <!-- title column -->\n      <!-- <div fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n          Add News to {{data.name}}\n      </div> -->\n      <!-- hr column -->\n      <!-- <div fxFlex.gt-sm=\"100\" fxFlex=\"100\" class=\"m-t-20\">\n        <mat-divider></mat-divider>\n      </div> -->\n      <!-- column -->\n  <!-- </div> -->\n\n  <div style=\"margin-top:20px;\" fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n      <div fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n\n\n          <div class=\"table-rasponsive\" *ngIf=\"roles\">\n\n            <div class=\"table\">\n              <div class=\"table-header\">\n                <div class=\"header__item column-role\">Role</div>\n                <div class=\"header__item column-name\">Role Name</div>\n                <div class=\"header__item column-detail\">Detail</div>\n                <div class=\"header__item column-actions\">Actions</div>\n              </div>\n              <div class=\"table-content\">\n                <div class=\"table-row\" *ngFor=\"let role of roles\" [class.role_assigned]=\"userHasRole(role.name)\">\n                  <div class=\"table-data column-role\">{{ role.name }}</div>\n\n                  <div class=\"table-data column-name\">{{ role.display_name }}</div>\n\n                  <div class=\"table-data column-detail\" matTooltipPosition=\"below\">{{ role.description }}</div>\n\n                  <div class=\"table-data column-actions\">\n                      <button mat-icon-button color=\"warn\" [disabled]=\"userHasRole(role.name)\" (click)=\"assignRole(role.id)\" matTooltip=\"Assign Role\" matTooltipPosition=\"below\">\n                        <mat-icon aria-label=\"Edit\">add</mat-icon>\n                      </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n          </div>\n\n\n      </div>\n  </div>\n\n  <!-- <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n      <div fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n          <code>{{tickerNews|json}}</code>\n      </div>\n  </div> -->\n\n</div>\n<!-- actions column -->\n<!-- <div mat-dialog-actions align=\"end\">\n  <button mat-button color=\"basic\" (click)=\"closeDialog(true)\">Cancel</button>\n  <button mat-raised-button color=\"primary\" (click)=\"doAdd(data.id)\">Add</button> -->\n  <!-- <button mat-button color=\"basic\" *ngIf=\"data.newsstatus.status != 'published' && data.newsstatus.status != 'deleted'\" routerLink=\"/news/{{data.id}}\" (click)=\"closeDialog(true)\">Edit</button> -->\n<!-- </div> -->\n","import { Component, OnInit, OnDestroy, Input, Output, EventEmitter, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { Store } from '@ngrx/store';\nimport * as adminActions from '../store/admin.actions';\nimport { UserService } from '../services/user.service';\nimport { Roles, Users } from '../models/user.model';\nimport {Actions, ofType} from '@ngrx/effects';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'assign-role-dialog',\n  templateUrl: './assign-role-dialog.component.html',\n  styleUrls: ['./assign-role-dialog.component.css']\n})\nexport class AssignRoleDialogComponent implements OnInit, OnDestroy {\n  onAdd = new EventEmitter();\n  roles: Roles[] = [];\n  destroySubject$: Subject<void> = new Subject();\n\n  constructor(\n    public dialogRef: MatDialogRef<AssignRoleDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: Users,\n    private store: Store<any>,\n    private userService: UserService,\n    private updates$: Actions,\n  ) { }\n\n  ngOnInit() {\n    this.userService.getRoles().subscribe(roles => {\n      this.roles = roles;\n    });\n  }\n\n  userHasRole(role_: string) {\n    let re = false;\n\n    this.data.roles.forEach((element: Roles) => {\n      if(element.name === role_) {\n        re = true;\n        //console.log(element.name, role_)\n      }\n    });\n\n    return re;\n  }\n\n  assignRole(roleid: number) {\n    this.store.dispatch(new adminActions.AssignRole({ user_id: this.data.id, role_id: roleid }));\n    this.onAdd.emit({ user_id: this.data.id });\n\n    this.updates$\n      .pipe(\n        ofType(adminActions.ASSIGN_ROLE_SUCCESS),\n        takeUntil(this.destroySubject$)\n      )\n      .subscribe(() => {\n\n        this.store.select(store => store.Admin.users)\n        .subscribe(users => {\n          users.forEach((user: Users) => {\n            if (user.id === this.data.id) {\n              // console.log(element)\n              this.data = user;\n            }\n          });\n        });\n\n      });\n  }\n\n  closeDialog(confirmation: boolean) {\n    this.dialogRef.close(confirmation);\n  }\n\n  doAdd() {\n    this.closeDialog(true);\n    this.onAdd.emit();\n  }\n\n  ngOnDestroy() {\n    this.destroySubject$.next();\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<p>\n  dashboard works!\n</p>\n","export class NewsListTemplate {\n  id?: number;\n  list_name: string;\n  enabled: boolean;\n  created_at?: string;\n  updated_at?: string;\n\n  constructor() {\n    this.list_name = '';\n  }\n}\n\nexport class SettingsKey {\n  id?: number;\n  key?: string;\n  value?: string;\n  created_at?: string;\n  updated_at?: string;\n\n  constructor() {\n  }\n}\n","export class Users {\n  id?: number;\n  name: string;\n  email: string;\n  created_at?: string;\n  updated_at?: string;\n  activity?: Activity[];\n  roles?: Roles[]\n  password?: string;\n  profile?: Profile;\n\n  constructor(name, email, password) {\n    this.name = name;\n    this.email = email;\n    this.password = password;\n  }\n}\n\nexport class Roles {\n  id: number;\n  name: string;\n  display_name: string;\n  description: string;\n  created_at: string;\n  updated_at: string;\n  pivot: {\n      user_id: number,\n      role_id: number\n  }\n  permissions?: Permissions[]\n\n  constructor() {}\n}\n\nexport class Permissions {\n  id: number;\n  name: string;\n  display_name: string;\n  description: string;\n  created_at: string;\n  updated_at: string;\n  pivot: {\n      role_id: number,\n      permission_id: number\n  }\n\n  constructor() {}\n}\n\nexport class Activity {\n  id: number;\n  log_name: string;\n  description: string;\n  subject_id: number;\n  subject_type: string;\n  causer_id: number;\n  causer_type: string;\n  properties?: any[];\n  created_at: string;\n  updated_at: string;\n\n  constructor() {}\n}\n\nexport class Profile{\n  id?: string;\n  user_id?: string;\n  dob?: string;\n  gender?: string;\n  fb?: string;\n  insta?: string;\n  twitter?: string;\n  email?: string;\n  phone?: string;\n  profilepic?: string;\n  coverimage?: string;\n\n  constructor(){\n    this.user_id    = '-';\n    this.dob        = '-';\n    this.gender     = '-';\n    this.fb         = '-';\n    this.insta      = '-';\n    this.twitter    = '-';\n    this.email      = '-';\n    this.phone      = '-';\n    this.profilepic = '';\n    this.coverimage = '';\n\n  }\n}\n","<!-- ============================================================== -->\n<!-- Update List Generation time & list templates -->\n<!-- ============================================================== -->\n<div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n    <!-- Column-->\n    <div fxFlex.gt-lg=\"85\" fxFlex.gt-md=\"75\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n        <mat-card>\n          <mat-card-content>\n              <mat-card-title>News Breakers</mat-card-title>\n              <!-- <mat-card-subtitle>News Lists to be generated everyday</mat-card-subtitle> -->\n\n              <div class=\"table-rasponsive\">\n              <div class=\"table\">\n                <div class=\"table-header\">\n                  <div class=\"header__item column-name\">Breaker Name</div>\n                  <div class=\"header__item column-actions\">Actions</div>\n                </div>\n                <div class=\"table-content\">\n                  <div class=\"table-row\" *ngFor=\"let breaker of breakers\">\n                    <div class=\"table-data column-name\">{{ breaker.news_name }}</div>\n\n                    <div class=\"table-data column-actions\">\n                        <button mat-icon-button color=\"warn\" (click)=\"onDeleteBreaker(breaker.id)\" matTooltip=\"Remove Template\" matTooltipPosition=\"below\">\n                          <mat-icon aria-label=\"Edit\">clear</mat-icon>\n                        </button>\n\n                        <!-- <button mat-icon-button color=\"basic\" *ngIf=\"!list.enabled\" (click)=\"enable(breaker.id)\" matTooltip=\"Enable Template\" matTooltipPosition=\"below\">\n                          <mat-icon aria-label=\"Approve\">check_circle</mat-icon>\n                        </button>\n                        <button mat-icon-button color=\"warn\" *ngIf=\"list.enabled\" (click)=\"disable(breaker.id)\" matTooltip=\"Disable Template\" matTooltipPosition=\"below\">\n                          <mat-icon aria-label=\"Approve\">do_not_disturb_on</mat-icon>\n                        </button> -->\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <mat-card-actions align=\"end\">\n              <button mat-raised-button color=\"accent\" (click)=\"onAddBreaker()\">Add Breaker</button>\n            </mat-card-actions>\n          </mat-card-content>\n        </mat-card>\n    </div>\n</div>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\nimport { ConfirmDialogComponent } from '../../shared/component/confirm-dialog/confirm-dialog.component';\nimport { NewsService } from '../services/news.service';\nimport { News } from '../../news/models/news';\nimport { AddNewsBreakerDialogComponent } from '../add-news-breaker-dialog/add-news-breaker-dialog.component';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-news-breakers',\n  templateUrl: './news-breakers.component.html',\n  styleUrls: ['./news-breakers.component.css']\n})\nexport class NewsBreakersComponent implements OnInit, OnDestroy {\n  breakers: News[];\n  destroySubject$: Subject<void> = new Subject();\n\n  constructor(\n    private adminNewsService: NewsService,\n    public dialog: MatDialog,\n    public snackBar: MatSnackBar\n  ) { }\n\n  ngOnInit() {\n    this.adminNewsService.getBreakers().subscribe(breakers => {\n      this.breakers = breakers\n    });\n  }\n\n  onAddBreaker() {\n    let dialogRef = this.dialog.open(AddNewsBreakerDialogComponent, { width: '40%', height: 'auto', maxHeight: '95%' });\n\n    dialogRef.componentInstance.onAdd\n    .pipe(takeUntil(this.destroySubject$))\n    .subscribe((result: News) => {\n      this.adminNewsService.createBreaker(result).subscribe((data: News[]) => {\n        this.breakers = data;\n      });\n    });\n  }\n\n  onDeleteBreaker(id: number){\n    let dialogRef = this.dialog.open(ConfirmDialogComponent,\n      { width: '350px', data: {title: 'Delete News Breaker', message: 'Are you sure you want to delete this Breaker?'} });\n\n      dialogRef.afterClosed()\n      .pipe(takeUntil(this.destroySubject$))\n      .subscribe((result: string) => {\n        dialogRef = null;\n        if (result) {\n          this.adminNewsService.deleteBreakers(id).subscribe((data: News[]) => {\n            this.breakers = data;\n          });\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this.destroySubject$.next();\n  }\n\n}\n","<!-- ============================================================== -->\n<!-- Update List Generation time & list templates -->\n<!-- ============================================================== -->\n<div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n    <!-- Column-->\n    <div fxFlex.gt-lg=\"85\" fxFlex.gt-md=\"75\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n        <mat-card>\n          <mat-card-content>\n              <mat-card-title>List Templates</mat-card-title>\n              <mat-card-subtitle>News Lists to be generated everyday</mat-card-subtitle>\n\n              <div class=\"table-rasponsive\">\n              <div class=\"table\">\n                <div class=\"table-header\">\n                  <div class=\"header__item column-name\">List Name</div>\n                  <div class=\"header__item column-actions\">Actions</div>\n                </div>\n                <div class=\"table-content\">\n                  <div class=\"table-row status_{{ list.enabled }}\" *ngFor=\"let list of templates\">\n                    <div class=\"table-data column-name\">{{ list.list_name }}</div>\n\n                    <div class=\"table-data column-actions\">\n                        <button mat-icon-button color=\"warn\" (click)=\"onDeleteTemplate(list.id)\" matTooltip=\"Remove Template\" matTooltipPosition=\"below\">\n                          <mat-icon aria-label=\"Edit\">clear</mat-icon>\n                        </button>\n\n                        <button mat-icon-button color=\"basic\" *ngIf=\"!list.enabled\" (click)=\"enable(list.id)\" matTooltip=\"Enable Template\" matTooltipPosition=\"below\">\n                          <mat-icon aria-label=\"Approve\">check_circle</mat-icon>\n                        </button>\n                        <button mat-icon-button color=\"warn\" *ngIf=\"list.enabled\" (click)=\"disable(list.id)\" matTooltip=\"Disable Template\" matTooltipPosition=\"below\">\n                          <mat-icon aria-label=\"Approve\">do_not_disturb_on</mat-icon>\n                        </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <mat-card-actions align=\"end\">\n              <button mat-raised-button color=\"accent\" (click)=\"onAddTemplate()\">Add a Template</button>\n            </mat-card-actions>\n          </mat-card-content>\n        </mat-card>\n    </div>\n\n    <!-- Column-->\n    <div fxFlex.gt-lg=\"15\" fxFlex.gt-md=\"25\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n        <mat-card class=\"oh\">\n          <mat-card-content >\n            <p>\n              News Lists generation time\n            </p>\n\n            <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n              <!-- column -->\n              <div fxFlex.gt-md=\"100\" fxFlex=\"100\">\n                <mat-form-field appearance=\"outline\">\n                  <mat-label>Time</mat-label>\n                  <input matInput placeholder=\"News List Generation Time\" #ListTime required name=\"ListTime\" [(ngModel)]=\"generationTime.value\">\n                </mat-form-field>\n              </div>\n            </div>\n\n            <!-- {{generationTime|json}} -->\n\n             <mat-card-actions align=\"end\">\n                <button mat-raised-button color=\"accent\" (click)=\"updateTime()\">Update Time</button>\n              </mat-card-actions>\n            </mat-card-content>\n        </mat-card>\n    </div>\n</div>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { NewsService } from '../services/news.service';\nimport { NewsListTemplate, SettingsKey } from '../models/admin-news.models';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\nimport { AddNewsListDialogComponent } from '../add-news-list-template-dialog/add-news-list-template-dialog.component';\nimport { ConfirmDialogComponent } from '../../shared/component/confirm-dialog/confirm-dialog.component';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-news-list',\n  templateUrl: './news-list.component.html',\n  styleUrls: ['./news-list.component.css']\n})\nexport class NewsListComponent implements OnInit, OnDestroy {\n  templates: NewsListTemplate[] = [];\n  generationTime: SettingsKey = new SettingsKey();\n  destroySubject$: Subject<void> = new Subject();\n\n  constructor(\n    private adminNewsService: NewsService,\n    public dialog: MatDialog,\n    public snackBar: MatSnackBar\n  ) { }\n\n  ngOnInit() {\n    this.generationTime.key = 'list_generation_time';\n\n    this.adminNewsService.getListTemplates().pipe(takeUntil(this.destroySubject$)).subscribe((templates: NewsListTemplate[]) => this.templates = templates);\n    this.adminNewsService.getListGenTime().pipe(takeUntil(this.destroySubject$)).subscribe((time: SettingsKey) => this.generationTime.value = time.value);\n  }\n\n  enable(id: number) {\n    this.adminNewsService.enableListTemplate({template_id: id}).pipe(takeUntil(this.destroySubject$)).subscribe(data => {\n      this.templates = data;\n    });\n  }\n\n  disable(id: number) {\n    this.adminNewsService.disableListTemplate({template_id: id}).pipe(takeUntil(this.destroySubject$)).subscribe(data => {\n      this.templates = data;\n    });\n  }\n\n  updateTime() {\n    this.adminNewsService.setSettingsKey(this.generationTime).pipe(takeUntil(this.destroySubject$)).subscribe(data => {\n      this.generationTime = data;\n      this.openSnackBar('List Generations Time updated!');\n    });\n  }\n\n  onAddTemplate() {\n    let dialogRef = this.dialog.open(AddNewsListDialogComponent, { width: '40%', height: 'auto', maxHeight: '95%' });\n\n    dialogRef.componentInstance.onAdd.pipe(takeUntil(this.destroySubject$)).subscribe((result: NewsListTemplate) => {\n      this.adminNewsService.createListTemplate(result).pipe(takeUntil(this.destroySubject$)).subscribe((data: NewsListTemplate[]) => {\n        this.templates = data;\n      });\n    });\n  }\n\n  onDeleteTemplate(id: number) {\n    let dialogRef = this.dialog.open(ConfirmDialogComponent,\n      { width: '350px', data: {title: 'Delete News List Template', message: 'Are you sure you want to delete this Template?'} });\n\n      dialogRef.afterClosed().pipe(takeUntil(this.destroySubject$)).subscribe((result: string) => {\n        dialogRef = null;\n        if (result) {\n          this.adminNewsService.deleteListTemplate(id).pipe(takeUntil(this.destroySubject$)).subscribe((data: NewsListTemplate[]) => {\n            this.templates = data;\n          });\n        }\n      });\n  }\n\n\n  openSnackBar(message: string, action: string= 'close') {\n    this.snackBar.open(message, action, {\n      duration: 1000,\n    });\n  }\n\n  ngOnDestroy() {\n    this.destroySubject$.next();\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\n\nimport { environment } from './../../../environments/environment';\nimport { News, ListOrder } from '../../news/models/news';\nimport { Users } from '../models/user.model';\nimport { NewsListTemplate, SettingsKey } from '../models/admin-news.models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NewsService {\n\n  private apiUrl = environment.apiUrl;\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n\n  // get list templates\n  getListTemplates () {\n    return this.http.get<any>(this.apiUrl + 'management-console/news/list-templates');\n  }\n\n  // get list generation time\n  getListGenTime () {\n    return this.http.get<any>(this.apiUrl + 'management-console/news/list-templates/time');\n  }\n\n  // enable news list template\n  enableListTemplate (body: { template_id: number }) {\n    return this.http.put<any>(this.apiUrl + 'management-console/news/list-templates/enable', body);\n  }\n\n  // enable news list template\n  disableListTemplate (body: { template_id: number }) {\n    return this.http.put<any>(this.apiUrl + 'management-console/news/list-templates/disable', body);\n  }\n\n  // set value for a settings key\n  setSettingsKey (body: SettingsKey) {\n    return this.http.put<any>(this.apiUrl + 'management-console/settings/set', body);\n  }\n\n  // create a news list template\n  createListTemplate (template: NewsListTemplate) {\n    return this.http.post<any>(this.apiUrl + 'management-console/news/list-templates/create', template);\n  }\n\n  // delete a news list template\n  deleteListTemplate (id: number) {\n    return this.http.delete<any>(this.apiUrl + 'management-console/news/list-templates/'+id);\n  }\n\n\n  /**---------------------------------------------------------------------------------\n   * ------------------------------------------------------------------> News Breakers\n   ---------------------------------------------------------------------------------*/\n  // get breakers\n  getBreakers () {\n    return this.http.get<any>(this.apiUrl + 'management-console/news/breakers/manage/get');\n  }\n\n  // create a news breaker\n  createBreaker (template: News) {\n    return this.http.post<any>(this.apiUrl + 'management-console/news/breakers/manage/create', template);\n  }\n\n  // delete a news breaker\n  deleteBreakers (id: number) {\n    return this.http.delete<any>(this.apiUrl + 'management-console/news/breakers/manage/delete/'+id);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\n\nimport { environment } from './../../../environments/environment';\nimport { News, ListOrder } from '../../news/models/news';\nimport { Users } from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  private apiUrl = environment.apiUrl;\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n\n  // get selected list\n  getUsers () {\n    return this.http.get<any>(this.apiUrl + 'management-console/users');\n  }\n\n  // get all roles for assignment\n  getRoles () {\n    return this.http.get<any>(this.apiUrl + 'management-console/user/get-roles');\n  }\n\n  // assign role to user\n  assignRole ( user_role: { user_id: number, role_id: number } ) {\n    return this.http.put<any>(this.apiUrl + 'management-console/user/assign-role', user_role);\n  }\n\n  // remove role from user\n  removeRole ( user_role: { user_id: number, role_id: number } ) {\n    return this.http.put<any>(this.apiUrl + 'management-console/user/remove-role', user_role);\n  }\n\n  // create user\n  createUser ( user: Users ) {\n    return this.http.post<any>(this.apiUrl + 'management-console/user/create', user);\n  }\n\n  // update user\n  updateUser ( user: Users ) {\n    return this.http.put<any>(this.apiUrl + 'management-console/user/update', user);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { News, NewsList, ListOrder } from './../../news/models/news';\nimport { Users } from '../models/user.model';\n\n\nexport const GET_USERS = '[Admin] GET_USERS';\nexport const GET_USERS_SUCCESS = '[Admin] GET_USERS_SUCCESS';\nexport const GET_USERS_ERROR = '[Admin] GET_USERS_ERROR';\n\nexport const ASSIGN_ROLE = '[Admin] ASSIGN_ROLE';\nexport const ASSIGN_ROLE_SUCCESS = '[Admin] ASSIGN_ROLE_SUCCESS';\nexport const ASSIGN_ROLE_ERROR = '[Admin] ASSIGN_ROLE_ERROR';\n\nexport const REMOVE_ROLE = '[Admin] REMOVE_ROLE';\nexport const REMOVE_ROLE_SUCCESS = '[Admin] REMOVE_ROLE_SUCCESS';\nexport const REMOVE_ROLE_ERROR = '[Admin] REMOVE_ROLE_ERROR';\n\nexport const CREATE_USER = '[Admin] CREATE_USER';\nexport const CREATE_USER_SUCCESS = '[Admin] CREATE_USER_SUCCESS';\nexport const CREATE_USER_ERROR = '[Admin] CREATE_USER_ERROR';\n\nexport const UPDATE_USER = '[Admin] UPDATE_USER';\nexport const UPDATE_USER_SUCCESS = '[Admin] UPDATE_USER_SUCCESS';\nexport const UPDATE_USER_ERROR = '[Admin] UPDATE_USER_ERROR';\n\nexport const CHANGE_LOADED = '[Admin] CHANGE_LOADED';\nexport const LOGOUT_ADMIN_STATE = '[Admin] LOGOUT_ADMIN_STATE';\n\n/**\n * -------------------------------------------------------------------------------------------------------\n * ------------------------------------------------------------------------------> USER MANAGEMENT ACTIONS\n * -------------------------------------------------------------------------------------------------------\n *\n *\n * ------------------------------------------------------------------------------> GET USERS\n */\nexport class GetUsers implements Action {\n  readonly type = GET_USERS;\n  constructor() {};\n}\n\nexport class GetUsersSuccess implements Action {\n  readonly type = GET_USERS_SUCCESS;\n  constructor(public payload: Users[]) {}\n}\n\nexport class GetUsersError implements Action {\n  readonly type = GET_USERS_ERROR;\n}\n\n/*\n* ------------------------------------------------------------------------------> ASSIGN ROLE\n*/\nexport class AssignRole implements Action {\n readonly type = ASSIGN_ROLE;\n constructor(public payload: { user_id: number, role_id: number }) {};\n}\n\nexport class AssignRoleSuccess implements Action {\n readonly type = ASSIGN_ROLE_SUCCESS;\n constructor(public payload: Users[]) {}\n}\n\nexport class AssignRoleError implements Action {\n readonly type = ASSIGN_ROLE_ERROR;\n}\n\n/*\n* ------------------------------------------------------------------------------> REMOVE ROLE\n*/\nexport class RemoveRole implements Action {\n readonly type = REMOVE_ROLE;\n constructor(public payload: { user_id: number, role_id: number }) {};\n}\n\nexport class RemoveRoleSuccess implements Action {\n readonly type = REMOVE_ROLE_SUCCESS;\n constructor(public payload: Users[]) {}\n}\n\nexport class RemovenRoleError implements Action {\n readonly type = REMOVE_ROLE_ERROR;\n}\n\n/*\n* ------------------------------------------------------------------------------> CREATE USER\n*/\nexport class CreateUser implements Action {\n  readonly type = CREATE_USER;\n  constructor(public payload: Users) {};\n }\n\n export class CreateUserSuccess implements Action {\n  readonly type = CREATE_USER_SUCCESS;\n  constructor(public payload: Users[]) {}\n }\n\n export class CreateUserError implements Action {\n  readonly type = CREATE_USER_ERROR;\n }\n\n /*\n * ------------------------------------------------------------------------------> UPDATE USER\n */\n export class UpdateUser implements Action {\n   readonly type = UPDATE_USER;\n   constructor(public payload: Users) {};\n  }\n\n  export class UpdateUserSuccess implements Action {\n   readonly type = UPDATE_USER_SUCCESS;\n   constructor(public payload: Users[]) {}\n  }\n\n  export class UpdateUserError implements Action {\n   readonly type = UPDATE_USER_ERROR;\n  }\n\n\n\n/**\n * --------------------------------------------------------------------------------------------\n * ------------------------------------------------------------------------------> MISC ACTIONS\n * --------------------------------------------------------------------------------------------\n */\nexport class LogoutAdminState implements Action {\n  readonly type = LOGOUT_ADMIN_STATE;\n}\n\nexport class UpdateLoaded implements Action {\n  readonly type = CHANGE_LOADED;\n  constructor(public payload: { isLoaded: boolean }) {}\n}\n\nexport type All = LogoutAdminState | UpdateLoaded;\n","\nimport {catchError, mergeMap,  map } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport { Observable ,  of } from 'rxjs';\nimport { Action } from '@ngrx/store';\n\n\n\n\nimport {Actions, Effect, ofType} from '@ngrx/effects';\n\nimport * as AdminActions from './admin.actions';\nimport { News } from '../../news/models/news';\nimport { UserService } from '../services/user.service';\n\n@Injectable()\nexport class AdminEffects {\n\n  constructor(\n    private actions$: Actions,\n    private userService: UserService\n  ) { }\n\n  //Effects go here\n  @Effect()\n  GetMyNews$: Observable<Action> = this.actions$.\n    pipe(\n      ofType<AdminActions.GetUsers>(AdminActions.GET_USERS),\n      mergeMap(action =>\n        this.userService.getUsers().pipe(\n        map((data) => {\n          //console.log(data);\n          return new AdminActions.GetUsersSuccess(data)\n        }),\n        catchError(() => of(new AdminActions.GetUsersError())),)\n      )\n    );\n\n  @Effect()\n  AssignRole$: Observable<Action> = this.actions$.\n    pipe(\n      ofType<AdminActions.AssignRole>(AdminActions.ASSIGN_ROLE),\n      mergeMap(action =>\n        this.userService.assignRole({ user_id: action.payload.user_id, role_id: action.payload.role_id }).pipe(\n        map((data) => {\n          console.log(data);\n          return new AdminActions.AssignRoleSuccess(data)\n        }),\n        catchError(() => of(new AdminActions.AssignRoleError())),)\n      )\n    );\n\n  @Effect()\n  RemoveRole$: Observable<Action> = this.actions$.\n    pipe(\n      ofType<AdminActions.RemoveRole>(AdminActions.REMOVE_ROLE),\n      mergeMap(action =>\n        this.userService.removeRole({ user_id: action.payload.user_id, role_id: action.payload.role_id }).pipe(\n        map((data) => {\n          console.log(data);\n          return new AdminActions.RemoveRoleSuccess(data)\n        }),\n        catchError(() => of(new AdminActions.RemovenRoleError())),)\n      )\n    );\n\n  @Effect()\n  CreateUser$: Observable<Action> = this.actions$.\n    pipe(\n      ofType<AdminActions.CreateUser>(AdminActions.CREATE_USER),\n      mergeMap(action =>\n        this.userService.createUser(action.payload).pipe(\n        map((data) => {\n          console.log(data);\n          return new AdminActions.CreateUserSuccess(data)\n        }),\n        catchError(() => of(new AdminActions.CreateUserError())),)\n      )\n    );\n\n  @Effect()\n  UpdateUser$: Observable<Action> = this.actions$.\n    pipe(\n      ofType<AdminActions.CreateUser>(AdminActions.UPDATE_USER),\n      mergeMap(action =>\n        this.userService.updateUser(action.payload).pipe(\n        map((data) => {\n          console.log(data);\n          return new AdminActions.UpdateUserSuccess(data)\n        }),\n        catchError(() => of(new AdminActions.UpdateUserError())),)\n      )\n    );\n\n}\n","import { News } from '../../news/models/news';\nimport { Action, createFeatureSelector, createSelector } from '@ngrx/store';\n\nimport * as AdminActions from './admin.actions';\nimport { ReviewNewsState, AdminState } from '../../store/app.state';\n\n\n\n\n\nexport const initialState: AdminState = {\n  isLoaded: false,\n  users: []\n};\n\nexport type Actions = AdminActions.All;\nexport interface ActionWithPayload<T> extends Action {\n  payload: T;\n}\n\nexport function reducer(state = initialState, action: ActionWithPayload<any>): AdminState {\n  switch (action.type) {\n\n    /**\n     * ---------------------------------------------------------------------------------------------------------------\n     * --------------------------------------------------------------------------------------> USER MANAGEMENT ACTIONS\n     * ---------------------------------------------------------------------------------------------------------------\n     */\n    /**\n     * --------------------------------------------------------------------------------------> GET USERS\n     */\n    case AdminActions.GET_USERS: {\n      return {\n        ...state,\n        isLoaded: false\n      }\n    }\n\n    case AdminActions.GET_USERS_SUCCESS: {\n      return {\n        ...state,\n        users: action.payload,\n        isLoaded: true\n      }\n    }\n\n    /**\n     * --------------------------------------------------------------------------------------> ASSIGN ROLE\n     */\n    case AdminActions.ASSIGN_ROLE: {\n      return {\n        ...state,\n        isLoaded: false\n      }\n    }\n\n    case AdminActions.ASSIGN_ROLE_SUCCESS: {\n      return {\n        ...state,\n        users: action.payload,\n        isLoaded: true\n      }\n    }\n\n    /**\n     * --------------------------------------------------------------------------------------> REMOVE ROLE\n     */\n    case AdminActions.REMOVE_ROLE: {\n      return {\n        ...state,\n        isLoaded: false\n      }\n    }\n\n    case AdminActions.REMOVE_ROLE_SUCCESS: {\n      return {\n        ...state,\n        users: action.payload,\n        isLoaded: true\n      }\n    }\n\n    /**\n     * --------------------------------------------------------------------------------------> CREATE USER\n     */\n    case AdminActions.CREATE_USER: {\n      return {\n        ...state,\n        isLoaded: false\n      }\n    }\n\n    case AdminActions.CREATE_USER_SUCCESS: {\n      return {\n        ...state,\n        users: action.payload,\n        isLoaded: true\n      }\n    }\n\n    /**\n     * --------------------------------------------------------------------------------------> UPDATE USER\n     */\n    case AdminActions.UPDATE_USER: {\n      return {\n        ...state,\n        isLoaded: false\n      }\n    }\n\n    case AdminActions.UPDATE_USER_SUCCESS: {\n      return {\n        ...state,\n        users: action.payload,\n        isLoaded: true\n      }\n    }\n\n\n\n    case AdminActions.GET_USERS_ERROR: {\n      return {\n        ...state,\n        isLoaded: true\n      }\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nexport const getAdminState = createFeatureSelector<AdminState>('Admin');\n","<div fxLayout=\"row\" fxLayoutAlign=\"center start\">\n    <div fxFlex.gt-md=\"100\" fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n      <mat-card class=\"mat-card-top\">\n        <mat-sidenav-container [ngClass]=\"{ 'side-panel-opened': sidePanelOpened, 'side-panel-closed': !sidePanelOpened }\">\n          <mat-sidenav #chatnav [mode]=\"isOver() ? 'over' : 'side'\" [opened]=\"!isOver()\" (open)=\"sidePanelOpened = true\"\n          (close)=\"sidePanelOpened = false\">\n            <mat-toolbar color=\"primary\" class=\"no-shadow\">\n              <div fxLayout=\"row\" fxFlex=\"100\" >\n                <span class=\"m-t-0 font-14\">\n                  <button mat-icon-button class=\"mr-1\"><mat-icon>contacts</mat-icon></button>\n                  Users\n                </span>\n              </div>\n              <button (click)=\"onAddUser()\" mat-mini-fab color=\"basic\" class=\"mr-1\" align=\"end\" matTooltip=\"Add User\" matTooltipPosition=\"below\" [disabled]=\"!checkMyRight('create-user')\">\n                <mat-icon>person_add</mat-icon>\n              </button>\n            </mat-toolbar>\n\n            <mat-nav-list *ngIf=\"users.length !== 0\">\n              <mat-list-item (click)=\"onSelect(user)\" *ngFor=\"let user of users\" [style.background-color]=\"user.email==currentUserEmail ? 'rgba(127, 255, 212, 0.2)' : 'rgba(255, 255, 255, 0)'\">\n\n                <mat-icon *ngIf=\"user.roles.length > 0 && (!checkRight('admin', user))\" color=\"basic\">face</mat-icon>\n                <mat-icon *ngIf=\"user.roles.length > 0 && (checkRight('news-editor', user)) || (checkRight('n-editor', user))\" color=\"primary\">account_circle</mat-icon>\n                <mat-icon *ngIf=\"user.roles.length <= 0\" class=\"label-light-warning\">error_outline</mat-icon>\n                <mat-icon *ngIf=\"checkRight('admin', user) && checkRight('create-user', user)\" color=\"warn\">security</mat-icon>\n                <mat-icon *ngIf=\"checkRight('admin', user) && (!checkRight('create-user', user))\" color=\"primary\">security</mat-icon>\n\n                <b matLine>{{user.name}}</b>\n                <p matLine class=\"text-muted\">{{user.email}}</p>\n              </mat-list-item>\n            </mat-nav-list>\n          </mat-sidenav>\n\n          <mat-toolbar class=\"bg-success no-shadow chat-right-panel\" color=\"warn\">\n            <div fxLayout=\"row\" fxFlex=\"100\" fxLayoutAlign=\"center center\">\n              <button (click)=\"chatnav.toggle()\" class=\"mr-1\" mat-icon-button>\n                <mat-icon>short_text</mat-icon>\n              </button>\n\n              <span class=\"top-avatar m-r-10\" *ngIf=\"selectedUser\">\n                  <img src=\"{{storagePath+'profiles/default.jpg'}}\" class=\"img-circle\" *ngIf=\"!selectedUser.profile\">\n                  <img src=\"{{storagePath+'profiles/user/'+selectedUser.profile.profilepic}}\" class=\"img-circle\" *ngIf=\"selectedUser.profile\">\n              </span>\n\n              <div fxFlex>\n                <div class=\"font-14\" *ngIf=\"selectedUser\">{{selectedUser.name}}</div>\n              </div>\n              <!-- <button [matMenuTriggerFor]=\"them\" mat-icon-button class=\"ml-1\">\n                <mat-icon>more_vert</mat-icon>\n              </button>\n              <mat-menu #them=\"matMenu\" x-position=\"before\">\n                <button mat-menu-item>Contact info</button>\n                <button mat-menu-item>Mute</button>\n                <button mat-menu-item>Delete chat</button>\n              </mat-menu> -->\n            </div>\n          </mat-toolbar>\n\n          <mat-card-content class=\"chat-middle-box\">\n            <div *ngIf=\"selectedUser\" style=\"min-height: 500px;\">\n              <!-- <code>{{selectedUser|json}}</code> -->\n              <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n\n\n                  <div fxFlex.gt-lg=\"100\" fxFlex.gt-md=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n                      <mat-card>\n                          <mat-tab-group>\n                              <!-- Tab 1 -->\n                              <mat-tab label=\"Profile\">\n                                  <mat-card-content>\n                                      <!-- ============================================================== -->\n                                      <!-- column -->\n                                      <!-- ============================================================== -->\n                                      <form class=\"basic-form\" #profileForm=\"ngForm\">\n                                        <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n                                            <!-- column -->\n                                            <div fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n                                              <mat-form-field>\n                                                <input matInput placeholder=\"Name\" required name=\"profileName\" [(ngModel)]=\"updateUser.name\" [disabled]=\"!checkMyRight('create-user')\">\n                                              </mat-form-field>\n                                            </div>\n                                            <!-- column -->\n                                            <div fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n                                              <mat-form-field>\n                                                <input matInput placeholder=\"Email\" required type=\"email\" name=\"profileEmail\" [(ngModel)]=\"updateUser.email\" [disabled]=\"selectedUser.email == currentUserEmail || !checkMyRight('create-user')\">\n                                              </mat-form-field>\n                                            </div>\n                                            <!-- column -->\n                                            <div fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n                                              <mat-form-field>\n                                                <input matInput placeholder=\"Password\" type=\"password\" name=\"profilePassword\" [(ngModel)]=\"updateUser.password\" [disabled]=\"!checkMyRight('create-user')\">\n                                              </mat-form-field>\n                                            </div>\n\n                                            <!-- debug -->\n                                            <!-- <div fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n                                              <code>{{updateUser|json}}</code>\n                                            </div> -->\n\n                                            <!-- column -->\n                                            <div fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n                                              <button mat-raised-button color=\"primary\" [disabled]=\"!profileForm.form.valid || !checkMyRight('create-user')\" (click)=\"onUpdateProfile()\">Update Profile</button>\n                                            </div>\n                                        </div>\n                                      </form>\n                                  </mat-card-content>\n                              </mat-tab>\n                              <!-- Tab 2 -->\n                              <mat-tab label=\"Activity\">\n                                  <mat-card-content>\n\n                                    <mat-card-subtitle>Last 200 Activity performed by {{selectedUser.name}}</mat-card-subtitle>\n\n                                    <div class=\"table-rasponsive\">\n\n                                        <div class=\"table\">\n                                          <div class=\"table-header\">\n                                            <div class=\"header__item column-log_id\">Log Id</div>\n                                            <div class=\"header__item column-log_name\">Log Name</div>\n                                            <div class=\"header__item column-description\">Description</div>\n                                            <div class=\"header__item column-subject\">Subject Type</div>\n                                            <div class=\"header__item column-date\">Log Date</div>\n                                          </div>\n                                          <div class=\"table-content\">\n                                            <div class=\"table-row\" *ngFor=\"let activity of selectedUser.activity\">\n                                              <div class=\"table-data column-log_id\">{{ activity.id }}</div>\n\n                                              <div class=\"table-data column-log_name\">{{ activity.log_name }}</div>\n\n                                              <div class=\"table-data column-description\" matTooltipPosition=\"below\">{{ activity.description }}</div>\n\n                                              <div class=\"table-data column-subject\" matTooltipPosition=\"below\">{{ activity.subject_type }}</div>\n\n                                              <div class=\"table-data column-date\">{{activity.created_at | date:'medium'}}</div>\n                                            </div>\n                                          </div>\n                                        </div>\n\n                                      </div>\n\n                                  </mat-card-content>\n                              </mat-tab>\n                              <!-- End Tab 2 -->\n                              <!-- Start Tab 3 -->\n                              <mat-tab label=\"Roles & Permissions\">\n                                <mat-card-content>\n                                    <!-- <code>{{selectedUser.roles|json}}</code> -->\n                                    <!-- <mat-card-subtitle>Last 100 Activity performed by {{selectedUser.name}}</mat-card-subtitle> -->\n\n                                    <div class=\"table-rasponsive\">\n\n                                        <div class=\"table\">\n                                          <div class=\"table-header\">\n                                            <div class=\"header__item column-role\">Role</div>\n                                            <div class=\"header__item column-name\">Role Name</div>\n                                            <div class=\"header__item column-detail\">Detail</div>\n                                            <div class=\"header__item column-permission\">Permission</div>\n                                            <div class=\"header__item column-actions\">Actions</div>\n                                          </div>\n                                          <div class=\"table-content\">\n                                            <div class=\"table-row\" *ngFor=\"let role of selectedUser.roles\">\n                                              <div class=\"table-data column-role\">{{ role.name }}</div>\n\n                                              <div class=\"table-data column-name\">{{ role.display_name }}</div>\n\n                                              <div class=\"table-data column-detail\" matTooltipPosition=\"below\">{{ role.description }}</div>\n\n                                              <div class=\"table-data column-permissions\" matTooltipPosition=\"below\">\n                                                <mat-chip-list>\n                                                  <mat-chip color=\"primary\" *ngFor=\"let perm of role.permissions\">{{perm.name}}</mat-chip>\n                                                </mat-chip-list>\n                                              </div>\n\n                                              <div class=\"table-data column-actions\">\n                                                  <button mat-icon-button color=\"warn\" (click)=\"onRemoveRole(role.id, selectedUser.id)\" matTooltip=\"Remove Role\" matTooltipPosition=\"below\" [disabled]=\"selectedUser.email == currentUserEmail || !checkMyRight('create-user')\">\n                                                    <mat-icon aria-label=\"Edit\">clear</mat-icon>\n                                                  </button>\n                                              </div>\n                                            </div>\n                                          </div>\n                                        </div>\n\n                                      </div>\n\n                                </mat-card-content>\n                              </mat-tab>\n                              <!-- End Tab 3 -->\n                          </mat-tab-group>\n                      </mat-card>\n                  </div>\n\n\n              </div>\n            </div>\n\n            <div *ngIf=\"!selectedUser\" style=\"min-height: 500px;\">\n            </div>\n          </mat-card-content>\n\n          <mat-card-actions class=\"chat-footer\">\n            <div align=\"end\">\n              <button mat-raised-button color=\"primary\" [disabled]=\"!selectedUser || !checkMyRight('create-user')\" (click)=\"onAddRole()\">Assign Role</button>\n              <!-- <button mat-raised-button color=\"primary\" (click)=\"onAddUser()\">Create User</button> -->\n              <!-- <button mat-raised-button color=\"warn\" [disabled]=\"!selectedNews\" (click)=\"rejectNews()\">Reject</button>\n              <button mat-raised-button color=\"primary\" [disabled]=\"!selectedNews\" (click)=\"approveNews(selectedNews)\">Approve</button> -->\n            </div>\n          </mat-card-actions>\n        </mat-sidenav-container>\n      </mat-card>\n    </div>\n  </div>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\n\nimport { Users } from '../models/user.model';\n\nimport { Store } from '@ngrx/store';\nimport {Actions, ofType} from '@ngrx/effects';\n\nimport * as AdminActions from '../store/admin.actions';\nimport { AssignRoleDialogComponent } from '../assign-role-dialog/assign-role-dialog.component';\nimport { AddUserDialogComponent } from '../add-user-dialog/add-user-dialog.component';\nimport { SessionService } from '../../shared/services/session.service';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { environment } from '../../../environments/environment';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.css']\n})\nexport class UserComponent implements OnInit, OnDestroy {\n\n  sidePanelOpened = true;\n  users: Users[] = [];\n  selectedUser: Users = null;\n  currentUserEmail: string;\n  destroySubject$: Subject<void> = new Subject();\n\n  updateUser: Users = null;\n\n  public storagePath: string;\n\n  constructor(\n    private store: Store<any>,\n    private updates$: Actions,\n    public dialog: MatDialog,\n    private sessionService: SessionService,\n    public snackBar: MatSnackBar\n  ) { }\n\n  ngOnInit() {\n    this.storagePath = environment.storageUrl;\n    this.store.dispatch(new AdminActions.GetUsers());\n\n    // update selected list selection\n    this.updates$\n    .pipe(\n      ofType(AdminActions.GET_USERS_SUCCESS),\n      takeUntil(this.destroySubject$)\n    )\n    .subscribe(() => {\n      let sub = this.store.select(adminStore => adminStore.Admin.users)\n      .pipe(takeUntil(this.destroySubject$))\n      .subscribe(userList => {\n        this.users = userList;\n      });\n    });\n\n    //get current user email\n    this.store.select(store => store.UserState.user.email)\n    //.take(1)\n    .pipe(takeUntil(this.destroySubject$))\n    .subscribe(email => this.currentUserEmail = email);\n  }\n\n  onAddRole() {\n    let dialogRef = this.dialog.open(AssignRoleDialogComponent, { width: '95%', height: '60%', maxHeight: '95%', data: this.selectedUser });\n\n    dialogRef.componentInstance.onAdd.subscribe((result: any) => {\n      this.updates$\n      .pipe(\n        ofType(AdminActions.ASSIGN_ROLE_SUCCESS),\n        takeUntil(this.destroySubject$)\n      )\n      .subscribe(() => {\n\n        this.openSnackBar('Role Added to User!');\n\n        this.store.select(store => store.Admin.users)\n        .pipe(takeUntil(this.destroySubject$))\n        .subscribe(users => {\n          users.forEach((user: Users) => {\n            if (user.id === result.user_id) {\n              this.selectedUser = user;\n            }\n          });\n        });\n\n      });\n    });\n  }\n\n\n  onRemoveRole(roleid: number, userid: number) {\n    this.store.dispatch(new AdminActions.RemoveRole({ user_id: this.selectedUser.id, role_id: roleid }));\n\n    this.updates$\n    .pipe(\n      ofType(AdminActions.REMOVE_ROLE_SUCCESS),\n      takeUntil(this.destroySubject$)\n    )\n    .subscribe(() => {\n\n      this.openSnackBar('Role Removed from User!');\n\n      this.store.select(store => store.Admin.users)\n      .pipe(takeUntil(this.destroySubject$))\n      .subscribe(users => {\n        users.forEach((user: Users) => {\n          if (user.id === userid) {\n            this.selectedUser = user;\n          }\n        });\n      });\n\n    });\n  }\n\n  onAddUser() {\n    let dialogRef = this.dialog.open(AddUserDialogComponent, { width: '40%', height: 'auto', maxHeight: '95%' });\n\n    dialogRef.componentInstance.onAdd.pipe(takeUntil(this.destroySubject$)).subscribe((result: any) => {\n      this.updates$\n      .pipe(\n        ofType(AdminActions.CREATE_USER_SUCCESS),\n        takeUntil(this.destroySubject$)\n      )\n      .subscribe(() => {\n\n        this.openSnackBar('User Created!');\n\n        // this.store.select(store => store.Admin.users)\n        // .subscribe(users => {\n        //   users.forEach((user: Users) => {\n        //     if (user.id === this.selectedUser.id) {\n        //       this.selectedUser = user;\n        //     }\n        //   });\n        // });\n\n      });\n    });\n  }\n\n\n  checkRight(role: string, user: Users) {\n    let re = false;\n    user.roles.forEach(urole => {\n      if(urole.name === role){\n        re = true;\n      }\n    });\n\n    return re;\n  }\n\n  isOver(): boolean {\n    return window.matchMedia(`(max-width: 960px)`).matches;\n  }\n\n  onSelect(user: Users): void {\n    this.selectedUser = user;\n\n    this.updateUser = new Users(this.selectedUser.name, this.selectedUser.email, null);\n    this.updateUser.id = this.selectedUser.id;\n  }\n\n  onUpdateProfile() {\n    this.store.dispatch(new AdminActions.UpdateUser(this.updateUser));\n\n    // update selected list selection\n    this.updates$\n    .pipe(\n      ofType(AdminActions.UPDATE_USER_SUCCESS),\n      takeUntil(this.destroySubject$)\n    )\n    .subscribe(() => {\n      //show notification\n      this.openSnackBar('User Data Updated!');\n\n      let sub = this.store.select(adminStore => adminStore.Admin.users)\n      .subscribe(userList => {\n        this.users = userList;\n      });\n    });\n  }\n\n  openSnackBar(message: string, action: string= 'close') {\n    this.snackBar.open(message, action, {\n      duration: 1000,\n    });\n  }\n\n  ngOnDestroy() {\n    this.destroySubject$.next();\n  }\n\n\n  checkMyRight(right?: string) {\n    if (this.sessionService.checkRole('ticker-editor')) {\n      return true;\n    } else if (this.sessionService.checkRole('news-editor')) {\n      return true;\n    }\n    return false;\n  }\n}\n"]}