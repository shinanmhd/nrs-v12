{"version":3,"sources":["./node_modules/rxjs-compat/Observable.js","./node_modules/rxjs-compat/Subject.js","./node_modules/rxjs-compat/add/operator/catch.js","./node_modules/rxjs-compat/add/operator/map.js","./node_modules/rxjs-compat/add/operator/mergeMap.js","./node_modules/rxjs-compat/observable/of.js","./node_modules/rxjs-compat/operator/catch.js","./node_modules/rxjs-compat/operator/map.js","./node_modules/rxjs-compat/operator/mergeMap.js","./node_modules/rxjs/Observable.js","./node_modules/rxjs/Subject.js","./node_modules/rxjs/_esm2015/index.js","./node_modules/rxjs/_esm2015/internal/AsyncSubject.js","./node_modules/rxjs/_esm2015/internal/observable/bindCallback.js","./node_modules/rxjs/_esm2015/internal/observable/bindNodeCallback.js","./node_modules/rxjs/_esm2015/internal/observable/fromEventPattern.js","./node_modules/rxjs/_esm2015/internal/observable/generate.js","./node_modules/rxjs/_esm2015/internal/observable/iif.js","./node_modules/rxjs/_esm2015/internal/observable/never.js","./node_modules/rxjs/_esm2015/internal/observable/onErrorResumeNext.js","./node_modules/rxjs/_esm2015/internal/observable/pairs.js","./node_modules/rxjs/_esm2015/internal/observable/partition.js","./node_modules/rxjs/_esm2015/internal/observable/race.js","./node_modules/rxjs/_esm2015/internal/observable/range.js","./node_modules/rxjs/_esm2015/internal/observable/using.js","./node_modules/rxjs/_esm2015/internal/observable/zip.js","./node_modules/rxjs/_esm2015/internal/operators/buffer.js","./node_modules/rxjs/_esm2015/internal/operators/bufferCount.js","./node_modules/rxjs/_esm2015/internal/operators/bufferTime.js","./node_modules/rxjs/_esm2015/internal/operators/bufferToggle.js","./node_modules/rxjs/_esm2015/internal/operators/bufferWhen.js","./node_modules/rxjs/_esm2015/internal/operators/combineAll.js","./node_modules/rxjs/_esm2015/internal/operators/combineLatest.js","./node_modules/rxjs/_esm2015/internal/operators/concat.js","./node_modules/rxjs/_esm2015/internal/operators/concatMapTo.js","./node_modules/rxjs/_esm2015/internal/operators/debounce.js","./node_modules/rxjs/_esm2015/internal/operators/delayWhen.js","./node_modules/rxjs/_esm2015/internal/operators/distinct.js","./node_modules/rxjs/_esm2015/internal/operators/distinctUntilKeyChanged.js","./node_modules/rxjs/_esm2015/internal/operators/elementAt.js","./node_modules/rxjs/_esm2015/internal/operators/endWith.js","./node_modules/rxjs/_esm2015/internal/operators/every.js","./node_modules/rxjs/_esm2015/internal/operators/exhaust.js","./node_modules/rxjs/_esm2015/internal/operators/expand.js","./node_modules/rxjs/_esm2015/internal/operators/find.js","./node_modules/rxjs/_esm2015/internal/operators/findIndex.js","./node_modules/rxjs/_esm2015/internal/operators/isEmpty.js","./node_modules/rxjs/_esm2015/internal/operators/max.js","./node_modules/rxjs/_esm2015/internal/operators/merge.js","./node_modules/rxjs/_esm2015/internal/operators/mergeMapTo.js","./node_modules/rxjs/_esm2015/internal/operators/mergeScan.js","./node_modules/rxjs/_esm2015/internal/operators/min.js","./node_modules/rxjs/_esm2015/internal/operators/onErrorResumeNext.js","./node_modules/rxjs/_esm2015/internal/operators/partition.js","./node_modules/rxjs/_esm2015/internal/operators/publish.js","./node_modules/rxjs/_esm2015/internal/operators/publishBehavior.js","./node_modules/rxjs/_esm2015/internal/operators/publishLast.js","./node_modules/rxjs/_esm2015/internal/operators/publishReplay.js","./node_modules/rxjs/_esm2015/internal/operators/race.js","./node_modules/rxjs/_esm2015/internal/operators/reduce.js","./node_modules/rxjs/_esm2015/internal/operators/repeat.js","./node_modules/rxjs/_esm2015/internal/operators/repeatWhen.js","./node_modules/rxjs/_esm2015/internal/operators/retry.js","./node_modules/rxjs/_esm2015/internal/operators/retryWhen.js","./node_modules/rxjs/_esm2015/internal/operators/sample.js","./node_modules/rxjs/_esm2015/internal/operators/sampleTime.js","./node_modules/rxjs/_esm2015/internal/operators/sequenceEqual.js","./node_modules/rxjs/_esm2015/internal/operators/single.js","./node_modules/rxjs/_esm2015/internal/operators/skipLast.js","./node_modules/rxjs/_esm2015/internal/operators/skipUntil.js","./node_modules/rxjs/_esm2015/internal/operators/skipWhile.js","./node_modules/rxjs/_esm2015/internal/operators/switchAll.js","./node_modules/rxjs/_esm2015/internal/operators/throttle.js","./node_modules/rxjs/_esm2015/internal/operators/throttleTime.js","./node_modules/rxjs/_esm2015/internal/operators/timeInterval.js","./node_modules/rxjs/_esm2015/internal/operators/timestamp.js","./node_modules/rxjs/_esm2015/internal/operators/toArray.js","./node_modules/rxjs/_esm2015/internal/operators/window.js","./node_modules/rxjs/_esm2015/internal/operators/windowCount.js","./node_modules/rxjs/_esm2015/internal/operators/windowTime.js","./node_modules/rxjs/_esm2015/internal/operators/windowToggle.js","./node_modules/rxjs/_esm2015/internal/operators/windowWhen.js","./node_modules/rxjs/_esm2015/internal/operators/zip.js","./node_modules/rxjs/_esm2015/internal/operators/zipAll.js","./node_modules/rxjs/_esm2015/internal/scheduler/VirtualTimeScheduler.js","./node_modules/rxjs/_esm2015/internal/util/not.js","./node_modules/rxjs/_esm2015/operators/index.js","./node_modules/rxjs/add/operator/catch.js","./node_modules/rxjs/add/operator/map.js","./node_modules/rxjs/add/operator/mergeMap.js","./node_modules/rxjs/observable/of.js","./src/app/control/cg-text/cg-text.component.ts","./src/app/control/cg-text/cg-text.component.html","./src/app/control/control.module.ts","./src/app/control/control.routing.ts","./src/app/control/news-cg/news-cg.component.ts","./src/app/control/news-cg/news-cg.component.html","./src/app/control/onair/onair.component.ts","./src/app/control/onair/onair.component.html","./src/app/control/services/control.service.ts","./src/app/control/services/onair.service.ts","./src/app/control/slide-data-dialog/slide-data-dialog.component.ts","./src/app/control/slide-data-dialog/slide-data-dialog.component.html","./src/app/control/sms/sms.component.ts","./src/app/control/sms/sms.component.html","./src/app/control/store/control.actions.ts","./src/app/control/store/control.effects.ts","./src/app/control/store/control.reducer.ts","./src/app/control/ticker/ticker.component.ts","./src/app/control/ticker/ticker.component.html"],"names":[],"mappings":";;;;;;;;;AAAa;AACb,8CAA6C,CAAC,cAAc,EAAC;AAC7D,aAAa,mBAAO,CAAC,eAAM;AAC3B,kBAAkB;AAClB,sC;;;;;;;;;;;ACJa;AACb,8CAA6C,CAAC,cAAc,EAAC;AAC7D,aAAa,mBAAO,CAAC,eAAM;AAC3B,eAAe;AACf,mC;;;;;;;;;;;ACJa;AACb,8CAA6C,CAAC,cAAc,EAAC;AAC7D,aAAa,mBAAO,CAAC,eAAM;AAC3B,cAAc,mBAAO,CAAC,iCAAsB;AAC5C;AACA;AACA,iC;;;;;;;;;;;ACNa;AACb,8CAA6C,CAAC,cAAc,EAAC;AAC7D,aAAa,mBAAO,CAAC,eAAM;AAC3B,YAAY,mBAAO,CAAC,+BAAoB;AACxC;AACA,+B;;;;;;;;;;;ACLa;AACb,8CAA6C,CAAC,cAAc,EAAC;AAC7D,aAAa,mBAAO,CAAC,eAAM;AAC3B,iBAAiB,mBAAO,CAAC,oCAAyB;AAClD;AACA;AACA,oC;;;;;;;;;;;ACNa;AACb,8CAA6C,CAAC,cAAc,EAAC;AAC7D,aAAa,mBAAO,CAAC,eAAM;AAC3B,UAAU;AACV,8B;;;;;;;;;;;ACJa;AACb,8CAA6C,CAAC,cAAc,EAAC;AAC7D,kBAAkB,mBAAO,CAAC,2BAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,iC;;;;;;;;;;;AClEa;AACb,8CAA6C,CAAC,cAAc,EAAC;AAC7D,kBAAkB,mBAAO,CAAC,2BAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA,WAAW,qCAAqC;AAChD;AACA;AACA;AACA,WAAW,IAAI;AACf;AACA,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,+B;;;;;;;;;;;ACxCa;AACb,8CAA6C,CAAC,cAAc,EAAC;AAC7D,kBAAkB,mBAAO,CAAC,2BAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,oDAAoD;AAC/D;AACA;AACA,WAAW,OAAO;AAClB;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,uCAAuC;AACvE;AACA;AACA,gBAAgB;AAChB,oC;;;;;;;;;;;AC1Da;AACb;AACA;AACA;AACA,8CAA6C,CAAC,cAAc,EAAC;AAC7D,SAAS,mBAAO,CAAC,mCAAwB;AACzC,sC;;;;;;;;;;;ACNa;AACb;AACA;AACA;AACA,8CAA6C,CAAC,cAAc,EAAC;AAC7D,SAAS,mBAAO,CAAC,8BAAqB;AACtC,mC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNmD;AACiC;AACnB;AACP;AACb;AACgB;AACJ;AACF;AACS;AACG;AACA;AAC2B;AACE;AAC/C;AACM;AACJ;AACsB;AAC7B;AACA;AACQ;AACQ;AACsB;AAC1B;AAC0B;AACR;AACd;AACM;AACQ;AACN;AACd;AACF;AACA;AACM;AACR;AACU;AACc;AAChB;AACV;AACU;AACN;AACA;AACN;AAC8B;AACxB;AACQ;AACV;AACE;AACU;AACV;AACA;AACJ;AACW;AACP;AACA;AACT;AAC3C,iC;;;;;;;;;;;;;;;;;ACvDoC;AACU;AACvC,2BAA2B,6CAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6DAAkB;AACrC;AACA;AACA;AACA;AACA,mBAAmB,6DAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;;;;;;;;;;;;;;;ACxC2C;AACI;AACR;AACiB;AACd;AACQ;AAC3C;AACP;AACA,YAAY,8DAAW;AACvB;AACA;AACA;AACA,oFAAoF,mDAAG,WAAW,sDAAO;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mDAAU;AAC7B;AACA;AACA,kCAAkC,uDAAY;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oEAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW,2BAA2B;AACtC,WAAW,mCAAmC;AAC9C,SAAS,UAAU;AACnB;AACA,uCAAuC,uDAAY;AACnD;AACA;AACA,0DAA0D,iBAAiB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B;AACA;AACA,wC;;;;;;;;;;;;;;;;;;;;;ACpF2C;AACI;AACR;AACiB;AACN;AACR;AACnC;AACP;AACA,YAAY,8DAAW;AACvB;AACA;AACA;AACA,wFAAwF,mDAAG,SAAS,sDAAO;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mDAAU;AAC7B,mBAAmB,UAAU;AAC7B,iBAAiB,UAAU;AAC3B;AACA;AACA,mDAAmD,uDAAY;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oEAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,8BAA8B;AACtF;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW,8BAA8B;AACzC,WAAW,gCAAgC;AAC3C;AACA;AACA,uCAAuC,uDAAY;AACnD;AACA;AACA;AACA,+DAA+D,eAAe;AAC9E;AACA;AACA;AACA,8DAA8D,iBAAiB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,eAAe;AAC1E;AACA;AACA;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B;AACA;AACA,4C;;;;;;;;;;;;;;;;;;;AC5F2C;AACD;AACM;AACT;AAChC;AACP;AACA,gEAAgE,mDAAG,SAAS,sDAAO;AACnF;AACA,eAAe,mDAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,4DAAU;AACvB;AACA;AACA;AACA,KAAK;AACL;AACA,4C;;;;;;;;;;;;;;;;;;ACxB2C;AACC;AACM;AAC3C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,oDAAQ;AAC3D;AACA;AACA,yDAAyD,8DAAW;AACpE;AACA,yBAAyB,oDAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mDAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA,WAAW,wBAAwB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;;;;;;;;;;;AC3HgC;AACA;AACzB,qCAAqC,yCAAK,gBAAgB,yCAAK;AACtE,WAAW,6CAAK;AAChB;AACA,+B;;;;;;;;;;;;;;;;;;ACL2C;AACP;AAC7B,kBAAkB,mDAAU,CAAC,4CAAI;AACjC;AACP;AACA;AACA,iC;;;;;;;;;;;;;;;;;;;ACN2C;AACb;AACY;AACV;AACzB;AACP;AACA,eAAe,yCAAK;AACpB;AACA;AACA,gCAAgC,sDAAO;AACvC;AACA;AACA,eAAe,mDAAU;AACzB;AACA,eAAe,2CAAI;AACnB,yBAAyB,wBAAwB,EAAE;AACnD;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,6C;;;;;;;;;;;;;;;;;;ACrB2C;AACI;AACxC;AACP;AACA,mBAAmB,mDAAU;AAC7B;AACA,2BAA2B,uCAAuC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB,mDAAU;AAC7B;AACA,qCAAqC,uDAAY;AACjD,8DAA8D,gDAAgD;AAC9G;AACA,SAAS;AACT;AACA;AACO;AACP,WAAW,6CAA6C;AACxD;AACA;AACA;AACA;AACA,4CAA4C,wDAAwD;AACpG;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;;;;;;;;;;;ACrCkC;AACgB;AACL;AACF;AACpC;AACP;AACA,QAAQ,yDAAM,yBAAyB,mDAAU,CAAC,8DAAW;AAC7D,QAAQ,yDAAM,CAAC,8CAAG,0BAA0B,mDAAU,CAAC,8DAAW;AAClE;AACA;AACA,qC;;;;;;;;;;;;;;;;;;;;;ACV0C;AACF;AACa;AACS;AACvD;AACP;AACA,YAAY,sDAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qDAAS;AACpB;AACO;AACP;AACA;AACA;AACA;AACO,6BAA6B,6DAAe;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2BAA2B;AACtD;AACA,qCAAqC,0EAAiB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+BAA+B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gC;;;;;;;;;;;;;;;;;AC/D2C;AACpC;AACP,eAAe,mDAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;AACO;AACP,WAAW,kCAAkC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;;;;;;;;;;AC3C2C;AACb;AACE;AACzB;AACP,eAAe,mDAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,2CAAI,WAAW,yCAAK;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,iC;;;;;;;;;;;;;;;;;;;;;;AC/BwC;AACE;AACC;AACkC;AACoB;AAC1F;AACP;AACA;AACA;AACA;AACA,WAAW,qDAAS;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO,4BAA4B,mDAAU;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sDAAO;AACnB;AACA;AACA,8BAA8B,+DAAe;AAC7C,oDAAoD,+DAAe;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,+DAAe;AACpB;AACA;AACA;AACA;AACA;AACA,kCAAkC,+BAA+B,IAAI;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,kEAAqB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,+DAAe;AACpB;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAc,sBAAsB,kEAAqB;AACxE;AACA;AACA,+B;;;;;;;;;;;;;;;;ACpMiG;AAC1F;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kEAAqB;AACpD;AACA;AACA;AACA,iBAAiB,+DAAc,sBAAsB,kEAAqB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;;;;;;;;;;AC7B2C;AACpC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mDAAU;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,mDAAU;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAA+C;AAC9D;AACA;AACA;AACA;AACA,oCAAoC,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uC;;;;;;;;;;;;;;;;;;AC7E2C;AACA;AACO;AAC3C;AACP;AACA,oBAAoB,mDAAK;AACzB,QAAQ,8DAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mDAAU;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA,gCAAgC;AAChC,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,gEAAgE;AAC3E;AACA;AACA;AACA,sGAAsG,sBAAsB;AAC5H;AACA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC;AACA;AACA,sC;;;;;;;;;;;;;;;;;;AC5I+C;AACe;AACT;AAC9C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,6DAAe;AACpD;AACA;AACA;AACA;AACA,iBAAiB,0EAAiB;AAClC;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,uDAAY;AAC7C,yBAAyB;AACzB;AACA,kCAAkC,0EAAiB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;;;;;;;;;;;ACnG+C;AACkD;AAC1F;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kEAAqB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,sBAAsB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA,kCAAkC,uDAAY;AAC9C;AACA;AACA;AACA,gCAAgC,+DAAc,sBAAsB,kEAAqB;AACzF;AACA;AACA;AACA,sC;;;;;;;;;;;;;;;;AC1EoE;AAC7D;AACP,uCAAuC,4EAAqB;AAC5D;AACA,sC;;;;;;;;;;;;;;;;;;ACJ0C;AAC0B;AAC1B;AAC1C;AACO;AACP;AACA;AACA;AACA;AACA,oCAAoC,sDAAO;AAC3C;AACA;AACA,wCAAwC,sDAAI,gCAAgC,4EAAqB;AACjG;AACA,yC;;;;;;;;;;;;;;;;ACd8D;AACvD;AACP,wCAAwC,0DAAY;AACpD;AACA,kC;;;;;;;;;;;;;;;;ACJwC;AACjC;AACP,WAAW,qDAAS;AACpB;AACA,uC;;;;;;;;;;;;;;;;ACJiG;AAC1F;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,kEAAqB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+DAAc,eAAe,kEAAqB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;;;;;;;;;;;;;ACnE2C;AACA;AACU;AACS;AACvD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,6DAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,0EAAiB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,mDAAU;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,mDAAU;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;;;;;;;ACrHiG;AAC1F;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,iCAAiC,kEAAqB;AAC7D;AACA;AACA;AACA;AACA;AACA,qBAAqB,+DAAc,cAAc,kEAAqB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;;;;;;;;;;ACxD8D;AACvD;AACP,WAAW,2EAAoB;AAC/B;AACA,mD;;;;;;;;;;;;;;;;;;;;ACJ0E;AACxC;AACY;AACI;AACpB;AACvB;AACP;AACA,kBAAkB,kFAAuB;AACzC;AACA;AACA,mCAAmC,+CAAM,yBAAyB,2CAAI;AACtE,UAAU,+DAAc;AACxB,UAAU,2DAAY,WAAW,kFAAuB;AACxD;AACA,qC;;;;;;;;;;;;;;;;;ACd8C;AACR;AAC/B;AACP,uBAAuB,0DAAM,SAAS,kDAAE;AACxC;AACA,mC;;;;;;;;;;;;;;;;ACL2C;AACpC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,mDAAU;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;;;;;;;;AC5CiG;AAC1F;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,kEAAqB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+DAAc,YAAY,kEAAqB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mC;;;;;;;;;;;;;;;;;;AClCiG;AAC1F;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,+BAA+B,kEAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mCAAmC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,UAAU;AACjC;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+DAAc,aAAa,kEAAqB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;;;;;;;;;;;;ACvF2C;AACpC;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kCAAkC,mDAAU;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gC;;;;;;;;;;;;;;;;AClDsD;AAC/C;AACP,uCAAuC,8DAAiB;AACxD;AACA,qC;;;;;;;;;;;;;;;;ACJ2C;AACpC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mDAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mC;;;;;;;;;;;;;;;;ACzBkC;AAC3B;AACP;AACA;AACA;AACA,WAAW,+CAAM;AACjB;AACA,+B;;;;;;;;;;;;;;;;ACP2D;AACpD;AACP,wCAAwC,wDAAW;AACnD;AACA,iC;;;;;;;;;;;;;;;;ACJsC;AAC/B;AACP;AACA,eAAe,mDAAQ;AACvB;AACA;AACA;AACA;AACA,WAAW,mDAAQ;AACnB;AACA,sC;;;;;;;;;;;;;;;;;;ACViG;AAC1F;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kCAAkC,kEAAqB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,kEAAqB;AACzD;AACA;AACA,kCAAkC,+DAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;;;;;;ACpFkC;AAC3B;AACP;AACA;AACA;AACA,WAAW,+CAAM;AACjB;AACA,+B;;;;;;;;;;;;;;;;;;;ACP0C;AACA;AACuD;AAC1F;AACP,oCAAoC,sDAAO;AAC3C;AACA;AACA;AACA;AACO;AACP;AACA,oCAAoC,sDAAO;AAC3C;AACA;AACA;AACA,WAAW,sDAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,kEAAqB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,kEAAqB;AAC7D;AACA;AACA,sCAAsC,+DAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6C;;;;;;;;;;;;;;;;;AC7DkC;AACA;AAC3B;AACP;AACA,QAAQ,+CAAM;AACd,QAAQ,+CAAM,CAAC,8CAAG;AAClB;AACA;AACA,qC;;;;;;;;;;;;;;;;;ACRqC;AACG;AACjC;AACP;AACA,QAAQ,qDAAS,WAAW,6CAAO;AACnC,QAAQ,qDAAS,KAAK,6CAAO;AAC7B;AACA,mC;;;;;;;;;;;;;;;;;ACPqD;AACb;AACjC;AACP,uBAAuB,qDAAS,KAAK,6DAAe;AACpD;AACA,2C;;;;;;;;;;;;;;;;;ACL+C;AACP;AACjC;AACP,uBAAuB,qDAAS,KAAK,uDAAY;AACjD;AACA,uC;;;;;;;;;;;;;;;;;ACLiD;AACT;AACjC;AACP;AACA;AACA;AACA;AACA,wBAAwB,yDAAa;AACrC,uBAAuB,qDAAS;AAChC;AACA,yC;;;;;;;;;;;;;;;;;ACV0C;AACc;AACjD;AACP;AACA,wCAAwC,sDAAO;AAC/C;AACA;AACA,gCAAgC,sDAAU;AAC1C;AACA;AACA,gC;;;;;;;;;;;;;;;;;;;ACV8B;AACQ;AACY;AACd;AAC7B;AACP;AACA;AACA,mBAAmB,gDAAI,CAAC,2CAAI,qBAAqB,mDAAQ,KAAK,+DAAc;AAC5E;AACA;AACA;AACA,eAAe,gDAAI,CAAC,2CAAI,6DAA6D,mDAAQ;AAC7F;AACA;AACA,kC;;;;;;;;;;;;;;;;;ACd2C;AACC;AACrC;AACP;AACA;AACA,mBAAmB,wDAAK;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mDAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;;;;;;;;;;;AC3CqC;AAC4D;AAC1F;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kEAAqB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qCAAqC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,6CAAO;AACxC;AACA;AACA,mBAAmB,WAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,+DAAc,cAAc,kEAAqB;AACpF;AACA;AACA,sC;;;;;;;;;;;;;;;;AC3E2C;AACpC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,mDAAU;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;;;;;;;;;AChCqC;AAC4D;AAC1F;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,kEAAqB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,6CAAO;AACpC;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA,sCAAsC,+DAAc,cAAc,kEAAqB;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8BAA8B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;;;;;;ACnEiG;AAC1F;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,+DAAc,oBAAoB,kEAAqB;AAChF;AACA;AACA;AACA,+BAA+B,kEAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;;;;;;;;;;;ACrC2C;AACA;AACpC,wCAAwC,mDAAK;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mDAAU;AAC7C;AACA;AACA;AACA;AACA;AACA,mEAAmE,2BAA2B;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,qBAAqB;AAC9B;AACA;AACA;AACA,sC;;;;;;;;;;;;;;;;;;ACtC2C;AACpC;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,sCAAsC,mDAAU;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,mDAAU;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yC;;;;;;;;;;;;;;;;;AClG2C;AACK;AACzC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mDAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,wDAAU;AAC5C;AACA;AACA;AACA,kC;;;;;;;;;;;;;;;;;AC7D2C;AAC+B;AACnE;AACP;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kFAAuB;AAC7C;AACA;AACA;AACA;AACA,wCAAwC,mDAAU;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mDAAU;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;;;;;;;;;;AC3CiG;AAC1F;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,kEAAqB;AACvD;AACA;AACA;AACA,oCAAoC,kEAAqB;AACzD;AACA;AACA,kCAAkC,+DAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;;;;;;ACvC2C;AACpC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,mDAAU;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;;;;;;;ACtCwC;AACI;AACrC;AACP,WAAW,qDAAS,CAAC,oDAAQ;AAC7B;AACA,qC;;;;;;;;;;;;;;;;;ACLiG;AAC1F;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,kEAAqB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,+DAAc,eAAe,kEAAqB;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;;;;;;;;;;;;AChF2C;AACA;AACQ;AAC5C,4CAA4C,mDAAK,WAAW,4DAAqB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,mDAAU;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4FAA4F,mBAAmB;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB;AACA;AACA,wC;;;;;;;;;;;;;;;;;;;;ACxE2C;AACb;AACc;AAChB;AACrB,kCAAkC,mDAAK;AAC9C,uBAAuB,wDAAK;AAC5B,2BAA2B,2CAAI,GAAG,UAAU,cAAc,iDAAiD,IAAI,8DAA8D,GAAG,yCAAG,GAAG,uBAAuB;AAC7M,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;;;;;;;;;;;;ACf2C;AACf;AACrB,+BAA+B,mDAAK;AAC3C,WAAW,yCAAG;AACd;AACO;AACP;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;;;;;;ACXkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,+CAAM;AACjB;AACA,mC;;;;;;;;;;;;;;;;;ACXqC;AAC4D;AAC1F;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+DAAc,4BAA4B,kEAAqB;AAChG;AACA;AACA;AACA;AACA,+BAA+B,kEAAqB;AACpD;AACA;AACA,0BAA0B,6CAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,6CAAO;AACnD;AACA;AACA;AACA,kC;;;;;;;;;;;;;;;;;AC3D2C;AACN;AAC9B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mDAAU;AAC9C;AACA;AACA;AACA;AACA;AACA,4BAA4B,6CAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6CAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uC;;;;;;;;;;;;;;;;;;;;ACpEqC;AACM;AACA;AACG;AACI;AAC3C;AACP,oBAAoB,mDAAK;AACzB;AACA;AACA,QAAQ,8DAAW;AACnB;AACA;AACA,QAAQ,8DAAW;AACnB;AACA;AACA,aAAa,0DAAS;AACtB;AACA;AACA,QAAQ,8DAAW;AACnB;AACA;AACA,aAAa,0DAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,6CAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mDAAU;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,mCAAmC;AACnC;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qCAAqC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,gEAAgE;AAC3E;AACA;AACA,mBAAmB;AACnB,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,WAAW,8BAA8B;AACzC;AACA;AACA;AACA;AACA;AACA,sC;;;;;;;;;;;;;;;;;;;AC7IqC;AACU;AACM;AACS;AACvD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,6DAAe;AACpD;AACA;AACA;AACA;AACA;AACA,yCAAyC,0EAAiB;AAC1D;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA,+BAA+B,6CAAO;AACtC,qCAAqC,uDAAY;AACjD,6BAA6B;AAC7B;AACA,sCAAsC,0EAAiB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA,eAAe,uBAAuB;AACtC;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;;;;;;;;;;;;AC1HqC;AACgB;AACS;AACvD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6DAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,6CAAO;AAChD;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,0EAAiB;AAC7D;AACA;AACA,sC;;;;;;;;;;;;;;;;AC1EqD;AAC9C;AACP;AACA,gCAAgC,oDAAS;AACzC;AACA;AACA,+B;;;;;;;;;;;;;;;;ACNgD;AACzC;AACP,uCAAuC,wDAAW;AAClD;AACA,kC;;;;;;;;;;;;;;;;;;ACJ4C;AACM;AAC3C,mCAAmC,2DAAc;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,4BAA4B,qDAAW;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gD;;;;;;;;;;;;;;;ACjFO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","file":"src_app_control_control_module_ts-es2015.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar rxjs_1 = require(\"rxjs\");\nexports.Observable = rxjs_1.Observable;\n//# sourceMappingURL=Observable.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar rxjs_1 = require(\"rxjs\");\nexports.Subject = rxjs_1.Subject;\n//# sourceMappingURL=Subject.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar rxjs_1 = require(\"rxjs\");\nvar catch_1 = require(\"../../operator/catch\");\nrxjs_1.Observable.prototype.catch = catch_1._catch;\nrxjs_1.Observable.prototype._catch = catch_1._catch;\n//# sourceMappingURL=catch.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar rxjs_1 = require(\"rxjs\");\nvar map_1 = require(\"../../operator/map\");\nrxjs_1.Observable.prototype.map = map_1.map;\n//# sourceMappingURL=map.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar rxjs_1 = require(\"rxjs\");\nvar mergeMap_1 = require(\"../../operator/mergeMap\");\nrxjs_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;\nrxjs_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;\n//# sourceMappingURL=mergeMap.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar rxjs_1 = require(\"rxjs\");\nexports.of = rxjs_1.of;\n//# sourceMappingURL=of.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar operators_1 = require(\"rxjs/operators\");\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nfunction _catch(selector) {\n    return operators_1.catchError(selector)(this);\n}\nexports._catch = _catch;\n//# sourceMappingURL=catch.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar operators_1 = require(\"rxjs/operators\");\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return operators_1.map(project, thisArg)(this);\n}\nexports.map = map;\n//# sourceMappingURL=map.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar operators_1 = require(\"rxjs/operators\");\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nfunction mergeMap(project, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return operators_1.mergeMap(project, concurrent)(this);\n}\nexports.mergeMap = mergeMap;\n//# sourceMappingURL=mergeMap.js.map","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"rxjs-compat/Observable\"));\n//# sourceMappingURL=Observable.js.map","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"rxjs-compat/Subject\"));\n//# sourceMappingURL=Subject.js.map","export { Observable } from './internal/Observable';\nexport { ConnectableObservable } from './internal/observable/ConnectableObservable';\nexport { GroupedObservable } from './internal/operators/groupBy';\nexport { observable } from './internal/symbol/observable';\nexport { Subject } from './internal/Subject';\nexport { BehaviorSubject } from './internal/BehaviorSubject';\nexport { ReplaySubject } from './internal/ReplaySubject';\nexport { AsyncSubject } from './internal/AsyncSubject';\nexport { asap, asapScheduler } from './internal/scheduler/asap';\nexport { async, asyncScheduler } from './internal/scheduler/async';\nexport { queue, queueScheduler } from './internal/scheduler/queue';\nexport { animationFrame, animationFrameScheduler } from './internal/scheduler/animationFrame';\nexport { VirtualTimeScheduler, VirtualAction } from './internal/scheduler/VirtualTimeScheduler';\nexport { Scheduler } from './internal/Scheduler';\nexport { Subscription } from './internal/Subscription';\nexport { Subscriber } from './internal/Subscriber';\nexport { Notification, NotificationKind } from './internal/Notification';\nexport { pipe } from './internal/util/pipe';\nexport { noop } from './internal/util/noop';\nexport { identity } from './internal/util/identity';\nexport { isObservable } from './internal/util/isObservable';\nexport { ArgumentOutOfRangeError } from './internal/util/ArgumentOutOfRangeError';\nexport { EmptyError } from './internal/util/EmptyError';\nexport { ObjectUnsubscribedError } from './internal/util/ObjectUnsubscribedError';\nexport { UnsubscriptionError } from './internal/util/UnsubscriptionError';\nexport { TimeoutError } from './internal/util/TimeoutError';\nexport { bindCallback } from './internal/observable/bindCallback';\nexport { bindNodeCallback } from './internal/observable/bindNodeCallback';\nexport { combineLatest } from './internal/observable/combineLatest';\nexport { concat } from './internal/observable/concat';\nexport { defer } from './internal/observable/defer';\nexport { empty } from './internal/observable/empty';\nexport { forkJoin } from './internal/observable/forkJoin';\nexport { from } from './internal/observable/from';\nexport { fromEvent } from './internal/observable/fromEvent';\nexport { fromEventPattern } from './internal/observable/fromEventPattern';\nexport { generate } from './internal/observable/generate';\nexport { iif } from './internal/observable/iif';\nexport { interval } from './internal/observable/interval';\nexport { merge } from './internal/observable/merge';\nexport { never } from './internal/observable/never';\nexport { of } from './internal/observable/of';\nexport { onErrorResumeNext } from './internal/observable/onErrorResumeNext';\nexport { pairs } from './internal/observable/pairs';\nexport { partition } from './internal/observable/partition';\nexport { race } from './internal/observable/race';\nexport { range } from './internal/observable/range';\nexport { throwError } from './internal/observable/throwError';\nexport { timer } from './internal/observable/timer';\nexport { using } from './internal/observable/using';\nexport { zip } from './internal/observable/zip';\nexport { scheduled } from './internal/scheduled/scheduled';\nexport { EMPTY } from './internal/observable/empty';\nexport { NEVER } from './internal/observable/never';\nexport { config } from './internal/config';\n//# sourceMappingURL=index.js.map","import { Subject } from './Subject';\nimport { Subscription } from './Subscription';\nexport class AsyncSubject extends Subject {\n    constructor() {\n        super(...arguments);\n        this.value = null;\n        this.hasNext = false;\n        this.hasCompleted = false;\n    }\n    _subscribe(subscriber) {\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.hasCompleted && this.hasNext) {\n            subscriber.next(this.value);\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        return super._subscribe(subscriber);\n    }\n    next(value) {\n        if (!this.hasCompleted) {\n            this.value = value;\n            this.hasNext = true;\n        }\n    }\n    error(error) {\n        if (!this.hasCompleted) {\n            super.error(error);\n        }\n    }\n    complete() {\n        this.hasCompleted = true;\n        if (this.hasNext) {\n            super.next(this.value);\n        }\n        super.complete();\n    }\n}\n//# sourceMappingURL=AsyncSubject.js.map","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { map } from '../operators/map';\nimport { canReportError } from '../util/canReportError';\nimport { isArray } from '../util/isArray';\nimport { isScheduler } from '../util/isScheduler';\nexport function bindCallback(callbackFunc, resultSelector, scheduler) {\n    if (resultSelector) {\n        if (isScheduler(resultSelector)) {\n            scheduler = resultSelector;\n        }\n        else {\n            return (...args) => bindCallback(callbackFunc, scheduler)(...args).pipe(map((args) => isArray(args) ? resultSelector(...args) : resultSelector(args)));\n        }\n    }\n    return function (...args) {\n        const context = this;\n        let subject;\n        const params = {\n            context,\n            subject,\n            callbackFunc,\n            scheduler,\n        };\n        return new Observable(subscriber => {\n            if (!scheduler) {\n                if (!subject) {\n                    subject = new AsyncSubject();\n                    const handler = (...innerArgs) => {\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    };\n                    try {\n                        callbackFunc.apply(context, [...args, handler]);\n                    }\n                    catch (err) {\n                        if (canReportError(subject)) {\n                            subject.error(err);\n                        }\n                        else {\n                            console.warn(err);\n                        }\n                    }\n                }\n                return subject.subscribe(subscriber);\n            }\n            else {\n                const state = {\n                    args, subscriber, params,\n                };\n                return scheduler.schedule(dispatch, 0, state);\n            }\n        });\n    };\n}\nfunction dispatch(state) {\n    const self = this;\n    const { args, subscriber, params } = state;\n    const { callbackFunc, context, scheduler } = params;\n    let { subject } = params;\n    if (!subject) {\n        subject = params.subject = new AsyncSubject();\n        const handler = (...innerArgs) => {\n            const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n            this.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        };\n        try {\n            callbackFunc.apply(context, [...args, handler]);\n        }\n        catch (err) {\n            subject.error(err);\n        }\n    }\n    this.add(subject.subscribe(subscriber));\n}\nfunction dispatchNext(state) {\n    const { value, subject } = state;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(state) {\n    const { err, subject } = state;\n    subject.error(err);\n}\n//# sourceMappingURL=bindCallback.js.map","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { map } from '../operators/map';\nimport { canReportError } from '../util/canReportError';\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nexport function bindNodeCallback(callbackFunc, resultSelector, scheduler) {\n    if (resultSelector) {\n        if (isScheduler(resultSelector)) {\n            scheduler = resultSelector;\n        }\n        else {\n            return (...args) => bindNodeCallback(callbackFunc, scheduler)(...args).pipe(map(args => isArray(args) ? resultSelector(...args) : resultSelector(args)));\n        }\n    }\n    return function (...args) {\n        const params = {\n            subject: undefined,\n            args,\n            callbackFunc,\n            scheduler,\n            context: this,\n        };\n        return new Observable(subscriber => {\n            const { context } = params;\n            let { subject } = params;\n            if (!scheduler) {\n                if (!subject) {\n                    subject = params.subject = new AsyncSubject();\n                    const handler = (...innerArgs) => {\n                        const err = innerArgs.shift();\n                        if (err) {\n                            subject.error(err);\n                            return;\n                        }\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    };\n                    try {\n                        callbackFunc.apply(context, [...args, handler]);\n                    }\n                    catch (err) {\n                        if (canReportError(subject)) {\n                            subject.error(err);\n                        }\n                        else {\n                            console.warn(err);\n                        }\n                    }\n                }\n                return subject.subscribe(subscriber);\n            }\n            else {\n                return scheduler.schedule(dispatch, 0, { params, subscriber, context });\n            }\n        });\n    };\n}\nfunction dispatch(state) {\n    const { params, subscriber, context } = state;\n    const { callbackFunc, args, scheduler } = params;\n    let subject = params.subject;\n    if (!subject) {\n        subject = params.subject = new AsyncSubject();\n        const handler = (...innerArgs) => {\n            const err = innerArgs.shift();\n            if (err) {\n                this.add(scheduler.schedule(dispatchError, 0, { err, subject }));\n            }\n            else {\n                const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                this.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n            }\n        };\n        try {\n            callbackFunc.apply(context, [...args, handler]);\n        }\n        catch (err) {\n            this.add(scheduler.schedule(dispatchError, 0, { err, subject }));\n        }\n    }\n    this.add(subject.subscribe(subscriber));\n}\nfunction dispatchNext(arg) {\n    const { value, subject } = arg;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    const { err, subject } = arg;\n    subject.error(err);\n}\n//# sourceMappingURL=bindNodeCallback.js.map","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { isFunction } from '../util/isFunction';\nimport { map } from '../operators/map';\nexport function fromEventPattern(addHandler, removeHandler, resultSelector) {\n    if (resultSelector) {\n        return fromEventPattern(addHandler, removeHandler).pipe(map(args => isArray(args) ? resultSelector(...args) : resultSelector(args)));\n    }\n    return new Observable(subscriber => {\n        const handler = (...e) => subscriber.next(e.length === 1 ? e[0] : e);\n        let retValue;\n        try {\n            retValue = addHandler(handler);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n        if (!isFunction(removeHandler)) {\n            return undefined;\n        }\n        return () => removeHandler(handler, retValue);\n    });\n}\n//# sourceMappingURL=fromEventPattern.js.map","import { Observable } from '../Observable';\nimport { identity } from '../util/identity';\nimport { isScheduler } from '../util/isScheduler';\nexport function generate(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {\n    let resultSelector;\n    let initialState;\n    if (arguments.length == 1) {\n        const options = initialStateOrOptions;\n        initialState = options.initialState;\n        condition = options.condition;\n        iterate = options.iterate;\n        resultSelector = options.resultSelector || identity;\n        scheduler = options.scheduler;\n    }\n    else if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n        initialState = initialStateOrOptions;\n        resultSelector = identity;\n        scheduler = resultSelectorOrObservable;\n    }\n    else {\n        initialState = initialStateOrOptions;\n        resultSelector = resultSelectorOrObservable;\n    }\n    return new Observable(subscriber => {\n        let state = initialState;\n        if (scheduler) {\n            return scheduler.schedule(dispatch, 0, {\n                subscriber,\n                iterate,\n                condition,\n                resultSelector,\n                state\n            });\n        }\n        do {\n            if (condition) {\n                let conditionResult;\n                try {\n                    conditionResult = condition(state);\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return undefined;\n                }\n                if (!conditionResult) {\n                    subscriber.complete();\n                    break;\n                }\n            }\n            let value;\n            try {\n                value = resultSelector(state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return undefined;\n            }\n            subscriber.next(value);\n            if (subscriber.closed) {\n                break;\n            }\n            try {\n                state = iterate(state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return undefined;\n            }\n        } while (true);\n        return undefined;\n    });\n}\nfunction dispatch(state) {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n        return undefined;\n    }\n    if (state.needIterate) {\n        try {\n            state.state = state.iterate(state.state);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n    }\n    else {\n        state.needIterate = true;\n    }\n    if (condition) {\n        let conditionResult;\n        try {\n            conditionResult = condition(state.state);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n        if (!conditionResult) {\n            subscriber.complete();\n            return undefined;\n        }\n        if (subscriber.closed) {\n            return undefined;\n        }\n    }\n    let value;\n    try {\n        value = state.resultSelector(state.state);\n    }\n    catch (err) {\n        subscriber.error(err);\n        return undefined;\n    }\n    if (subscriber.closed) {\n        return undefined;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n        return undefined;\n    }\n    return this.schedule(state);\n}\n//# sourceMappingURL=generate.js.map","import { defer } from './defer';\nimport { EMPTY } from './empty';\nexport function iif(condition, trueResult = EMPTY, falseResult = EMPTY) {\n    return defer(() => condition() ? trueResult : falseResult);\n}\n//# sourceMappingURL=iif.js.map","import { Observable } from '../Observable';\nimport { noop } from '../util/noop';\nexport const NEVER = new Observable(noop);\nexport function never() {\n    return NEVER;\n}\n//# sourceMappingURL=never.js.map","import { Observable } from '../Observable';\nimport { from } from './from';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\nexport function onErrorResumeNext(...sources) {\n    if (sources.length === 0) {\n        return EMPTY;\n    }\n    const [first, ...remainder] = sources;\n    if (sources.length === 1 && isArray(first)) {\n        return onErrorResumeNext(...first);\n    }\n    return new Observable(subscriber => {\n        const subNext = () => subscriber.add(onErrorResumeNext(...remainder).subscribe(subscriber));\n        return from(first).subscribe({\n            next(value) { subscriber.next(value); },\n            error: subNext,\n            complete: subNext,\n        });\n    });\n}\n//# sourceMappingURL=onErrorResumeNext.js.map","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nexport function pairs(obj, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscriber => {\n            const keys = Object.keys(obj);\n            for (let i = 0; i < keys.length && !subscriber.closed; i++) {\n                const key = keys[i];\n                if (obj.hasOwnProperty(key)) {\n                    subscriber.next([key, obj[key]]);\n                }\n            }\n            subscriber.complete();\n        });\n    }\n    else {\n        return new Observable(subscriber => {\n            const keys = Object.keys(obj);\n            const subscription = new Subscription();\n            subscription.add(scheduler.schedule(dispatch, 0, { keys, index: 0, subscriber, subscription, obj }));\n            return subscription;\n        });\n    }\n}\nexport function dispatch(state) {\n    const { keys, index, subscriber, subscription, obj } = state;\n    if (!subscriber.closed) {\n        if (index < keys.length) {\n            const key = keys[index];\n            subscriber.next([key, obj[key]]);\n            subscription.add(this.schedule({ keys, index: index + 1, subscriber, subscription, obj }));\n        }\n        else {\n            subscriber.complete();\n        }\n    }\n}\n//# sourceMappingURL=pairs.js.map","import { not } from '../util/not';\nimport { subscribeTo } from '../util/subscribeTo';\nimport { filter } from '../operators/filter';\nimport { Observable } from '../Observable';\nexport function partition(source, predicate, thisArg) {\n    return [\n        filter(predicate, thisArg)(new Observable(subscribeTo(source))),\n        filter(not(predicate, thisArg))(new Observable(subscribeTo(source)))\n    ];\n}\n//# sourceMappingURL=partition.js.map","import { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function race(...observables) {\n    if (observables.length === 1) {\n        if (isArray(observables[0])) {\n            observables = observables[0];\n        }\n        else {\n            return observables[0];\n        }\n    }\n    return fromArray(observables, undefined).lift(new RaceOperator());\n}\nexport class RaceOperator {\n    call(subscriber, source) {\n        return source.subscribe(new RaceSubscriber(subscriber));\n    }\n}\nexport class RaceSubscriber extends OuterSubscriber {\n    constructor(destination) {\n        super(destination);\n        this.hasFirst = false;\n        this.observables = [];\n        this.subscriptions = [];\n    }\n    _next(observable) {\n        this.observables.push(observable);\n    }\n    _complete() {\n        const observables = this.observables;\n        const len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            for (let i = 0; i < len && !this.hasFirst; i++) {\n                const observable = observables[i];\n                const subscription = subscribeToResult(this, observable, undefined, i);\n                if (this.subscriptions) {\n                    this.subscriptions.push(subscription);\n                }\n                this.add(subscription);\n            }\n            this.observables = null;\n        }\n    }\n    notifyNext(_outerValue, innerValue, outerIndex) {\n        if (!this.hasFirst) {\n            this.hasFirst = true;\n            for (let i = 0; i < this.subscriptions.length; i++) {\n                if (i !== outerIndex) {\n                    let subscription = this.subscriptions[i];\n                    subscription.unsubscribe();\n                    this.remove(subscription);\n                }\n            }\n            this.subscriptions = null;\n        }\n        this.destination.next(innerValue);\n    }\n}\n//# sourceMappingURL=race.js.map","import { Observable } from '../Observable';\nexport function range(start = 0, count, scheduler) {\n    return new Observable(subscriber => {\n        if (count === undefined) {\n            count = start;\n            start = 0;\n        }\n        let index = 0;\n        let current = start;\n        if (scheduler) {\n            return scheduler.schedule(dispatch, 0, {\n                index, count, start, subscriber\n            });\n        }\n        else {\n            do {\n                if (index++ >= count) {\n                    subscriber.complete();\n                    break;\n                }\n                subscriber.next(current++);\n                if (subscriber.closed) {\n                    break;\n                }\n            } while (true);\n        }\n        return undefined;\n    });\n}\nexport function dispatch(state) {\n    const { start, index, count, subscriber } = state;\n    if (index >= count) {\n        subscriber.complete();\n        return;\n    }\n    subscriber.next(start);\n    if (subscriber.closed) {\n        return;\n    }\n    state.index = index + 1;\n    state.start = start + 1;\n    this.schedule(state);\n}\n//# sourceMappingURL=range.js.map","import { Observable } from '../Observable';\nimport { from } from './from';\nimport { EMPTY } from './empty';\nexport function using(resourceFactory, observableFactory) {\n    return new Observable(subscriber => {\n        let resource;\n        try {\n            resource = resourceFactory();\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n        let result;\n        try {\n            result = observableFactory(resource);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n        const source = result ? from(result) : EMPTY;\n        const subscription = source.subscribe(subscriber);\n        return () => {\n            subscription.unsubscribe();\n            if (resource) {\n                resource.unsubscribe();\n            }\n        };\n    });\n}\n//# sourceMappingURL=using.js.map","import { fromArray } from './fromArray';\nimport { isArray } from '../util/isArray';\nimport { Subscriber } from '../Subscriber';\nimport { iterator as Symbol_iterator } from '../../internal/symbol/iterator';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function zip(...observables) {\n    const resultSelector = observables[observables.length - 1];\n    if (typeof resultSelector === 'function') {\n        observables.pop();\n    }\n    return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));\n}\nexport class ZipOperator {\n    constructor(resultSelector) {\n        this.resultSelector = resultSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));\n    }\n}\nexport class ZipSubscriber extends Subscriber {\n    constructor(destination, resultSelector, values = Object.create(null)) {\n        super(destination);\n        this.resultSelector = resultSelector;\n        this.iterators = [];\n        this.active = 0;\n        this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : undefined;\n    }\n    _next(value) {\n        const iterators = this.iterators;\n        if (isArray(value)) {\n            iterators.push(new StaticArrayIterator(value));\n        }\n        else if (typeof value[Symbol_iterator] === 'function') {\n            iterators.push(new StaticIterator(value[Symbol_iterator]()));\n        }\n        else {\n            iterators.push(new ZipBufferIterator(this.destination, this, value));\n        }\n    }\n    _complete() {\n        const iterators = this.iterators;\n        const len = iterators.length;\n        this.unsubscribe();\n        if (len === 0) {\n            this.destination.complete();\n            return;\n        }\n        this.active = len;\n        for (let i = 0; i < len; i++) {\n            let iterator = iterators[i];\n            if (iterator.stillUnsubscribed) {\n                const destination = this.destination;\n                destination.add(iterator.subscribe());\n            }\n            else {\n                this.active--;\n            }\n        }\n    }\n    notifyInactive() {\n        this.active--;\n        if (this.active === 0) {\n            this.destination.complete();\n        }\n    }\n    checkIterators() {\n        const iterators = this.iterators;\n        const len = iterators.length;\n        const destination = this.destination;\n        for (let i = 0; i < len; i++) {\n            let iterator = iterators[i];\n            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n                return;\n            }\n        }\n        let shouldComplete = false;\n        const args = [];\n        for (let i = 0; i < len; i++) {\n            let iterator = iterators[i];\n            let result = iterator.next();\n            if (iterator.hasCompleted()) {\n                shouldComplete = true;\n            }\n            if (result.done) {\n                destination.complete();\n                return;\n            }\n            args.push(result.value);\n        }\n        if (this.resultSelector) {\n            this._tryresultSelector(args);\n        }\n        else {\n            destination.next(args);\n        }\n        if (shouldComplete) {\n            destination.complete();\n        }\n    }\n    _tryresultSelector(args) {\n        let result;\n        try {\n            result = this.resultSelector.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    }\n}\nclass StaticIterator {\n    constructor(iterator) {\n        this.iterator = iterator;\n        this.nextResult = iterator.next();\n    }\n    hasValue() {\n        return true;\n    }\n    next() {\n        const result = this.nextResult;\n        this.nextResult = this.iterator.next();\n        return result;\n    }\n    hasCompleted() {\n        const nextResult = this.nextResult;\n        return Boolean(nextResult && nextResult.done);\n    }\n}\nclass StaticArrayIterator {\n    constructor(array) {\n        this.array = array;\n        this.index = 0;\n        this.length = 0;\n        this.length = array.length;\n    }\n    [Symbol_iterator]() {\n        return this;\n    }\n    next(value) {\n        const i = this.index++;\n        const array = this.array;\n        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n    }\n    hasValue() {\n        return this.array.length > this.index;\n    }\n    hasCompleted() {\n        return this.array.length === this.index;\n    }\n}\nclass ZipBufferIterator extends SimpleOuterSubscriber {\n    constructor(destination, parent, observable) {\n        super(destination);\n        this.parent = parent;\n        this.observable = observable;\n        this.stillUnsubscribed = true;\n        this.buffer = [];\n        this.isComplete = false;\n    }\n    [Symbol_iterator]() {\n        return this;\n    }\n    next() {\n        const buffer = this.buffer;\n        if (buffer.length === 0 && this.isComplete) {\n            return { value: null, done: true };\n        }\n        else {\n            return { value: buffer.shift(), done: false };\n        }\n    }\n    hasValue() {\n        return this.buffer.length > 0;\n    }\n    hasCompleted() {\n        return this.buffer.length === 0 && this.isComplete;\n    }\n    notifyComplete() {\n        if (this.buffer.length > 0) {\n            this.isComplete = true;\n            this.parent.notifyInactive();\n        }\n        else {\n            this.destination.complete();\n        }\n    }\n    notifyNext(innerValue) {\n        this.buffer.push(innerValue);\n        this.parent.checkIterators();\n    }\n    subscribe() {\n        return innerSubscribe(this.observable, new SimpleInnerSubscriber(this));\n    }\n}\n//# sourceMappingURL=zip.js.map","import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function buffer(closingNotifier) {\n    return function bufferOperatorFunction(source) {\n        return source.lift(new BufferOperator(closingNotifier));\n    };\n}\nclass BufferOperator {\n    constructor(closingNotifier) {\n        this.closingNotifier = closingNotifier;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n    }\n}\nclass BufferSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, closingNotifier) {\n        super(destination);\n        this.buffer = [];\n        this.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(this)));\n    }\n    _next(value) {\n        this.buffer.push(value);\n    }\n    notifyNext() {\n        const buffer = this.buffer;\n        this.buffer = [];\n        this.destination.next(buffer);\n    }\n}\n//# sourceMappingURL=buffer.js.map","import { Subscriber } from '../Subscriber';\nexport function bufferCount(bufferSize, startBufferEvery = null) {\n    return function bufferCountOperatorFunction(source) {\n        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));\n    };\n}\nclass BufferCountOperator {\n    constructor(bufferSize, startBufferEvery) {\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        if (!startBufferEvery || bufferSize === startBufferEvery) {\n            this.subscriberClass = BufferCountSubscriber;\n        }\n        else {\n            this.subscriberClass = BufferSkipCountSubscriber;\n        }\n    }\n    call(subscriber, source) {\n        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n    }\n}\nclass BufferCountSubscriber extends Subscriber {\n    constructor(destination, bufferSize) {\n        super(destination);\n        this.bufferSize = bufferSize;\n        this.buffer = [];\n    }\n    _next(value) {\n        const buffer = this.buffer;\n        buffer.push(value);\n        if (buffer.length == this.bufferSize) {\n            this.destination.next(buffer);\n            this.buffer = [];\n        }\n    }\n    _complete() {\n        const buffer = this.buffer;\n        if (buffer.length > 0) {\n            this.destination.next(buffer);\n        }\n        super._complete();\n    }\n}\nclass BufferSkipCountSubscriber extends Subscriber {\n    constructor(destination, bufferSize, startBufferEvery) {\n        super(destination);\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        this.buffers = [];\n        this.count = 0;\n    }\n    _next(value) {\n        const { bufferSize, startBufferEvery, buffers, count } = this;\n        this.count++;\n        if (count % startBufferEvery === 0) {\n            buffers.push([]);\n        }\n        for (let i = buffers.length; i--;) {\n            const buffer = buffers[i];\n            buffer.push(value);\n            if (buffer.length === bufferSize) {\n                buffers.splice(i, 1);\n                this.destination.next(buffer);\n            }\n        }\n    }\n    _complete() {\n        const { buffers, destination } = this;\n        while (buffers.length > 0) {\n            let buffer = buffers.shift();\n            if (buffer.length > 0) {\n                destination.next(buffer);\n            }\n        }\n        super._complete();\n    }\n}\n//# sourceMappingURL=bufferCount.js.map","import { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nexport function bufferTime(bufferTimeSpan) {\n    let length = arguments.length;\n    let scheduler = async;\n    if (isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    let bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    let maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return function bufferTimeOperatorFunction(source) {\n        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n    };\n}\nclass BufferTimeOperator {\n    constructor(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n    }\n}\nclass Context {\n    constructor() {\n        this.buffer = [];\n    }\n}\nclass BufferTimeSubscriber extends Subscriber {\n    constructor(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        super(destination);\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n        this.contexts = [];\n        const context = this.openContext();\n        this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n        if (this.timespanOnly) {\n            const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n            this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n        else {\n            const closeState = { subscriber: this, context };\n            const creationState = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n            this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n            this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n        }\n    }\n    _next(value) {\n        const contexts = this.contexts;\n        const len = contexts.length;\n        let filledBufferContext;\n        for (let i = 0; i < len; i++) {\n            const context = contexts[i];\n            const buffer = context.buffer;\n            buffer.push(value);\n            if (buffer.length == this.maxBufferSize) {\n                filledBufferContext = context;\n            }\n        }\n        if (filledBufferContext) {\n            this.onBufferFull(filledBufferContext);\n        }\n    }\n    _error(err) {\n        this.contexts.length = 0;\n        super._error(err);\n    }\n    _complete() {\n        const { contexts, destination } = this;\n        while (contexts.length > 0) {\n            const context = contexts.shift();\n            destination.next(context.buffer);\n        }\n        super._complete();\n    }\n    _unsubscribe() {\n        this.contexts = null;\n    }\n    onBufferFull(context) {\n        this.closeContext(context);\n        const closeAction = context.closeAction;\n        closeAction.unsubscribe();\n        this.remove(closeAction);\n        if (!this.closed && this.timespanOnly) {\n            context = this.openContext();\n            const bufferTimeSpan = this.bufferTimeSpan;\n            const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n    }\n    openContext() {\n        const context = new Context();\n        this.contexts.push(context);\n        return context;\n    }\n    closeContext(context) {\n        this.destination.next(context.buffer);\n        const contexts = this.contexts;\n        const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n        if (spliceIndex >= 0) {\n            contexts.splice(contexts.indexOf(context), 1);\n        }\n    }\n}\nfunction dispatchBufferTimeSpanOnly(state) {\n    const subscriber = state.subscriber;\n    const prevContext = state.context;\n    if (prevContext) {\n        subscriber.closeContext(prevContext);\n    }\n    if (!subscriber.closed) {\n        state.context = subscriber.openContext();\n        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n    }\n}\nfunction dispatchBufferCreation(state) {\n    const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n    const context = subscriber.openContext();\n    const action = this;\n    if (!subscriber.closed) {\n        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n        action.schedule(state, bufferCreationInterval);\n    }\n}\nfunction dispatchBufferClose(arg) {\n    const { subscriber, context } = arg;\n    subscriber.closeContext(context);\n}\n//# sourceMappingURL=bufferTime.js.map","import { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nexport function bufferToggle(openings, closingSelector) {\n    return function bufferToggleOperatorFunction(source) {\n        return source.lift(new BufferToggleOperator(openings, closingSelector));\n    };\n}\nclass BufferToggleOperator {\n    constructor(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    }\n}\nclass BufferToggleSubscriber extends OuterSubscriber {\n    constructor(destination, openings, closingSelector) {\n        super(destination);\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(subscribeToResult(this, openings));\n    }\n    _next(value) {\n        const contexts = this.contexts;\n        const len = contexts.length;\n        for (let i = 0; i < len; i++) {\n            contexts[i].buffer.push(value);\n        }\n    }\n    _error(err) {\n        const contexts = this.contexts;\n        while (contexts.length > 0) {\n            const context = contexts.shift();\n            context.subscription.unsubscribe();\n            context.buffer = null;\n            context.subscription = null;\n        }\n        this.contexts = null;\n        super._error(err);\n    }\n    _complete() {\n        const contexts = this.contexts;\n        while (contexts.length > 0) {\n            const context = contexts.shift();\n            this.destination.next(context.buffer);\n            context.subscription.unsubscribe();\n            context.buffer = null;\n            context.subscription = null;\n        }\n        this.contexts = null;\n        super._complete();\n    }\n    notifyNext(outerValue, innerValue) {\n        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n    }\n    notifyComplete(innerSub) {\n        this.closeBuffer(innerSub.context);\n    }\n    openBuffer(value) {\n        try {\n            const closingSelector = this.closingSelector;\n            const closingNotifier = closingSelector.call(this, value);\n            if (closingNotifier) {\n                this.trySubscribe(closingNotifier);\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    }\n    closeBuffer(context) {\n        const contexts = this.contexts;\n        if (contexts && context) {\n            const { buffer, subscription } = context;\n            this.destination.next(buffer);\n            contexts.splice(contexts.indexOf(context), 1);\n            this.remove(subscription);\n            subscription.unsubscribe();\n        }\n    }\n    trySubscribe(closingNotifier) {\n        const contexts = this.contexts;\n        const buffer = [];\n        const subscription = new Subscription();\n        const context = { buffer, subscription };\n        contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n        if (!innerSubscription || innerSubscription.closed) {\n            this.closeBuffer(context);\n        }\n        else {\n            innerSubscription.context = context;\n            this.add(innerSubscription);\n            subscription.add(innerSubscription);\n        }\n    }\n}\n//# sourceMappingURL=bufferToggle.js.map","import { Subscription } from '../Subscription';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function bufferWhen(closingSelector) {\n    return function (source) {\n        return source.lift(new BufferWhenOperator(closingSelector));\n    };\n}\nclass BufferWhenOperator {\n    constructor(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    }\n}\nclass BufferWhenSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, closingSelector) {\n        super(destination);\n        this.closingSelector = closingSelector;\n        this.subscribing = false;\n        this.openBuffer();\n    }\n    _next(value) {\n        this.buffer.push(value);\n    }\n    _complete() {\n        const buffer = this.buffer;\n        if (buffer) {\n            this.destination.next(buffer);\n        }\n        super._complete();\n    }\n    _unsubscribe() {\n        this.buffer = undefined;\n        this.subscribing = false;\n    }\n    notifyNext() {\n        this.openBuffer();\n    }\n    notifyComplete() {\n        if (this.subscribing) {\n            this.complete();\n        }\n        else {\n            this.openBuffer();\n        }\n    }\n    openBuffer() {\n        let { closingSubscription } = this;\n        if (closingSubscription) {\n            this.remove(closingSubscription);\n            closingSubscription.unsubscribe();\n        }\n        const buffer = this.buffer;\n        if (this.buffer) {\n            this.destination.next(buffer);\n        }\n        this.buffer = [];\n        let closingNotifier;\n        try {\n            const { closingSelector } = this;\n            closingNotifier = closingSelector();\n        }\n        catch (err) {\n            return this.error(err);\n        }\n        closingSubscription = new Subscription();\n        this.closingSubscription = closingSubscription;\n        this.add(closingSubscription);\n        this.subscribing = true;\n        closingSubscription.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(this)));\n        this.subscribing = false;\n    }\n}\n//# sourceMappingURL=bufferWhen.js.map","import { CombineLatestOperator } from '../observable/combineLatest';\nexport function combineAll(project) {\n    return (source) => source.lift(new CombineLatestOperator(project));\n}\n//# sourceMappingURL=combineAll.js.map","import { isArray } from '../util/isArray';\nimport { CombineLatestOperator } from '../observable/combineLatest';\nimport { from } from '../observable/from';\nconst none = {};\nexport function combineLatest(...observables) {\n    let project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return (source) => source.lift.call(from([source, ...observables]), new CombineLatestOperator(project));\n}\n//# sourceMappingURL=combineLatest.js.map","import { concat as concatStatic } from '../observable/concat';\nexport function concat(...observables) {\n    return (source) => source.lift.call(concatStatic(source, ...observables));\n}\n//# sourceMappingURL=concat.js.map","import { concatMap } from './concatMap';\nexport function concatMapTo(innerObservable, resultSelector) {\n    return concatMap(() => innerObservable, resultSelector);\n}\n//# sourceMappingURL=concatMapTo.js.map","import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function debounce(durationSelector) {\n    return (source) => source.lift(new DebounceOperator(durationSelector));\n}\nclass DebounceOperator {\n    constructor(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n    }\n}\nclass DebounceSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, durationSelector) {\n        super(destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n    }\n    _next(value) {\n        try {\n            const result = this.durationSelector.call(this, value);\n            if (result) {\n                this._tryNext(value, result);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    }\n    _complete() {\n        this.emitValue();\n        this.destination.complete();\n    }\n    _tryNext(value, duration) {\n        let subscription = this.durationSubscription;\n        this.value = value;\n        this.hasValue = true;\n        if (subscription) {\n            subscription.unsubscribe();\n            this.remove(subscription);\n        }\n        subscription = innerSubscribe(duration, new SimpleInnerSubscriber(this));\n        if (subscription && !subscription.closed) {\n            this.add(this.durationSubscription = subscription);\n        }\n    }\n    notifyNext() {\n        this.emitValue();\n    }\n    notifyComplete() {\n        this.emitValue();\n    }\n    emitValue() {\n        if (this.hasValue) {\n            const value = this.value;\n            const subscription = this.durationSubscription;\n            if (subscription) {\n                this.durationSubscription = undefined;\n                subscription.unsubscribe();\n                this.remove(subscription);\n            }\n            this.value = undefined;\n            this.hasValue = false;\n            super._next(value);\n        }\n    }\n}\n//# sourceMappingURL=debounce.js.map","import { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return (source) => new SubscriptionDelayObservable(source, subscriptionDelay)\n            .lift(new DelayWhenOperator(delayDurationSelector));\n    }\n    return (source) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\nclass DelayWhenOperator {\n    constructor(delayDurationSelector) {\n        this.delayDurationSelector = delayDurationSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    }\n}\nclass DelayWhenSubscriber extends OuterSubscriber {\n    constructor(destination, delayDurationSelector) {\n        super(destination);\n        this.delayDurationSelector = delayDurationSelector;\n        this.completed = false;\n        this.delayNotifierSubscriptions = [];\n        this.index = 0;\n    }\n    notifyNext(outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {\n        this.destination.next(outerValue);\n        this.removeSubscription(innerSub);\n        this.tryComplete();\n    }\n    notifyError(error, innerSub) {\n        this._error(error);\n    }\n    notifyComplete(innerSub) {\n        const value = this.removeSubscription(innerSub);\n        if (value) {\n            this.destination.next(value);\n        }\n        this.tryComplete();\n    }\n    _next(value) {\n        const index = this.index++;\n        try {\n            const delayNotifier = this.delayDurationSelector(value, index);\n            if (delayNotifier) {\n                this.tryDelay(delayNotifier, value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    }\n    _complete() {\n        this.completed = true;\n        this.tryComplete();\n        this.unsubscribe();\n    }\n    removeSubscription(subscription) {\n        subscription.unsubscribe();\n        const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n        if (subscriptionIdx !== -1) {\n            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n        }\n        return subscription.outerValue;\n    }\n    tryDelay(delayNotifier, value) {\n        const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            const destination = this.destination;\n            destination.add(notifierSubscription);\n            this.delayNotifierSubscriptions.push(notifierSubscription);\n        }\n    }\n    tryComplete() {\n        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n            this.destination.complete();\n        }\n    }\n}\nclass SubscriptionDelayObservable extends Observable {\n    constructor(source, subscriptionDelay) {\n        super();\n        this.source = source;\n        this.subscriptionDelay = subscriptionDelay;\n    }\n    _subscribe(subscriber) {\n        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    }\n}\nclass SubscriptionDelaySubscriber extends Subscriber {\n    constructor(parent, source) {\n        super();\n        this.parent = parent;\n        this.source = source;\n        this.sourceSubscribed = false;\n    }\n    _next(unused) {\n        this.subscribeToSource();\n    }\n    _error(err) {\n        this.unsubscribe();\n        this.parent.error(err);\n    }\n    _complete() {\n        this.unsubscribe();\n        this.subscribeToSource();\n    }\n    subscribeToSource() {\n        if (!this.sourceSubscribed) {\n            this.sourceSubscribed = true;\n            this.unsubscribe();\n            this.source.subscribe(this.parent);\n        }\n    }\n}\n//# sourceMappingURL=delayWhen.js.map","import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function distinct(keySelector, flushes) {\n    return (source) => source.lift(new DistinctOperator(keySelector, flushes));\n}\nclass DistinctOperator {\n    constructor(keySelector, flushes) {\n        this.keySelector = keySelector;\n        this.flushes = flushes;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n    }\n}\nexport class DistinctSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, keySelector, flushes) {\n        super(destination);\n        this.keySelector = keySelector;\n        this.values = new Set();\n        if (flushes) {\n            this.add(innerSubscribe(flushes, new SimpleInnerSubscriber(this)));\n        }\n    }\n    notifyNext() {\n        this.values.clear();\n    }\n    notifyError(error) {\n        this._error(error);\n    }\n    _next(value) {\n        if (this.keySelector) {\n            this._useKeySelector(value);\n        }\n        else {\n            this._finalizeNext(value, value);\n        }\n    }\n    _useKeySelector(value) {\n        let key;\n        const { destination } = this;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this._finalizeNext(key, value);\n    }\n    _finalizeNext(key, value) {\n        const { values } = this;\n        if (!values.has(key)) {\n            values.add(key);\n            this.destination.next(value);\n        }\n    }\n}\n//# sourceMappingURL=distinct.js.map","import { distinctUntilChanged } from './distinctUntilChanged';\nexport function distinctUntilKeyChanged(key, compare) {\n    return distinctUntilChanged((x, y) => compare ? compare(x[key], y[key]) : x[key] === y[key]);\n}\n//# sourceMappingURL=distinctUntilKeyChanged.js.map","import { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { filter } from './filter';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { take } from './take';\nexport function elementAt(index, defaultValue) {\n    if (index < 0) {\n        throw new ArgumentOutOfRangeError();\n    }\n    const hasDefaultValue = arguments.length >= 2;\n    return (source) => source.pipe(filter((v, i) => i === index), take(1), hasDefaultValue\n        ? defaultIfEmpty(defaultValue)\n        : throwIfEmpty(() => new ArgumentOutOfRangeError()));\n}\n//# sourceMappingURL=elementAt.js.map","import { concat } from '../observable/concat';\nimport { of } from '../observable/of';\nexport function endWith(...array) {\n    return (source) => concat(source, of(...array));\n}\n//# sourceMappingURL=endWith.js.map","import { Subscriber } from '../Subscriber';\nexport function every(predicate, thisArg) {\n    return (source) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\nclass EveryOperator {\n    constructor(predicate, thisArg, source) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n    }\n    call(observer, source) {\n        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n    }\n}\nclass EverySubscriber extends Subscriber {\n    constructor(destination, predicate, thisArg, source) {\n        super(destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n        this.index = 0;\n        this.thisArg = thisArg || this;\n    }\n    notifyComplete(everyValueMatch) {\n        this.destination.next(everyValueMatch);\n        this.destination.complete();\n    }\n    _next(value) {\n        let result = false;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (!result) {\n            this.notifyComplete(false);\n        }\n    }\n    _complete() {\n        this.notifyComplete(true);\n    }\n}\n//# sourceMappingURL=every.js.map","import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function exhaust() {\n    return (source) => source.lift(new SwitchFirstOperator());\n}\nclass SwitchFirstOperator {\n    call(subscriber, source) {\n        return source.subscribe(new SwitchFirstSubscriber(subscriber));\n    }\n}\nclass SwitchFirstSubscriber extends SimpleOuterSubscriber {\n    constructor(destination) {\n        super(destination);\n        this.hasCompleted = false;\n        this.hasSubscription = false;\n    }\n    _next(value) {\n        if (!this.hasSubscription) {\n            this.hasSubscription = true;\n            this.add(innerSubscribe(value, new SimpleInnerSubscriber(this)));\n        }\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    }\n    notifyComplete() {\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=exhaust.js.map","import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function expand(project, concurrent = Number.POSITIVE_INFINITY, scheduler) {\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return (source) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\nexport class ExpandOperator {\n    constructor(project, concurrent, scheduler) {\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    }\n}\nexport class ExpandSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, project, concurrent, scheduler) {\n        super(destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n        this.index = 0;\n        this.active = 0;\n        this.hasCompleted = false;\n        if (concurrent < Number.POSITIVE_INFINITY) {\n            this.buffer = [];\n        }\n    }\n    static dispatch(arg) {\n        const { subscriber, result, value, index } = arg;\n        subscriber.subscribeToProjection(result, value, index);\n    }\n    _next(value) {\n        const destination = this.destination;\n        if (destination.closed) {\n            this._complete();\n            return;\n        }\n        const index = this.index++;\n        if (this.active < this.concurrent) {\n            destination.next(value);\n            try {\n                const { project } = this;\n                const result = project(value, index);\n                if (!this.scheduler) {\n                    this.subscribeToProjection(result, value, index);\n                }\n                else {\n                    const state = { subscriber: this, result, value, index };\n                    const destination = this.destination;\n                    destination.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n                }\n            }\n            catch (e) {\n                destination.error(e);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    }\n    subscribeToProjection(result, value, index) {\n        this.active++;\n        const destination = this.destination;\n        destination.add(innerSubscribe(result, new SimpleInnerSubscriber(this)));\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(innerValue) {\n        this._next(innerValue);\n    }\n    notifyComplete() {\n        const buffer = this.buffer;\n        this.active--;\n        if (buffer && buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=expand.js.map","import { Subscriber } from '../Subscriber';\nexport function find(predicate, thisArg) {\n    if (typeof predicate !== 'function') {\n        throw new TypeError('predicate is not a function');\n    }\n    return (source) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\nexport class FindValueOperator {\n    constructor(predicate, source, yieldIndex, thisArg) {\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n    }\n    call(observer, source) {\n        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n    }\n}\nexport class FindValueSubscriber extends Subscriber {\n    constructor(destination, predicate, source, yieldIndex, thisArg) {\n        super(destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n        this.index = 0;\n    }\n    notifyComplete(value) {\n        const destination = this.destination;\n        destination.next(value);\n        destination.complete();\n        this.unsubscribe();\n    }\n    _next(value) {\n        const { predicate, thisArg } = this;\n        const index = this.index++;\n        try {\n            const result = predicate.call(thisArg || this, value, index, this.source);\n            if (result) {\n                this.notifyComplete(this.yieldIndex ? index : value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    }\n    _complete() {\n        this.notifyComplete(this.yieldIndex ? -1 : undefined);\n    }\n}\n//# sourceMappingURL=find.js.map","import { FindValueOperator } from '../operators/find';\nexport function findIndex(predicate, thisArg) {\n    return (source) => source.lift(new FindValueOperator(predicate, source, true, thisArg));\n}\n//# sourceMappingURL=findIndex.js.map","import { Subscriber } from '../Subscriber';\nexport function isEmpty() {\n    return (source) => source.lift(new IsEmptyOperator());\n}\nclass IsEmptyOperator {\n    call(observer, source) {\n        return source.subscribe(new IsEmptySubscriber(observer));\n    }\n}\nclass IsEmptySubscriber extends Subscriber {\n    constructor(destination) {\n        super(destination);\n    }\n    notifyComplete(isEmpty) {\n        const destination = this.destination;\n        destination.next(isEmpty);\n        destination.complete();\n    }\n    _next(value) {\n        this.notifyComplete(false);\n    }\n    _complete() {\n        this.notifyComplete(true);\n    }\n}\n//# sourceMappingURL=isEmpty.js.map","import { reduce } from './reduce';\nexport function max(comparer) {\n    const max = (typeof comparer === 'function')\n        ? (x, y) => comparer(x, y) > 0 ? x : y\n        : (x, y) => x > y ? x : y;\n    return reduce(max);\n}\n//# sourceMappingURL=max.js.map","import { merge as mergeStatic } from '../observable/merge';\nexport function merge(...observables) {\n    return (source) => source.lift.call(mergeStatic(source, ...observables));\n}\n//# sourceMappingURL=merge.js.map","import { mergeMap } from './mergeMap';\nexport function mergeMapTo(innerObservable, resultSelector, concurrent = Number.POSITIVE_INFINITY) {\n    if (typeof resultSelector === 'function') {\n        return mergeMap(() => innerObservable, resultSelector, concurrent);\n    }\n    if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return mergeMap(() => innerObservable, concurrent);\n}\n//# sourceMappingURL=mergeMapTo.js.map","import { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeScan(accumulator, seed, concurrent = Number.POSITIVE_INFINITY) {\n    return (source) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\nexport class MergeScanOperator {\n    constructor(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    }\n}\nexport class MergeScanSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, accumulator, acc, concurrent) {\n        super(destination);\n        this.accumulator = accumulator;\n        this.acc = acc;\n        this.concurrent = concurrent;\n        this.hasValue = false;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    _next(value) {\n        if (this.active < this.concurrent) {\n            const index = this.index++;\n            const destination = this.destination;\n            let ish;\n            try {\n                const { accumulator } = this;\n                ish = accumulator(this.acc, value, index);\n            }\n            catch (e) {\n                return destination.error(e);\n            }\n            this.active++;\n            this._innerSub(ish);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    }\n    _innerSub(ish) {\n        const innerSubscriber = new SimpleInnerSubscriber(this);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        const innerSubscription = innerSubscribe(ish, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            destination.add(innerSubscription);\n        }\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(innerValue) {\n        const { destination } = this;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    }\n    notifyComplete() {\n        const buffer = this.buffer;\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=mergeScan.js.map","import { reduce } from './reduce';\nexport function min(comparer) {\n    const min = (typeof comparer === 'function')\n        ? (x, y) => comparer(x, y) < 0 ? x : y\n        : (x, y) => x < y ? x : y;\n    return reduce(min);\n}\n//# sourceMappingURL=min.js.map","import { from } from '../observable/from';\nimport { isArray } from '../util/isArray';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function onErrorResumeNext(...nextSources) {\n    if (nextSources.length === 1 && isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    return (source) => source.lift(new OnErrorResumeNextOperator(nextSources));\n}\nexport function onErrorResumeNextStatic(...nextSources) {\n    let source = undefined;\n    if (nextSources.length === 1 && isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    source = nextSources.shift();\n    return from(source).lift(new OnErrorResumeNextOperator(nextSources));\n}\nclass OnErrorResumeNextOperator {\n    constructor(nextSources) {\n        this.nextSources = nextSources;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n    }\n}\nclass OnErrorResumeNextSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, nextSources) {\n        super(destination);\n        this.destination = destination;\n        this.nextSources = nextSources;\n    }\n    notifyError() {\n        this.subscribeToNextSource();\n    }\n    notifyComplete() {\n        this.subscribeToNextSource();\n    }\n    _error(err) {\n        this.subscribeToNextSource();\n        this.unsubscribe();\n    }\n    _complete() {\n        this.subscribeToNextSource();\n        this.unsubscribe();\n    }\n    subscribeToNextSource() {\n        const next = this.nextSources.shift();\n        if (!!next) {\n            const innerSubscriber = new SimpleInnerSubscriber(this);\n            const destination = this.destination;\n            destination.add(innerSubscriber);\n            const innerSubscription = innerSubscribe(next, innerSubscriber);\n            if (innerSubscription !== innerSubscriber) {\n                destination.add(innerSubscription);\n            }\n        }\n        else {\n            this.destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=onErrorResumeNext.js.map","import { not } from '../util/not';\nimport { filter } from './filter';\nexport function partition(predicate, thisArg) {\n    return (source) => [\n        filter(predicate, thisArg)(source),\n        filter(not(predicate, thisArg))(source)\n    ];\n}\n//# sourceMappingURL=partition.js.map","import { Subject } from '../Subject';\nimport { multicast } from './multicast';\nexport function publish(selector) {\n    return selector ?\n        multicast(() => new Subject(), selector) :\n        multicast(new Subject());\n}\n//# sourceMappingURL=publish.js.map","import { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nexport function publishBehavior(value) {\n    return (source) => multicast(new BehaviorSubject(value))(source);\n}\n//# sourceMappingURL=publishBehavior.js.map","import { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nexport function publishLast() {\n    return (source) => multicast(new AsyncSubject())(source);\n}\n//# sourceMappingURL=publishLast.js.map","import { ReplaySubject } from '../ReplaySubject';\nimport { multicast } from './multicast';\nexport function publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {\n    if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n        scheduler = selectorOrScheduler;\n    }\n    const selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n    const subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n    return (source) => multicast(() => subject, selector)(source);\n}\n//# sourceMappingURL=publishReplay.js.map","import { isArray } from '../util/isArray';\nimport { race as raceStatic } from '../observable/race';\nexport function race(...observables) {\n    return function raceOperatorFunction(source) {\n        if (observables.length === 1 && isArray(observables[0])) {\n            observables = observables[0];\n        }\n        return source.lift.call(raceStatic(source, ...observables));\n    };\n}\n//# sourceMappingURL=race.js.map","import { scan } from './scan';\nimport { takeLast } from './takeLast';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { pipe } from '../util/pipe';\nexport function reduce(accumulator, seed) {\n    if (arguments.length >= 2) {\n        return function reduceOperatorFunctionWithSeed(source) {\n            return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\n        };\n    }\n    return function reduceOperatorFunction(source) {\n        return pipe(scan((acc, value, index) => accumulator(acc, value, index + 1)), takeLast(1))(source);\n    };\n}\n//# sourceMappingURL=reduce.js.map","import { Subscriber } from '../Subscriber';\nimport { empty } from '../observable/empty';\nexport function repeat(count = -1) {\n    return (source) => {\n        if (count === 0) {\n            return empty();\n        }\n        else if (count < 0) {\n            return source.lift(new RepeatOperator(-1, source));\n        }\n        else {\n            return source.lift(new RepeatOperator(count - 1, source));\n        }\n    };\n}\nclass RepeatOperator {\n    constructor(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n    }\n}\nclass RepeatSubscriber extends Subscriber {\n    constructor(destination, count, source) {\n        super(destination);\n        this.count = count;\n        this.source = source;\n    }\n    complete() {\n        if (!this.isStopped) {\n            const { source, count } = this;\n            if (count === 0) {\n                return super.complete();\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    }\n}\n//# sourceMappingURL=repeat.js.map","import { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function repeatWhen(notifier) {\n    return (source) => source.lift(new RepeatWhenOperator(notifier));\n}\nclass RepeatWhenOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    }\n}\nclass RepeatWhenSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, notifier, source) {\n        super(destination);\n        this.notifier = notifier;\n        this.source = source;\n        this.sourceIsBeingSubscribedTo = true;\n    }\n    notifyNext() {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    }\n    notifyComplete() {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return super.complete();\n        }\n    }\n    complete() {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            if (!this.retriesSubscription || this.retriesSubscription.closed) {\n                return super.complete();\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next(undefined);\n        }\n    }\n    _unsubscribe() {\n        const { notifications, retriesSubscription } = this;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = undefined;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = undefined;\n        }\n        this.retries = undefined;\n    }\n    _unsubscribeAndRecycle() {\n        const { _unsubscribe } = this;\n        this._unsubscribe = null;\n        super._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        return this;\n    }\n    subscribeToRetries() {\n        this.notifications = new Subject();\n        let retries;\n        try {\n            const { notifier } = this;\n            retries = notifier(this.notifications);\n        }\n        catch (e) {\n            return super.complete();\n        }\n        this.retries = retries;\n        this.retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n    }\n}\n//# sourceMappingURL=repeatWhen.js.map","import { Subscriber } from '../Subscriber';\nexport function retry(count = -1) {\n    return (source) => source.lift(new RetryOperator(count, source));\n}\nclass RetryOperator {\n    constructor(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    }\n}\nclass RetrySubscriber extends Subscriber {\n    constructor(destination, count, source) {\n        super(destination);\n        this.count = count;\n        this.source = source;\n    }\n    error(err) {\n        if (!this.isStopped) {\n            const { source, count } = this;\n            if (count === 0) {\n                return super.error(err);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    }\n}\n//# sourceMappingURL=retry.js.map","import { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function retryWhen(notifier) {\n    return (source) => source.lift(new RetryWhenOperator(notifier, source));\n}\nclass RetryWhenOperator {\n    constructor(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    }\n}\nclass RetryWhenSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, notifier, source) {\n        super(destination);\n        this.notifier = notifier;\n        this.source = source;\n    }\n    error(err) {\n        if (!this.isStopped) {\n            let errors = this.errors;\n            let retries = this.retries;\n            let retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject();\n                try {\n                    const { notifier } = this;\n                    retries = notifier(errors);\n                }\n                catch (e) {\n                    return super.error(e);\n                }\n                retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n            }\n            else {\n                this.errors = undefined;\n                this.retriesSubscription = undefined;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    }\n    _unsubscribe() {\n        const { errors, retriesSubscription } = this;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = undefined;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = undefined;\n        }\n        this.retries = undefined;\n    }\n    notifyNext() {\n        const { _unsubscribe } = this;\n        this._unsubscribe = null;\n        this._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        this.source.subscribe(this);\n    }\n}\n//# sourceMappingURL=retryWhen.js.map","import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function sample(notifier) {\n    return (source) => source.lift(new SampleOperator(notifier));\n}\nclass SampleOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(subscriber, source) {\n        const sampleSubscriber = new SampleSubscriber(subscriber);\n        const subscription = source.subscribe(sampleSubscriber);\n        subscription.add(innerSubscribe(this.notifier, new SimpleInnerSubscriber(sampleSubscriber)));\n        return subscription;\n    }\n}\nclass SampleSubscriber extends SimpleOuterSubscriber {\n    constructor() {\n        super(...arguments);\n        this.hasValue = false;\n    }\n    _next(value) {\n        this.value = value;\n        this.hasValue = true;\n    }\n    notifyNext() {\n        this.emitValue();\n    }\n    notifyComplete() {\n        this.emitValue();\n    }\n    emitValue() {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    }\n}\n//# sourceMappingURL=sample.js.map","import { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nexport function sampleTime(period, scheduler = async) {\n    return (source) => source.lift(new SampleTimeOperator(period, scheduler));\n}\nclass SampleTimeOperator {\n    constructor(period, scheduler) {\n        this.period = period;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n    }\n}\nclass SampleTimeSubscriber extends Subscriber {\n    constructor(destination, period, scheduler) {\n        super(destination);\n        this.period = period;\n        this.scheduler = scheduler;\n        this.hasValue = false;\n        this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n    }\n    _next(value) {\n        this.lastValue = value;\n        this.hasValue = true;\n    }\n    notifyNext() {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.lastValue);\n        }\n    }\n}\nfunction dispatchNotification(state) {\n    let { subscriber, period } = state;\n    subscriber.notifyNext();\n    this.schedule(state, period);\n}\n//# sourceMappingURL=sampleTime.js.map","import { Subscriber } from '../Subscriber';\nexport function sequenceEqual(compareTo, comparator) {\n    return (source) => source.lift(new SequenceEqualOperator(compareTo, comparator));\n}\nexport class SequenceEqualOperator {\n    constructor(compareTo, comparator) {\n        this.compareTo = compareTo;\n        this.comparator = comparator;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparator));\n    }\n}\nexport class SequenceEqualSubscriber extends Subscriber {\n    constructor(destination, compareTo, comparator) {\n        super(destination);\n        this.compareTo = compareTo;\n        this.comparator = comparator;\n        this._a = [];\n        this._b = [];\n        this._oneComplete = false;\n        this.destination.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n    }\n    _next(value) {\n        if (this._oneComplete && this._b.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._a.push(value);\n            this.checkValues();\n        }\n    }\n    _complete() {\n        if (this._oneComplete) {\n            this.emit(this._a.length === 0 && this._b.length === 0);\n        }\n        else {\n            this._oneComplete = true;\n        }\n        this.unsubscribe();\n    }\n    checkValues() {\n        const { _a, _b, comparator } = this;\n        while (_a.length > 0 && _b.length > 0) {\n            let a = _a.shift();\n            let b = _b.shift();\n            let areEqual = false;\n            try {\n                areEqual = comparator ? comparator(a, b) : a === b;\n            }\n            catch (e) {\n                this.destination.error(e);\n            }\n            if (!areEqual) {\n                this.emit(false);\n            }\n        }\n    }\n    emit(value) {\n        const { destination } = this;\n        destination.next(value);\n        destination.complete();\n    }\n    nextB(value) {\n        if (this._oneComplete && this._a.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._b.push(value);\n            this.checkValues();\n        }\n    }\n    completeB() {\n        if (this._oneComplete) {\n            this.emit(this._a.length === 0 && this._b.length === 0);\n        }\n        else {\n            this._oneComplete = true;\n        }\n    }\n}\nclass SequenceEqualCompareToSubscriber extends Subscriber {\n    constructor(destination, parent) {\n        super(destination);\n        this.parent = parent;\n    }\n    _next(value) {\n        this.parent.nextB(value);\n    }\n    _error(err) {\n        this.parent.error(err);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.parent.completeB();\n        this.unsubscribe();\n    }\n}\n//# sourceMappingURL=sequenceEqual.js.map","import { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nexport function single(predicate) {\n    return (source) => source.lift(new SingleOperator(predicate, source));\n}\nclass SingleOperator {\n    constructor(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n    }\n}\nclass SingleSubscriber extends Subscriber {\n    constructor(destination, predicate, source) {\n        super(destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.seenValue = false;\n        this.index = 0;\n    }\n    applySingleValue(value) {\n        if (this.seenValue) {\n            this.destination.error('Sequence contains more than one element');\n        }\n        else {\n            this.seenValue = true;\n            this.singleValue = value;\n        }\n    }\n    _next(value) {\n        const index = this.index++;\n        if (this.predicate) {\n            this.tryNext(value, index);\n        }\n        else {\n            this.applySingleValue(value);\n        }\n    }\n    tryNext(value, index) {\n        try {\n            if (this.predicate(value, index, this.source)) {\n                this.applySingleValue(value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    }\n    _complete() {\n        const destination = this.destination;\n        if (this.index > 0) {\n            destination.next(this.seenValue ? this.singleValue : undefined);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError);\n        }\n    }\n}\n//# sourceMappingURL=single.js.map","import { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nexport function skipLast(count) {\n    return (source) => source.lift(new SkipLastOperator(count));\n}\nclass SkipLastOperator {\n    constructor(_skipCount) {\n        this._skipCount = _skipCount;\n        if (this._skipCount < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    call(subscriber, source) {\n        if (this._skipCount === 0) {\n            return source.subscribe(new Subscriber(subscriber));\n        }\n        else {\n            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n        }\n    }\n}\nclass SkipLastSubscriber extends Subscriber {\n    constructor(destination, _skipCount) {\n        super(destination);\n        this._skipCount = _skipCount;\n        this._count = 0;\n        this._ring = new Array(_skipCount);\n    }\n    _next(value) {\n        const skipCount = this._skipCount;\n        const count = this._count++;\n        if (count < skipCount) {\n            this._ring[count] = value;\n        }\n        else {\n            const currentIndex = count % skipCount;\n            const ring = this._ring;\n            const oldValue = ring[currentIndex];\n            ring[currentIndex] = value;\n            this.destination.next(oldValue);\n        }\n    }\n}\n//# sourceMappingURL=skipLast.js.map","import { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function skipUntil(notifier) {\n    return (source) => source.lift(new SkipUntilOperator(notifier));\n}\nclass SkipUntilOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(destination, source) {\n        return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));\n    }\n}\nclass SkipUntilSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, notifier) {\n        super(destination);\n        this.hasValue = false;\n        const innerSubscriber = new SimpleInnerSubscriber(this);\n        this.add(innerSubscriber);\n        this.innerSubscription = innerSubscriber;\n        const innerSubscription = innerSubscribe(notifier, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            this.add(innerSubscription);\n            this.innerSubscription = innerSubscription;\n        }\n    }\n    _next(value) {\n        if (this.hasValue) {\n            super._next(value);\n        }\n    }\n    notifyNext() {\n        this.hasValue = true;\n        if (this.innerSubscription) {\n            this.innerSubscription.unsubscribe();\n        }\n    }\n    notifyComplete() {\n    }\n}\n//# sourceMappingURL=skipUntil.js.map","import { Subscriber } from '../Subscriber';\nexport function skipWhile(predicate) {\n    return (source) => source.lift(new SkipWhileOperator(predicate));\n}\nclass SkipWhileOperator {\n    constructor(predicate) {\n        this.predicate = predicate;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n    }\n}\nclass SkipWhileSubscriber extends Subscriber {\n    constructor(destination, predicate) {\n        super(destination);\n        this.predicate = predicate;\n        this.skipping = true;\n        this.index = 0;\n    }\n    _next(value) {\n        const destination = this.destination;\n        if (this.skipping) {\n            this.tryCallPredicate(value);\n        }\n        if (!this.skipping) {\n            destination.next(value);\n        }\n    }\n    tryCallPredicate(value) {\n        try {\n            const result = this.predicate(value, this.index++);\n            this.skipping = Boolean(result);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    }\n}\n//# sourceMappingURL=skipWhile.js.map","import { switchMap } from './switchMap';\nimport { identity } from '../util/identity';\nexport function switchAll() {\n    return switchMap(identity);\n}\n//# sourceMappingURL=switchAll.js.map","import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport const defaultThrottleConfig = {\n    leading: true,\n    trailing: false\n};\nexport function throttle(durationSelector, config = defaultThrottleConfig) {\n    return (source) => source.lift(new ThrottleOperator(durationSelector, !!config.leading, !!config.trailing));\n}\nclass ThrottleOperator {\n    constructor(durationSelector, leading, trailing) {\n        this.durationSelector = durationSelector;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n    }\n}\nclass ThrottleSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, durationSelector, _leading, _trailing) {\n        super(destination);\n        this.destination = destination;\n        this.durationSelector = durationSelector;\n        this._leading = _leading;\n        this._trailing = _trailing;\n        this._hasValue = false;\n    }\n    _next(value) {\n        this._hasValue = true;\n        this._sendValue = value;\n        if (!this._throttled) {\n            if (this._leading) {\n                this.send();\n            }\n            else {\n                this.throttle(value);\n            }\n        }\n    }\n    send() {\n        const { _hasValue, _sendValue } = this;\n        if (_hasValue) {\n            this.destination.next(_sendValue);\n            this.throttle(_sendValue);\n        }\n        this._hasValue = false;\n        this._sendValue = undefined;\n    }\n    throttle(value) {\n        const duration = this.tryDurationSelector(value);\n        if (!!duration) {\n            this.add(this._throttled = innerSubscribe(duration, new SimpleInnerSubscriber(this)));\n        }\n    }\n    tryDurationSelector(value) {\n        try {\n            return this.durationSelector(value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return null;\n        }\n    }\n    throttlingDone() {\n        const { _throttled, _trailing } = this;\n        if (_throttled) {\n            _throttled.unsubscribe();\n        }\n        this._throttled = undefined;\n        if (_trailing) {\n            this.send();\n        }\n    }\n    notifyNext() {\n        this.throttlingDone();\n    }\n    notifyComplete() {\n        this.throttlingDone();\n    }\n}\n//# sourceMappingURL=throttle.js.map","import { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { defaultThrottleConfig } from './throttle';\nexport function throttleTime(duration, scheduler = async, config = defaultThrottleConfig) {\n    return (source) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\nclass ThrottleTimeOperator {\n    constructor(duration, scheduler, leading, trailing) {\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n    }\n}\nclass ThrottleTimeSubscriber extends Subscriber {\n    constructor(destination, duration, scheduler, leading, trailing) {\n        super(destination);\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n        this._hasTrailingValue = false;\n        this._trailingValue = null;\n    }\n    _next(value) {\n        if (this.throttled) {\n            if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n        else {\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n            if (this.leading) {\n                this.destination.next(value);\n            }\n            else if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n    }\n    _complete() {\n        if (this._hasTrailingValue) {\n            this.destination.next(this._trailingValue);\n            this.destination.complete();\n        }\n        else {\n            this.destination.complete();\n        }\n    }\n    clearThrottle() {\n        const throttled = this.throttled;\n        if (throttled) {\n            if (this.trailing && this._hasTrailingValue) {\n                this.destination.next(this._trailingValue);\n                this._trailingValue = null;\n                this._hasTrailingValue = false;\n            }\n            throttled.unsubscribe();\n            this.remove(throttled);\n            this.throttled = null;\n        }\n    }\n}\nfunction dispatchNext(arg) {\n    const { subscriber } = arg;\n    subscriber.clearThrottle();\n}\n//# sourceMappingURL=throttleTime.js.map","import { async } from '../scheduler/async';\nimport { scan } from './scan';\nimport { defer } from '../observable/defer';\nimport { map } from './map';\nexport function timeInterval(scheduler = async) {\n    return (source) => defer(() => {\n        return source.pipe(scan(({ current }, value) => ({ value, current: scheduler.now(), last: current }), { current: scheduler.now(), value: undefined, last: undefined }), map(({ current, last, value }) => new TimeInterval(value, current - last)));\n    });\n}\nexport class TimeInterval {\n    constructor(value, interval) {\n        this.value = value;\n        this.interval = interval;\n    }\n}\n//# sourceMappingURL=timeInterval.js.map","import { async } from '../scheduler/async';\nimport { map } from './map';\nexport function timestamp(scheduler = async) {\n    return map((value) => new Timestamp(value, scheduler.now()));\n}\nexport class Timestamp {\n    constructor(value, timestamp) {\n        this.value = value;\n        this.timestamp = timestamp;\n    }\n}\n//# sourceMappingURL=timestamp.js.map","import { reduce } from './reduce';\nfunction toArrayReducer(arr, item, index) {\n    if (index === 0) {\n        return [item];\n    }\n    arr.push(item);\n    return arr;\n}\nexport function toArray() {\n    return reduce(toArrayReducer, []);\n}\n//# sourceMappingURL=toArray.js.map","import { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function window(windowBoundaries) {\n    return function windowOperatorFunction(source) {\n        return source.lift(new WindowOperator(windowBoundaries));\n    };\n}\nclass WindowOperator {\n    constructor(windowBoundaries) {\n        this.windowBoundaries = windowBoundaries;\n    }\n    call(subscriber, source) {\n        const windowSubscriber = new WindowSubscriber(subscriber);\n        const sourceSubscription = source.subscribe(windowSubscriber);\n        if (!sourceSubscription.closed) {\n            windowSubscriber.add(innerSubscribe(this.windowBoundaries, new SimpleInnerSubscriber(windowSubscriber)));\n        }\n        return sourceSubscription;\n    }\n}\nclass WindowSubscriber extends SimpleOuterSubscriber {\n    constructor(destination) {\n        super(destination);\n        this.window = new Subject();\n        destination.next(this.window);\n    }\n    notifyNext() {\n        this.openWindow();\n    }\n    notifyError(error) {\n        this._error(error);\n    }\n    notifyComplete() {\n        this._complete();\n    }\n    _next(value) {\n        this.window.next(value);\n    }\n    _error(err) {\n        this.window.error(err);\n        this.destination.error(err);\n    }\n    _complete() {\n        this.window.complete();\n        this.destination.complete();\n    }\n    _unsubscribe() {\n        this.window = null;\n    }\n    openWindow() {\n        const prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        const destination = this.destination;\n        const newWindow = this.window = new Subject();\n        destination.next(newWindow);\n    }\n}\n//# sourceMappingURL=window.js.map","import { Subscriber } from '../Subscriber';\nimport { Subject } from '../Subject';\nexport function windowCount(windowSize, startWindowEvery = 0) {\n    return function windowCountOperatorFunction(source) {\n        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));\n    };\n}\nclass WindowCountOperator {\n    constructor(windowSize, startWindowEvery) {\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n    }\n}\nclass WindowCountSubscriber extends Subscriber {\n    constructor(destination, windowSize, startWindowEvery) {\n        super(destination);\n        this.destination = destination;\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n        this.windows = [new Subject()];\n        this.count = 0;\n        destination.next(this.windows[0]);\n    }\n    _next(value) {\n        const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n        const destination = this.destination;\n        const windowSize = this.windowSize;\n        const windows = this.windows;\n        const len = windows.length;\n        for (let i = 0; i < len && !this.closed; i++) {\n            windows[i].next(value);\n        }\n        const c = this.count - windowSize + 1;\n        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n            windows.shift().complete();\n        }\n        if (++this.count % startWindowEvery === 0 && !this.closed) {\n            const window = new Subject();\n            windows.push(window);\n            destination.next(window);\n        }\n    }\n    _error(err) {\n        const windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().error(err);\n            }\n        }\n        this.destination.error(err);\n    }\n    _complete() {\n        const windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().complete();\n            }\n        }\n        this.destination.complete();\n    }\n    _unsubscribe() {\n        this.count = 0;\n        this.windows = null;\n    }\n}\n//# sourceMappingURL=windowCount.js.map","import { Subject } from '../Subject';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nexport function windowTime(windowTimeSpan) {\n    let scheduler = async;\n    let windowCreationInterval = null;\n    let maxWindowSize = Number.POSITIVE_INFINITY;\n    if (isScheduler(arguments[3])) {\n        scheduler = arguments[3];\n    }\n    if (isScheduler(arguments[2])) {\n        scheduler = arguments[2];\n    }\n    else if (isNumeric(arguments[2])) {\n        maxWindowSize = Number(arguments[2]);\n    }\n    if (isScheduler(arguments[1])) {\n        scheduler = arguments[1];\n    }\n    else if (isNumeric(arguments[1])) {\n        windowCreationInterval = Number(arguments[1]);\n    }\n    return function windowTimeOperatorFunction(source) {\n        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n    };\n}\nclass WindowTimeOperator {\n    constructor(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));\n    }\n}\nclass CountedSubject extends Subject {\n    constructor() {\n        super(...arguments);\n        this._numberOfNextedValues = 0;\n    }\n    next(value) {\n        this._numberOfNextedValues++;\n        super.next(value);\n    }\n    get numberOfNextedValues() {\n        return this._numberOfNextedValues;\n    }\n}\nclass WindowTimeSubscriber extends Subscriber {\n    constructor(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        super(destination);\n        this.destination = destination;\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n        this.windows = [];\n        const window = this.openWindow();\n        if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n            const closeState = { subscriber: this, window, context: null };\n            const creationState = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n            this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n            this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n        }\n        else {\n            const timeSpanOnlyState = { subscriber: this, window, windowTimeSpan };\n            this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n        }\n    }\n    _next(value) {\n        const windows = this.windows;\n        const len = windows.length;\n        for (let i = 0; i < len; i++) {\n            const window = windows[i];\n            if (!window.closed) {\n                window.next(value);\n                if (window.numberOfNextedValues >= this.maxWindowSize) {\n                    this.closeWindow(window);\n                }\n            }\n        }\n    }\n    _error(err) {\n        const windows = this.windows;\n        while (windows.length > 0) {\n            windows.shift().error(err);\n        }\n        this.destination.error(err);\n    }\n    _complete() {\n        const windows = this.windows;\n        while (windows.length > 0) {\n            const window = windows.shift();\n            if (!window.closed) {\n                window.complete();\n            }\n        }\n        this.destination.complete();\n    }\n    openWindow() {\n        const window = new CountedSubject();\n        this.windows.push(window);\n        const destination = this.destination;\n        destination.next(window);\n        return window;\n    }\n    closeWindow(window) {\n        window.complete();\n        const windows = this.windows;\n        windows.splice(windows.indexOf(window), 1);\n    }\n}\nfunction dispatchWindowTimeSpanOnly(state) {\n    const { subscriber, windowTimeSpan, window } = state;\n    if (window) {\n        subscriber.closeWindow(window);\n    }\n    state.window = subscriber.openWindow();\n    this.schedule(state, windowTimeSpan);\n}\nfunction dispatchWindowCreation(state) {\n    const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n    const window = subscriber.openWindow();\n    const action = this;\n    let context = { action, subscription: null };\n    const timeSpanState = { subscriber, window, context };\n    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n    action.add(context.subscription);\n    action.schedule(state, windowCreationInterval);\n}\nfunction dispatchWindowClose(state) {\n    const { subscriber, window, context } = state;\n    if (context && context.action && context.subscription) {\n        context.action.remove(context.subscription);\n    }\n    subscriber.closeWindow(window);\n}\n//# sourceMappingURL=windowTime.js.map","import { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowToggle(openings, closingSelector) {\n    return (source) => source.lift(new WindowToggleOperator(openings, closingSelector));\n}\nclass WindowToggleOperator {\n    constructor(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    }\n}\nclass WindowToggleSubscriber extends OuterSubscriber {\n    constructor(destination, openings, closingSelector) {\n        super(destination);\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n    }\n    _next(value) {\n        const { contexts } = this;\n        if (contexts) {\n            const len = contexts.length;\n            for (let i = 0; i < len; i++) {\n                contexts[i].window.next(value);\n            }\n        }\n    }\n    _error(err) {\n        const { contexts } = this;\n        this.contexts = null;\n        if (contexts) {\n            const len = contexts.length;\n            let index = -1;\n            while (++index < len) {\n                const context = contexts[index];\n                context.window.error(err);\n                context.subscription.unsubscribe();\n            }\n        }\n        super._error(err);\n    }\n    _complete() {\n        const { contexts } = this;\n        this.contexts = null;\n        if (contexts) {\n            const len = contexts.length;\n            let index = -1;\n            while (++index < len) {\n                const context = contexts[index];\n                context.window.complete();\n                context.subscription.unsubscribe();\n            }\n        }\n        super._complete();\n    }\n    _unsubscribe() {\n        const { contexts } = this;\n        this.contexts = null;\n        if (contexts) {\n            const len = contexts.length;\n            let index = -1;\n            while (++index < len) {\n                const context = contexts[index];\n                context.window.unsubscribe();\n                context.subscription.unsubscribe();\n            }\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (outerValue === this.openings) {\n            let closingNotifier;\n            try {\n                const { closingSelector } = this;\n                closingNotifier = closingSelector(innerValue);\n            }\n            catch (e) {\n                return this.error(e);\n            }\n            const window = new Subject();\n            const subscription = new Subscription();\n            const context = { window, subscription };\n            this.contexts.push(context);\n            const innerSubscription = subscribeToResult(this, closingNotifier, context);\n            if (innerSubscription.closed) {\n                this.closeWindow(this.contexts.length - 1);\n            }\n            else {\n                innerSubscription.context = context;\n                subscription.add(innerSubscription);\n            }\n            this.destination.next(window);\n        }\n        else {\n            this.closeWindow(this.contexts.indexOf(outerValue));\n        }\n    }\n    notifyError(err) {\n        this.error(err);\n    }\n    notifyComplete(inner) {\n        if (inner !== this.openSubscription) {\n            this.closeWindow(this.contexts.indexOf(inner.context));\n        }\n    }\n    closeWindow(index) {\n        if (index === -1) {\n            return;\n        }\n        const { contexts } = this;\n        const context = contexts[index];\n        const { window, subscription } = context;\n        contexts.splice(index, 1);\n        window.complete();\n        subscription.unsubscribe();\n    }\n}\n//# sourceMappingURL=windowToggle.js.map","import { Subject } from '../Subject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowWhen(closingSelector) {\n    return function windowWhenOperatorFunction(source) {\n        return source.lift(new WindowOperator(closingSelector));\n    };\n}\nclass WindowOperator {\n    constructor(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n    }\n}\nclass WindowSubscriber extends OuterSubscriber {\n    constructor(destination, closingSelector) {\n        super(destination);\n        this.destination = destination;\n        this.closingSelector = closingSelector;\n        this.openWindow();\n    }\n    notifyNext(_outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {\n        this.openWindow(innerSub);\n    }\n    notifyError(error) {\n        this._error(error);\n    }\n    notifyComplete(innerSub) {\n        this.openWindow(innerSub);\n    }\n    _next(value) {\n        this.window.next(value);\n    }\n    _error(err) {\n        this.window.error(err);\n        this.destination.error(err);\n        this.unsubscribeClosingNotification();\n    }\n    _complete() {\n        this.window.complete();\n        this.destination.complete();\n        this.unsubscribeClosingNotification();\n    }\n    unsubscribeClosingNotification() {\n        if (this.closingNotification) {\n            this.closingNotification.unsubscribe();\n        }\n    }\n    openWindow(innerSub = null) {\n        if (innerSub) {\n            this.remove(innerSub);\n            innerSub.unsubscribe();\n        }\n        const prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        const window = this.window = new Subject();\n        this.destination.next(window);\n        let closingNotifier;\n        try {\n            const { closingSelector } = this;\n            closingNotifier = closingSelector();\n        }\n        catch (e) {\n            this.destination.error(e);\n            this.window.error(e);\n            return;\n        }\n        this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n}\n//# sourceMappingURL=windowWhen.js.map","import { zip as zipStatic } from '../observable/zip';\nexport function zip(...observables) {\n    return function zipOperatorFunction(source) {\n        return source.lift.call(zipStatic(source, ...observables));\n    };\n}\n//# sourceMappingURL=zip.js.map","import { ZipOperator } from '../observable/zip';\nexport function zipAll(project) {\n    return (source) => source.lift(new ZipOperator(project));\n}\n//# sourceMappingURL=zipAll.js.map","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\nexport class VirtualTimeScheduler extends AsyncScheduler {\n    constructor(SchedulerAction = VirtualAction, maxFrames = Number.POSITIVE_INFINITY) {\n        super(SchedulerAction, () => this.frame);\n        this.maxFrames = maxFrames;\n        this.frame = 0;\n        this.index = -1;\n    }\n    flush() {\n        const { actions, maxFrames } = this;\n        let error, action;\n        while ((action = actions[0]) && action.delay <= maxFrames) {\n            actions.shift();\n            this.frame = action.delay;\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        }\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\nVirtualTimeScheduler.frameTimeFactor = 10;\nexport class VirtualAction extends AsyncAction {\n    constructor(scheduler, work, index = scheduler.index += 1) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.index = index;\n        this.active = true;\n        this.index = scheduler.index = index;\n    }\n    schedule(state, delay = 0) {\n        if (!this.id) {\n            return super.schedule(state, delay);\n        }\n        this.active = false;\n        const action = new VirtualAction(this.scheduler, this.work);\n        this.add(action);\n        return action.schedule(state, delay);\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        this.delay = scheduler.frame + delay;\n        const { actions } = scheduler;\n        actions.push(this);\n        actions.sort(VirtualAction.sortActions);\n        return true;\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        return undefined;\n    }\n    _execute(state, delay) {\n        if (this.active === true) {\n            return super._execute(state, delay);\n        }\n    }\n    static sortActions(a, b) {\n        if (a.delay === b.delay) {\n            if (a.index === b.index) {\n                return 0;\n            }\n            else if (a.index > b.index) {\n                return 1;\n            }\n            else {\n                return -1;\n            }\n        }\n        else if (a.delay > b.delay) {\n            return 1;\n        }\n        else {\n            return -1;\n        }\n    }\n}\n//# sourceMappingURL=VirtualTimeScheduler.js.map","export function not(pred, thisArg) {\n    function notPred() {\n        return !(notPred.pred.apply(notPred.thisArg, arguments));\n    }\n    notPred.pred = pred;\n    notPred.thisArg = thisArg;\n    return notPred;\n}\n//# sourceMappingURL=not.js.map","export { audit } from '../internal/operators/audit';\nexport { auditTime } from '../internal/operators/auditTime';\nexport { buffer } from '../internal/operators/buffer';\nexport { bufferCount } from '../internal/operators/bufferCount';\nexport { bufferTime } from '../internal/operators/bufferTime';\nexport { bufferToggle } from '../internal/operators/bufferToggle';\nexport { bufferWhen } from '../internal/operators/bufferWhen';\nexport { catchError } from '../internal/operators/catchError';\nexport { combineAll } from '../internal/operators/combineAll';\nexport { combineLatest } from '../internal/operators/combineLatest';\nexport { concat } from '../internal/operators/concat';\nexport { concatAll } from '../internal/operators/concatAll';\nexport { concatMap } from '../internal/operators/concatMap';\nexport { concatMapTo } from '../internal/operators/concatMapTo';\nexport { count } from '../internal/operators/count';\nexport { debounce } from '../internal/operators/debounce';\nexport { debounceTime } from '../internal/operators/debounceTime';\nexport { defaultIfEmpty } from '../internal/operators/defaultIfEmpty';\nexport { delay } from '../internal/operators/delay';\nexport { delayWhen } from '../internal/operators/delayWhen';\nexport { dematerialize } from '../internal/operators/dematerialize';\nexport { distinct } from '../internal/operators/distinct';\nexport { distinctUntilChanged } from '../internal/operators/distinctUntilChanged';\nexport { distinctUntilKeyChanged } from '../internal/operators/distinctUntilKeyChanged';\nexport { elementAt } from '../internal/operators/elementAt';\nexport { endWith } from '../internal/operators/endWith';\nexport { every } from '../internal/operators/every';\nexport { exhaust } from '../internal/operators/exhaust';\nexport { exhaustMap } from '../internal/operators/exhaustMap';\nexport { expand } from '../internal/operators/expand';\nexport { filter } from '../internal/operators/filter';\nexport { finalize } from '../internal/operators/finalize';\nexport { find } from '../internal/operators/find';\nexport { findIndex } from '../internal/operators/findIndex';\nexport { first } from '../internal/operators/first';\nexport { groupBy } from '../internal/operators/groupBy';\nexport { ignoreElements } from '../internal/operators/ignoreElements';\nexport { isEmpty } from '../internal/operators/isEmpty';\nexport { last } from '../internal/operators/last';\nexport { map } from '../internal/operators/map';\nexport { mapTo } from '../internal/operators/mapTo';\nexport { materialize } from '../internal/operators/materialize';\nexport { max } from '../internal/operators/max';\nexport { merge } from '../internal/operators/merge';\nexport { mergeAll } from '../internal/operators/mergeAll';\nexport { mergeMap, flatMap } from '../internal/operators/mergeMap';\nexport { mergeMapTo } from '../internal/operators/mergeMapTo';\nexport { mergeScan } from '../internal/operators/mergeScan';\nexport { min } from '../internal/operators/min';\nexport { multicast } from '../internal/operators/multicast';\nexport { observeOn } from '../internal/operators/observeOn';\nexport { onErrorResumeNext } from '../internal/operators/onErrorResumeNext';\nexport { pairwise } from '../internal/operators/pairwise';\nexport { partition } from '../internal/operators/partition';\nexport { pluck } from '../internal/operators/pluck';\nexport { publish } from '../internal/operators/publish';\nexport { publishBehavior } from '../internal/operators/publishBehavior';\nexport { publishLast } from '../internal/operators/publishLast';\nexport { publishReplay } from '../internal/operators/publishReplay';\nexport { race } from '../internal/operators/race';\nexport { reduce } from '../internal/operators/reduce';\nexport { repeat } from '../internal/operators/repeat';\nexport { repeatWhen } from '../internal/operators/repeatWhen';\nexport { retry } from '../internal/operators/retry';\nexport { retryWhen } from '../internal/operators/retryWhen';\nexport { refCount } from '../internal/operators/refCount';\nexport { sample } from '../internal/operators/sample';\nexport { sampleTime } from '../internal/operators/sampleTime';\nexport { scan } from '../internal/operators/scan';\nexport { sequenceEqual } from '../internal/operators/sequenceEqual';\nexport { share } from '../internal/operators/share';\nexport { shareReplay } from '../internal/operators/shareReplay';\nexport { single } from '../internal/operators/single';\nexport { skip } from '../internal/operators/skip';\nexport { skipLast } from '../internal/operators/skipLast';\nexport { skipUntil } from '../internal/operators/skipUntil';\nexport { skipWhile } from '../internal/operators/skipWhile';\nexport { startWith } from '../internal/operators/startWith';\nexport { subscribeOn } from '../internal/operators/subscribeOn';\nexport { switchAll } from '../internal/operators/switchAll';\nexport { switchMap } from '../internal/operators/switchMap';\nexport { switchMapTo } from '../internal/operators/switchMapTo';\nexport { take } from '../internal/operators/take';\nexport { takeLast } from '../internal/operators/takeLast';\nexport { takeUntil } from '../internal/operators/takeUntil';\nexport { takeWhile } from '../internal/operators/takeWhile';\nexport { tap } from '../internal/operators/tap';\nexport { throttle } from '../internal/operators/throttle';\nexport { throttleTime } from '../internal/operators/throttleTime';\nexport { throwIfEmpty } from '../internal/operators/throwIfEmpty';\nexport { timeInterval } from '../internal/operators/timeInterval';\nexport { timeout } from '../internal/operators/timeout';\nexport { timeoutWith } from '../internal/operators/timeoutWith';\nexport { timestamp } from '../internal/operators/timestamp';\nexport { toArray } from '../internal/operators/toArray';\nexport { window } from '../internal/operators/window';\nexport { windowCount } from '../internal/operators/windowCount';\nexport { windowTime } from '../internal/operators/windowTime';\nexport { windowToggle } from '../internal/operators/windowToggle';\nexport { windowWhen } from '../internal/operators/windowWhen';\nexport { withLatestFrom } from '../internal/operators/withLatestFrom';\nexport { zip } from '../internal/operators/zip';\nexport { zipAll } from '../internal/operators/zipAll';\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"rxjs-compat/add/operator/catch\");\n//# sourceMappingURL=catch.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"rxjs-compat/add/operator/map\");\n//# sourceMappingURL=map.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"rxjs-compat/add/operator/mergeMap\");\n//# sourceMappingURL=mergeMap.js.map","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"rxjs-compat/observable/of\"));\n//# sourceMappingURL=of.js.map","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-cg-text',\n  templateUrl: './cg-text.component.html',\n  styleUrls: ['./cg-text.component.css']\n})\nexport class CgTextComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<p>\n  cg-text works!\n</p>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NewsCgComponent } from './news-cg/news-cg.component';\nimport { CgTextComponent } from './cg-text/cg-text.component';\nimport { TickerComponent } from './ticker/ticker.component';\nimport { RouterModule } from '@angular/router';\nimport { ControlRoutes } from './control.routing';\nimport { FormsModule } from '@angular/forms';\n\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\nimport { DemoMaterialModule } from '../demo-material-module';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { PerfectScrollbarModule } from 'ngx-perfect-scrollbar';\nimport { DragulaModule } from 'ng2-dragula';\nimport { SharedModule } from '../shared/shared.module';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducer } from './store/control.reducer';\nimport { ControlEffects } from './store/control.effects';\nimport { OnairComponent } from './onair/onair.component';\nimport { SlideDataDialogComponent } from './slide-data-dialog/slide-data-dialog.component';\nimport { SmsComponent } from './sms/sms.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(ControlRoutes),\n    FormsModule,\n    DemoMaterialModule,\n    FlexLayoutModule,\n    PerfectScrollbarModule,\n    DragulaModule,\n    SharedModule,\n    NgxDatatableModule,\n    StoreModule.forFeature('ControlState', reducer),\n    EffectsModule.forFeature([ControlEffects]),\n  ],\n  declarations: [\n    NewsCgComponent,\n    CgTextComponent,\n    TickerComponent,\n    OnairComponent,\n    SlideDataDialogComponent,\n    SmsComponent,\n  ],\n  entryComponents: [\n    SlideDataDialogComponent\n  ]\n})\nexport class ControlModule { }\n","import { Routes } from '@angular/router';\nimport { NewsCgComponent } from './news-cg/news-cg.component';\nimport { CgTextComponent } from './cg-text/cg-text.component';\nimport { TickerComponent } from './ticker/ticker.component';\nimport { OnairComponent } from './onair/onair.component';\nimport { SmsComponent } from './sms/sms.component';\n\nexport const ControlRoutes: Routes = [\n {\n    path: '',\n    children: [\n    {\n      path: 'news-cg',\n      component: NewsCgComponent,\n      data: { role: 'control' }\n    }, {\n      path: 'cg-text',\n      component: CgTextComponent,\n      data: { role: 'control' }\n    }, {\n      path: 'ticker',\n      component: TickerComponent,\n      data: { role: 'control' }\n    }, {\n      path: 'on-air',\n      component: OnairComponent,\n      data: { role: 'control' }\n    }, {\n      path: 'sms',\n      component: SmsComponent,\n      data: { role: 'control' }\n    }]\n  }\n];\n","import { Component, OnInit } from '@angular/core';\nimport { News, NewsList, ListNews, ListOrder } from './../../news/models/news';\n\nimport { Store } from '@ngrx/store';\nimport * as controlActions from '../store/control.actions';\nimport {Actions, ofType} from '@ngrx/effects';\n\n@Component({\n  selector: 'app-news-cg',\n  templateUrl: './news-cg.component.html',\n  styleUrls: ['./news-cg.component.css']\n})\nexport class NewsCgComponent implements OnInit {\n\n  NewsList = new NewsList();\n  selectedNews: ListNews;\n  selectedNewsKey = 0;\n\n  viewingKeyTmp: number = null;\n  viewingKey: number = null;\n\n  constructor(\n    private store: Store<any>,\n    private updates$: Actions,\n  ) { }\n\n  ngOnInit() {\n    this.store.dispatch(new controlActions.GetNewsCgNews());\n\n    this.updates$\n      .pipe(ofType(controlActions.GET_NEWS_CG_NEWS_SUCCESS))\n      .subscribe(() => {\n        this.store.select(store => store.ControlState.newsCgState)\n          .subscribe((list: NewsList) => {\n            this.NewsList = list;\n            if(this.NewsList.list_news){\n              this.selectedNews = this.NewsList.list_news[this.selectedNewsKey];\n            }else{\n              this.selectedNews = null;\n            }\n          });\n      });\n\n    this.updates$\n      .pipe(ofType(controlActions.UPDATE_NEWS_CG_NEWS_SUCCESS))\n      .subscribe(() => {\n        this.viewingKey = this.viewingKeyTmp;\n      });\n  }\n\n  nextNews() {\n    if (this.selectedNewsKey < (this.NewsList.list_news.length - 1)){\n      this.selectedNewsKey = this.selectedNewsKey + 1;\n    }\n    this.selectedNews = this.NewsList.list_news[this.selectedNewsKey];\n  }\n\n  previousNews() {\n    if (this.selectedNewsKey > 0){\n      this.selectedNewsKey = this.selectedNewsKey - 1;\n    }\n    this.selectedNews = this.NewsList.list_news[this.selectedNewsKey];\n  }\n\n  updateCg(id: number) {\n    this.viewingKeyTmp = id;\n    this.store.dispatch(new controlActions.UpdateNewsCgNews({ news_bar_id: id }));\n  }\n\n  stopCg() {\n    this.store.dispatch(new controlActions.StopNewsCg());\n  }\n\n}\n","<!-- ============================================================== -->\n<!-- Simple four boxes Row -->\n<!-- ============================================================== -->\n<!-- <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n  <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n    <mat-card>\n      <mat-card-content>\n\n          <div class=\"d-flex no-block\">\n\n              <button mat-raised-button color=\"primary\"><mat-icon>refresh</mat-icon> Load CG</button>\n              <button mat-raised-button color=\"warn\" class=\"m-l-20\" (click)=\"stopCg()\"><mat-icon>stop</mat-icon> Stop Bar</button>\n\n          </div>\n      </mat-card-content>\n    </mat-card>\n  </div>\n</div> -->\n\n\n\n  <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n      <!-- Column-->\n      <div fxFlex.gt-lg=\"75\" fxFlex.gt-md=\"60\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n        <mat-card>\n            <mat-card-content>\n              <div class=\"mb-1\">\n                <h1 class=\"mt-0\"><strong>{{NewsList.name}}</strong></h1>\n\n              </div>\n\n              <div fxLayout=\"row\" fxLayoutWrap=\"wrap\" *ngIf=\"NewsList.list_news.length > 0\">\n                <div fxFlex.gt-xs=\"100\" fxFlex=\"100\" *ngIf=\"selectedNews\">\n                  <h4 class=\"text-danger font-bold\" style=\"text-align:center;\">{{selectedNews.news.news_name}}</h4>\n                  <div fxLayout=\"column\">\n                    <span *ngIf=\"selectedNews.news.language.language_code == 'Dhv'\" class=\"dhv\" style=\"text-align:center;\">{{selectedNews.news.heading}}</span>\n                    <span *ngIf=\"selectedNews.news.language.language_code != 'Dhv'\" style=\"text-align:center;\">{{selectedNews.news.heading}}</span>\n                  </div>\n                </div>\n              </div>\n            </mat-card-content>\n\n            <!-- Nothing state -->\n            <mat-card-content class=\"table-responsive\" *ngIf=\"NewsList.list_news.length == 0\">\n              <div style=\"padding-top:100px;\">\n                <div fxLayout=\"row\" fxLayoutWrap=\"wrap\" style=\"height: 100%;padding: 0;margin: 0;display: -webkit-box;display: -moz-box;display: -ms-flexbox;display: -webkit-flex;display: flex;align-items: center;justify-content: center;\">\n                  <div fxLayout=\"row\">\n                      <img src=\"/assets/images/nothing-states/nothing-in-list.png\" style=\"width:auto; height:200px;\">\n                      <br>\n                  </div>\n                </div>\n                <div fxLayout=\"row\" fxLayoutWrap=\"wrap\" style=\"height: 100%;padding: 0;margin: 0;display: -webkit-box;display: -moz-box;display: -ms-flexbox;display: -webkit-flex;display: flex;align-items: center;justify-content: center;\">\n                    <div fxLayout=\"row\">\n                        <h3>No News in the List</h3>\n                      </div>\n                </div>\n              </div>\n            </mat-card-content>\n\n            <mat-card-content class=\"table-responsive\" *ngIf=\"NewsList.list_news.length > 0 && selectedNews\">\n                <ngx-datatable\n                  class=\"material\"\n                  [rows]=\"selectedNews.news.newsbar\"\n                  [columnMode]=\"'flex'\"\n                  [headerHeight]=\"50\"\n                  [footerHeight]=\"0\"\n                  [rowHeight]=\"'auto'\">\n\n                  <ngx-datatable-column name=\"News Bar\" [flexGrow]=\"4\">\n                    <ng-template ngx-datatable-cell-template let-row=\"row\">\n\n                      <strong *ngIf=\"selectedNews.news.language.language_code == 'Dhv'\" class=\"dhv\">{{row.title}}</strong>\n                      <strong *ngIf=\"selectedNews.news.language.language_code != 'Dhv'\">{{row.title}}</strong>\n                      <br/>\n                      <span class=\"mat-text-muted\" *ngIf=\"selectedNews.news.language.language_code == 'Dhv'\" class=\"dhv\">{{row.detail}}</span>\n                      <span class=\"mat-text-muted\" *ngIf=\"selectedNews.news.language.language_code != 'Dhv'\">{{row.detail}}</span>\n\n                    </ng-template>\n                  </ngx-datatable-column>\n\n                  <ngx-datatable-column name=\"Action\" [flexGrow]=\"1\">\n                    <ng-template ngx-datatable-cell-template let-row=\"row\">\n\n                        <button mat-icon-button color=\"warn\" (click)=\"updateCg(row.id)\" *ngIf=\"viewingKey != row.id\">\n                            <mat-icon aria-label=\"Play CG\">play_circle_outline</mat-icon>\n                        </button>\n                        <button mat-icon-button color=\"warn\" (click)=\"updateCg(row.id)\" *ngIf=\"viewingKey == row.id\">\n                            <mat-icon aria-label=\"Play CG\">play_circle_filled</mat-icon>\n                        </button>\n\n                    </ng-template>\n                  </ngx-datatable-column>\n\n                </ngx-datatable>\n            </mat-card-content>\n\n            <mat-card-content class=\"bg-light\">\n              <div class=\"d-flex\">\n                  <button mat-icon-button color=\"primary\" (click)=\"previousNews()\" [disabled]=\"!NewsList.list_news\">\n                      <mat-icon aria-label=\"Example icon-button with a heart icon\">chevron_left</mat-icon>\n                  </button>\n\n                  <button mat-icon-button color=\"primary\" (click)=\"nextNews()\" [disabled]=\"!NewsList.list_news\">\n                      <mat-icon aria-label=\"Example icon-button with a heart icon\">chevron_right</mat-icon>\n                  </button>\n              </div>\n            </mat-card-content>\n\n\n\n          </mat-card>\n  </div>\n</div>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatSidenav } from '@angular/material/sidenav';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ControlService } from '../services/control.service';\nimport { OnairService } from '../services/onair.service';\nimport { SlideDataDialogComponent } from '../slide-data-dialog/slide-data-dialog.component';\n\nimport { Subject } from 'rxjs/Subject';\nimport { takeUntil } from 'rxjs/operators';\nimport { Language } from '../../news/models/news';\nimport {ConfirmDialogComponent} from \"../../shared/component/confirm-dialog/confirm-dialog.component\";\nimport * as controlActions from \"../store/control.actions\";\nimport {MatCheckboxChange} from \"@angular/material/checkbox\";\n\n@Component({\n  selector: 'app-onair',\n  templateUrl: './onair.component.html',\n  styleUrls: ['./onair.component.css']\n})\nexport class OnairComponent implements OnInit {\n\n  sidePanelOpened = true;\n  sidePanelOpened_noNews = true;\n\n  slides: Slide[];\n  selectedSlide: Slide;\n  settings_selected_slide: number;\n  destroySubject$: Subject<void> = new Subject();\n\n  bulkSelected = { \"items\": [] };\n  bulkSelectBtn = false;\n\n  @ViewChild('sidebar') sidenav: MatSidenav;\n\n  constructor(\n    private onAirService: OnairService,\n    public dialog: MatDialog,\n    public snackBar: MatSnackBar,\n  ) { }\n\n  ngOnInit() {\n    this.onAirService.getSlides().subscribe(onair => {\n      this.slides = onair;\n      console.log(this.slides);\n    });\n  }\n\n\n\n  sideBarToggle() {\n    this.sidenav.toggle();\n  }\n\n  isOver(): boolean {\n    return window.matchMedia(`(max-width: 960px)`).matches;\n  }\n\n  onSelectSlide(slide:Slide){\n    this.selectedSlide = slide;\n    this.settings_selected_slide = slide.id;\n    /*console.log(slide)*/\n    this.bulkSelected.items = [];\n    this.bulkSelectBtn = false;\n  }\n\n  addSlideData(slideId: number) {\n    let content = new slideData(null, new Language('Dhv'), this.settings_selected_slide, 0);\n\n    let dialogRef = this.dialog.open(SlideDataDialogComponent, { width: '40%', height: 'auto', maxHeight: '95%', data: content });\n\n    dialogRef.componentInstance.onAdd.subscribe((result: slideData) => {\n      console.log(result)\n      this.onAirService.addSlideData(result).subscribe(re => {\n        console.log(re)\n        this.slides = re;\n        this.slides.forEach(data => {\n          if(data.id === this.settings_selected_slide) {\n            this.selectedSlide = data;\n          }\n        })\n      })\n    },\n    err=>{\n      console.log(\"status code--->\"+err.status);\n    });\n  }\n\n  deleteContent(id: number) {\n\n    var dialogRef = this.dialog.open(ConfirmDialogComponent,\n      { width: '350px', data: {title: 'Delete Ticker News', message: 'Are you sure you want to delete this?'} });\n\n    dialogRef.afterClosed().subscribe((result: string) => {\n      dialogRef = null;\n      if (result) {\n\n        // delete\n        this.onAirService.deleteSlideData(id).subscribe(re => {\n\n            this.onAirService.getSlides().subscribe(onair => {\n              this.slides = onair;\n\n              this.slides.forEach(data => {\n                if(data.id === this.settings_selected_slide) {\n                  this.selectedSlide = data;\n                }\n              })\n            });\n          },\n          err=>{\n            console.log(\"Err Deleting Slide Data, status code--->\"+err.status);\n          });\n\n      }\n    });\n\n  }\n\n  activate(id: number) {\n    this.onAirService.activateSlide({slide_id: this.selectedSlide.id, active_slide_id: id}).subscribe(re => {\n      console.log(re)\n      this.slides = re;\n      this.slides.forEach(data => {\n        if(data.id === this.settings_selected_slide) {\n          this.selectedSlide = data;\n        }\n      })\n    })\n  }\n\n\n  bulkSelection($event: MatCheckboxChange, id: number) {\n    if (!this.bulkSelected.items.includes(id) && $event.checked)\n      this.bulkSelected.items.push(id);\n\n    if (!$event.checked) {\n      this.bulkSelected.items.forEach((value,index)=>{\n        if(value==id) this.bulkSelected.items.splice(index,1);\n      });\n    }\n  }\n\n  selectAll($event: MatCheckboxChange) {\n      for (let i = 0; i < this.selectedSlide.onairslidecontent.length; i++) {\n        if (!this.selectedSlide.onairslidecontent[i].active) {\n          this.selectedSlide.onairslidecontent[i].selected = $event.checked;\n          this.bulkSelected.items.push(this.selectedSlide.onairslidecontent[i].id);\n        }\n\n        if (!$event.checked) {\n          this.bulkSelected.items = [];\n        }\n\n      }\n  }\n}\n\n\n\n\nexport class Slide {\n  id: number;\n  slide_id: string;\n  slide_name: string;\n  onairslidecontent: slideData[];\n}\n\nexport class slideData{\n  id?: number;\n  value?: string;\n  data: string;\n  language: Language;\n  on_air_slides_id: number;\n  active: number;\n  created_at?: string;\n  selected?: boolean = false;\n\n  constructor(data?: string, lang?: Language, s_id?: number, active?: number) {\n    this.data     = data;\n    this.language = lang;\n    this.on_air_slides_id = s_id;\n    this.active   = active;\n  }\n}\n","<!-- ============================================================== -->\n<!-- Simple four boxes Row -->\n<!-- ============================================================== -->\n<!-- <div fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n  <div fxFlex.gt-sm=\"100\" fxFlex.gt-xs=\"100\" fxFlex=\"100\">\n    <mat-card>\n      <mat-card-content>\n          <div class=\"d-flex no-block\">\n              <button mat-raised-button color=\"primary\"><mat-icon>refresh</mat-icon> Load CG</button>\n              <button mat-raised-button color=\"warn\" class=\"m-l-20 m-r-20\" (click)=\"stopCg()\"><mat-icon>stop</mat-icon> Stop Bar</button>\n\n              <mat-button-toggle-group #group=\"matButtonToggleGroup\" class=\"m-l-20\">\n                <mat-button-toggle value=\"left\">\n                  LIVE\n                </mat-button-toggle>\n                <mat-button-toggle value=\"center\">\n                  REPEAT\n                </mat-button-toggle>\n                <mat-button-toggle value=\"right\">\n                  RECORDED\n                </mat-button-toggle>\n                <mat-button-toggle value=\"justify\">\n                  NOTHING\n                </mat-button-toggle>\n              </mat-button-toggle-group>\n          </div>\n      </mat-card-content>\n    </mat-card>\n  </div>\n</div> -->\n\n\n\n\n\n\n\n\n\n\n<div fxLayout=\"row\" fxLayoutAlign=\"center start\">\n  <div fxFlex.gt-md=\"100\" fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n    <mat-card class=\"mat-card-top\">\n      <mat-sidenav-container [ngClass]=\"{ 'side-panel-opened': sidePanelOpened, 'side-panel-closed': !sidePanelOpened }\">\n\n        <mat-sidenav #sidebar [mode]=\"isOver() ? 'over' : 'side'\" [opened]=\"!isOver()\"\n                     (close)=\"sidePanelOpened = sidePanelOpened_noNews == false\">\n          <mat-toolbar color=\"primary\" class=\"no-shadow\">\n            <div fxLayout=\"row\" fxFlex=\"100\" >\n              <span class=\"m-t-0 font-14\">\n                <!-- <button mat-icon-button class=\"mr-1\"><mat-icon>inbox</mat-icon></button> -->\n\n                <!--<mat-form-field>\n                  <input matInput [matDatepicker]=\"picker\" [(ngModel)]=\"show_list_date\" (ngModelChange)=\"loadDateList($event)\">\n                  <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                  <mat-datepicker #picker></mat-datepicker>\n                </mat-form-field>-->\n\n                OnAir Components\n              </span>\n            </div>\n          </mat-toolbar>\n\n          <mat-nav-list>\n            <mat-list-item (click)=\"onSelectSlide(slide)\" *ngFor=\"let slide of slides\" [style.background-color]=\"slide==selectedSlide ? 'rgba(127, 255, 212, 0.6)' : 'rgba(255, 255, 255, 0)'\">\n\n              <mat-icon *ngIf=\"slide==selectedSlide\" color=\"primary\">subdirectory_arrow_right</mat-icon>\n\n              <h3 matLine> {{slide.slide_name}} </h3>\n              <p matLine class=\"text-muted\"> {{slide.onairslidecontent ? slide.onairslidecontent.length : ''}} Items</p>\n\n              <mat-icon *ngIf=\"slide.id == settings_selected_slide\" color=\"warn\">offline_pin</mat-icon>\n\n              <button [matMenuTriggerFor]=\"them\" mat-icon-button class=\"ml-1\" *ngIf=\"slide.id != settings_selected_slide\">\n                <mat-icon>more_vert</mat-icon>\n              </button>\n              <mat-menu #them=\"matMenu\" x-position=\"before\">\n                <button mat-menu-item color=\"primary\">Set Selected</button>\n              </mat-menu>\n\n\n            </mat-list-item>\n          </mat-nav-list>\n        </mat-sidenav>\n\n        <mat-toolbar class=\"bg-success no-shadow chat-right-panel\" color=\"warn\">\n          <div fxLayout=\"row\" fxFlex=\"100\" fxLayoutAlign=\"center center\">\n            <button (click)=\"sideBarToggle()\" class=\"mr-1\" mat-icon-button>\n              <mat-icon>short_text</mat-icon>\n            </button>\n            <!-- <span class=\"top-avatar m-r-10\">\n              <img src=\"{{selectedMessage.photo}}\" class=\"img-circle\">\n            </span> -->\n            <div fxFlex>\n              <div class=\"font-14\" *ngIf=\"selectedSlide\">{{ selectedSlide.slide_name }}</div>\n            </div>\n            <div fxFlex>\n              &nbsp;\n            </div>\n            <div class=\"font-14\" *ngIf=\"bulkSelected.items.length > 0\">{{bulkSelected.items.length}} Items selected</div>\n            <button [matMenuTriggerFor]=\"them\" mat-icon-button class=\"ml-1\">\n              <mat-icon>more_vert</mat-icon>\n            </button>\n            <mat-menu #them=\"matMenu\" x-position=\"before\">\n              <button mat-menu-item color=\"primary\" [disabled]=\"bulkSelected.items.length <= 0\" *ngIf=\"bulkSelected.items.length > 0\">Delete {{bulkSelected.items.length}} Items</button>\n              <button mat-menu-item color=\"primary\" [disabled]=\"bulkSelected.items.length <= 0\" *ngIf=\"bulkSelected.items.length <= 0\">Select Items for Action</button>\n            </mat-menu>\n          </div>\n        </mat-toolbar>\n\n        <mat-card-content class=\"chat-middle-box\" style=\"min-height:700px;\">\n          <!-- selected list -->\n          <div class=\"table-responsive\" *ngIf=\"selectedSlide\">\n\n            <div class=\"table\">\n              <div class=\"table-header\">\n                <div class=\"header__item column-all\">\n                  <mat-checkbox class=\"example-margin\" [(ngModel)]=\"bulkSelectBtn\" (change)=\"selectAll($event)\">&nbsp;</mat-checkbox>\n                </div>\n                <div class=\"header__item column-value\">Data</div>\n                <div class=\"header__item column-date\">Date</div>\n                <div class=\"header__item column-actions\">\n                  Actions\n                </div>\n              </div>\n              <div class=\"table-content\">\n                <div class=\"table-row status_{{slide_content.active}} {{ slide_content.selected ? 'status_2' : '' }}\" *ngFor=\"let slide_content of selectedSlide.onairslidecontent\" id=\"{{ slide_content.id }}\">\n\n                  <div class=\"table-data column-all\">\n                    <!--select for multiple delete-->\n                    <mat-checkbox class=\"\" [(ngModel)]=\"slide_content.selected\" id=\"{{slide_content.id}}\" (change)=\"bulkSelection($event, slide_content.id)\" *ngIf=\"!slide_content.active\">&nbsp;</mat-checkbox>\n                  </div>\n\n                  <div class=\"table-data column-value-dhv\" *ngIf=\"slide_content.language.language_code === 'Dhv'\">\n                    <div [innerHTML]=\"slide_content.value\" style=\"white-space: pre-wrap\" [class.dhv]=\"slide_content.language.language_code == 'Dhv'\"></div>\n                  </div>\n                  <div class=\"table-data column-value\" *ngIf=\"slide_content.language.language_code != 'Dhv'\">\n                    {{ slide_content.value }}\n                  </div>\n\n                  <!--<div class=\"table-data column-value\"><p class=\"dhv_nosize\" style=\"font-size: 12pt;\">{{ slide_content.value }}</p></div>-->\n                  <div class=\"table-data column-date\">{{ slide_content.created_at | date }}</div>\n\n                  <div class=\"table-data column-actions\">\n                      <!--<button mat-icon-button color=\"basic\" matTooltip=\"View News\" matTooltipPosition=\"below\" *ngIf=\"slide_content.active === 1\">\n                          <mat-icon aria-label=\"view news\">zoom_in</mat-icon>\n                      </button>-->\n                    <!--activate button-->\n                    <button mat-icon-button *ngIf=\"!slide_content.active\" (click)=\"activate(slide_content.id)\" color=\"basic\" matTooltip=\"Approve News\" matTooltipPosition=\"below\">\n                      <mat-icon aria-label=\"Approve\">check_circle</mat-icon>\n                    </button>\n\n                    <!--check circle when active-->\n                    <button mat-icon-button *ngIf=\"slide_content.active\" color=\"basic\" matTooltip=\"Approve News\" matTooltipPosition=\"below\">\n                      <mat-icon aria-label=\"Approve\" color=\"primary\">check_circle</mat-icon> Active\n                    </button>\n\n                    <button mat-icon-button *ngIf=\"!slide_content.active\" color=\"warn\" matTooltip=\"Remove News\" matTooltipPosition=\"below\" (click)=\"deleteContent(slide_content.id)\">\n                      <mat-icon aria-label=\"Edit\">delete</mat-icon>\n                    </button>\n\n                  </div>\n                </div>\n              </div>\n            </div>\n\n          </div>\n        </mat-card-content>\n\n        <mat-card-actions class=\"chat-footer\">\n            <div align=\"end\">\n              <button mat-raised-button color=\"primary\" [disabled]=\"!selectedSlide\" (click)=\"addSlideData(selectedSlide.id)\">Add New</button>\n              <!-- <button mat-button color=\"basic\" [disabled]=\"!selectedNews\" (click)=\"onEdit()\">Edit</button>\n              <button mat-raised-button color=\"warn\" [disabled]=\"!selectedNews\" (click)=\"rejectNews()\">Reject</button>\n              <button mat-raised-button color=\"primary\" [disabled]=\"!selectedNews\" (click)=\"approveNews(selectedNews)\">Approve</button> -->\n            </div>\n          <!-- <div fxLayout=\"row\" layout-align=\"start center\">\n            <mat-form-field class=\"mr-1 ml-1\" fxFlex>\n              <input matInput placeholder=\"Send message\" >\n            </mat-form-field>\n            <button mat-fab color=\"warn\" >\n              <mat-icon>send</mat-icon>\n            </button>\n          </div> -->\n        </mat-card-actions>\n      </mat-sidenav-container>\n    </mat-card>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams, HttpErrorResponse } from '@angular/common/http';\n\nimport { environment } from './../../../environments/environment';\nimport { News, ListOrder } from '../../news/models/news';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ControlService {\n  private apiUrl = environment.apiUrl;\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  // get selected list\n  getNewsCgNews () {\n    return this.http.get<any>(this.apiUrl + 'control/news/cg');\n  }\n\n  // get selected list\n  getNewsCgSettings () {\n    console.log('Getting cg settings')\n    //return this.http.get<any>(this.apiUrl + 'control/cg/settings/all');\n    return this.http.get<any>(this.apiUrl + 'control/news/cg');\n  }\n\n  //update news cg text\n  updateNewsCgText(news_bar_id: number) {\n    return this.http.put<any>(this.apiUrl + 'control/news/cg/update/', { \"news_bar_id\": news_bar_id, \"ip\": '' });\n  }\n\n  stopNewsCg() {\n    return this.http.post<any>(this.apiUrl + 'control/cg/news/stop', {});\n  }\n\n\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {environment} from '../../../environments/environment';\nimport {slideData} from '../onair/onair.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OnairService {\n  private apiUrl = environment.apiUrl;\n\n  constructor(\n    private http: HttpClient,\n  ) { }\n\n  // get selected list\n  getSlides () {\n    return this.http.get<any>(this.apiUrl + 'control/onair/slides');\n  }\n\n  //add slide data\n  addSlideData(data: slideData) {\n    return this.http.post<any>(this.apiUrl + 'control/onair/slide/data', data);\n  }\n\n  //add slide data\n  deleteSlideData(id: number) {\n    return this.http.delete<any>(this.apiUrl + 'control/onair/slide/data/'+id);\n  }\n\n  //activate slide\n  activateSlide(data: { slide_id:number, active_slide_id: number }) {\n    return this.http.post<any>(this.apiUrl + 'control/onair/slide/activate', data);\n  }\n}\n","import { Component, OnInit, Inject, Input, EventEmitter } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { slideData } from '../onair/onair.component';\nimport { Language } from '../../news/models/news';\n\n@Component({\n  selector: 'app-slide-data-dialog',\n  templateUrl: './slide-data-dialog.component.html',\n  styleUrls: ['./slide-data-dialog.component.css']\n})\nexport class SlideDataDialogComponent implements OnInit {\n\n  @Input() public dhivehiEnabled = true;\n  slide_data: slideData = new slideData(null, new Language('Dhv'), null);\n  onAdd = new EventEmitter();\n\n  constructor(\n    public dialogRef: MatDialogRef<SlideDataDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: slideData\n    ) { }\n\n  ngOnInit() {\n    this.slide_data = this.data;\n  }\n\n  closeDialog(confirmation: boolean) {\n    this.dialogRef.close(confirmation);\n  }\n\n  changeLanguage() {\n    if (this.dhivehiEnabled) {\n      this.slide_data.language.language_code = 'Dhv';\n    } else {\n      this.slide_data.language.language_code = 'Eng';\n    }\n  }\n\n  addData() {\n    // this.store.dispatch(new adminActions.CreateUser(this.user));\n    this.onAdd.emit(this.slide_data);\n    this.dialogRef.close(true);\n  }\n\n}\n","<h3 mat-dialog-title>Add Data To Slide</h3>\n<mat-slide-toggle labelPosition=\"after\" color=\"secondary\" [(ngModel)]=\"dhivehiEnabled\" (ngModelChange)=\"changeLanguage()\">{{slide_data.language.language_code}}</mat-slide-toggle>\n<form class=\"basic-form\" #userForm=\"ngForm\">\n  <div mat-dialog-content>\n\n      <div style=\"margin-top:20px;\" fxLayout=\"row\" fxLayoutWrap=\"wrap\">\n          <div fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Slide Data</mat-label>\n              <input matInput mat-autosize required name=\"templateName\" [(ngModel)]=\"slide_data.data\" [appDnrmsThaana]=\"dhivehiEnabled\">\n            </mat-form-field>\n            {{ slide_data | json }}\n          </div>\n      </div>\n<!-- {{template|json}} -->\n  </div>\n  <!-- actions column -->\n  <div mat-dialog-actions align=\"end\">\n    <button mat-button color=\"basic\" (click)=\"closeDialog(true)\">Cancel</button>\n    <button mat-raised-button color=\"primary\" (click)=\"addData()\" [disabled]=\"!userForm.form.valid\">Add</button>\n    <!-- <button mat-button color=\"basic\" *ngIf=\"data.newsstatus.status != 'published' && data.newsstatus.status != 'deleted'\" routerLink=\"/news/{{data.id}}\" (click)=\"closeDialog(true)\">Edit</button> -->\n  </div>\n\n</form>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-sms',\n  templateUrl: './sms.component.html',\n  styleUrls: ['./sms.component.css']\n})\nexport class SmsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<p>\n  sms works!\n</p>\n","import { Action } from '@ngrx/store';\nimport {News, ListOrder, NewsList, Ticker, TickersNews} from '../../news/models/news';\n\nexport const LOGOUT_CONTROL = '[Control] LOGOUT_CONTROL';\n\nexport const GET_NEWS_CG_NEWS = '[Control] GET_NEWS_CG_NEWS';\nexport const GET_NEWS_CG_NEWS_SUCCESS = '[Control] GET_NEWS_CG_NEWS_SUCCESS';\nexport const GET_NEWS_CG_NEWS_ERROR = '[Control] GET_NEWS_CG_NEWS_ERROR';\n\nexport const UPDATE_NEWS_CG_NEWS = '[Control] UPDATE_NEWS_CG_NEWS';\nexport const UPDATE_NEWS_CG_NEWS_SUCCESS = '[Control] UPDATE_NEWS_CG_NEWS_SUCCESS';\nexport const UPDATE_NEWS_CG_NEWS_ERROR = '[Control] UPDATE_NEWS_CG_NEWS_ERROR';\n\nexport const GET_CG_SETTINGS = '[Control] GET_CG_SETTINGS';\nexport const GET_CG_SETTINGS_SUCCESS = '[Control] GET_CG_SETTINGS_SUCCESS';\nexport const GET_CG_SETTINGS_ERROR = '[Control] GET_CG_SETTINGS_ERROR';\n\nexport const STOP_NEWS_CG = '[Control] STOP_NEWS_CG';\nexport const STOP_NEWS_CG_SUCCESS = '[Control] STOP_NEWS_CG_SUCCESS';\nexport const STOP_NEWS_CG_ERROR = '[Control] STOP_NEWS_CG_ERROR';\n\nexport const GET_TICKERS = '[Control] GET_TICKERS';\nexport const GET_TICKERS_SUCCESS = '[Control] GET_TICKERS_SUCCESS';\nexport const GET_TICKERS_ERROR = '[Control] GET_TICKERS_ERROR';\n\nexport const ADD_TICKER_NEWS = '[Control] ADD_TICKER_NEWS';\nexport const ADD_TICKER_NEWS_SUCCESS = '[Control] ADD_TICKER_NEWS_SUCCESS';\nexport const ADD_TICKER_NEWS_ERROR = '[Control] ADD_TICKER_NEWS_ERROR';\n\nexport const APPROVE_TICKER_NEWS = '[Control] APPROVE_TICKER_NEWS';\nexport const APPROVE_TICKER_NEWS_SUCCESS = '[Control] APPROVE_TICKER_NEWS_SUCCESS';\nexport const APPROVE_TICKER_NEWS_ERROR = '[Control] APPROVE_TICKER_NEWS_ERROR';\n\nexport const DISAPPROVE_TICKER_NEWS = '[Control] DISAPPROVE_TICKER_NEWS';\nexport const DISAPPROVE_TICKER_NEWS_SUCCESS = '[Control] DISAPPROVE_TICKER_NEWS_SUCCESS';\nexport const DISAPPROVE_TICKER_NEWS_ERROR = '[Control] DISAPPROVE_TICKER_NEWS_ERROR';\n\nexport const DELETE_TICKER_NEWS = '[Control] DELETE_TICKER_NEWS';\nexport const DELETE_TICKER_NEWS_SUCCESS = '[Control] DELETE_TICKER_NEWS_SUCCESS';\nexport const DELETE_TICKER_NEWS_ERROR = '[Control] DELETE_TICKER_NEWS_ERROR';\n\nexport const ADD_TICKER = '[Control] ADD_TICKER';\nexport const ADD_TICKER_SUCCESS = '[Control] ADD_TICKER_SUCCESS';\nexport const ADD_TICKER_ERROR = '[Control] ADD_TICKER_ERROR';\n\nexport class LogoutEditorState implements Action {\n  readonly type = LOGOUT_CONTROL;\n}\n\n\n/**\n * --------------------------------------------------> Get cg news\n */\nexport class GetNewsCgNews implements Action {\n  readonly type = GET_NEWS_CG_NEWS;\n}\n\nexport class GetNewsCgNewsSuccess implements Action {\n  readonly type = GET_NEWS_CG_NEWS_SUCCESS;\n  constructor(public payload: NewsList) {}\n}\n\nexport class GetNewsCgNewsError implements Action {\n  readonly type = GET_NEWS_CG_NEWS_ERROR;\n}\n\n\n/**\n * --------------------------------------------------> Get cg Settings\n */\nexport class GetCgSettings implements Action {\n  readonly type = GET_CG_SETTINGS;\n}\n\nexport class GetCgSettingsSuccess implements Action {\n  readonly type = GET_CG_SETTINGS_SUCCESS;\n  constructor(public payload: NewsList) {}\n}\n\nexport class GetCgSettingsError implements Action {\n  readonly type = GET_CG_SETTINGS_ERROR;\n}\n\n\n/**\n * --------------------------------------------------> Update cg news\n */\nexport class UpdateNewsCgNews implements Action {\n  readonly type = UPDATE_NEWS_CG_NEWS;\n  constructor(public payload: { news_bar_id: number }) {}\n}\n\nexport class UpdateNewsCgNewsSuccess implements Action {\n  readonly type = UPDATE_NEWS_CG_NEWS_SUCCESS;\n}\n\nexport class UpdateNewsCgNewsError implements Action {\n  readonly type = UPDATE_NEWS_CG_NEWS_ERROR;\n}\n\n\n/**\n * --------------------------------------------------> stop cg\n */\nexport class StopNewsCg implements Action {\n  readonly type = STOP_NEWS_CG;\n  //constructor(public payload: { news_bar_id: number }) {}\n}\n\nexport class StopNewsCgSuccess implements Action {\n  readonly type = STOP_NEWS_CG_SUCCESS;\n}\n\nexport class StopNewsCgError implements Action {\n  readonly type = STOP_NEWS_CG_ERROR;\n}\n\n\n/*-------------------------------------------------->Ticker Actions, the same ticker actions in the news module*/\n/**\n * -------------------------------------------------->GET TICKERS\n */\nexport class GetTickers implements Action {\n  readonly type = GET_TICKERS;\n}\n\nexport class GetTickersSuccess implements Action {\n  readonly type = GET_TICKERS_SUCCESS;\n  constructor(public payload: Ticker[]) {}\n}\n\nexport class GetTickersError implements Action {\n  readonly type = GET_TICKERS_ERROR;\n}\n\n/**\n * -------------------------------------------------->ADD TICKER NEWS\n */\nexport class AddTickerNews implements Action {\n  readonly type = ADD_TICKER_NEWS;\n  constructor(public payload: TickersNews) {}\n}\n\nexport class AddTickerNewsSuccess implements Action {\n  readonly type = ADD_TICKER_NEWS_SUCCESS;\n  constructor(public payload: Ticker[]) {}\n}\n\nexport class AddTickerNewsError implements Action {\n  readonly type = ADD_TICKER_NEWS_ERROR;\n}\n\n/**\n * -------------------------------------------------->APPROVE TICKER NEWS\n */\nexport class ApproveTickerNews implements Action {\n  readonly type = APPROVE_TICKER_NEWS;\n  constructor(public payload: { ticker_news_id: number }) {}\n}\n\nexport class ApproveTickerNewsSuccess implements Action {\n  readonly type = APPROVE_TICKER_NEWS_SUCCESS;\n  constructor(public payload: Ticker[]) {}\n}\n\nexport class ApproveTickerNewsError implements Action {\n  readonly type = APPROVE_TICKER_NEWS_ERROR;\n}\n\n/**\n * -------------------------------------------------->DISAPPROVE TICKER NEWS\n */\nexport class DisApproveTickerNews implements Action {\n  readonly type = DISAPPROVE_TICKER_NEWS;\n  constructor(public payload: { ticker_news_id: number }) {}\n}\n\nexport class DisApproveTickerNewsSuccess implements Action {\n  readonly type = DISAPPROVE_TICKER_NEWS_SUCCESS;\n  constructor(public payload: Ticker[]) {}\n}\n\nexport class DisApproveTickerNewsError implements Action {\n  readonly type = DISAPPROVE_TICKER_NEWS_ERROR;\n}\n\n/**\n * -------------------------------------------------->DELETE TICKER NEWS\n */\nexport class DeleteTickerNews implements Action {\n  readonly type = DELETE_TICKER_NEWS;\n  constructor(public payload: { ticker_news_id: number }) {}\n}\n\nexport class DeleteTickerNewsSuccess implements Action {\n  readonly type = DELETE_TICKER_NEWS_SUCCESS;\n  constructor(public payload: Ticker[]) {}\n}\n\nexport class DeleteTickerNewsError implements Action {\n  readonly type = DELETE_TICKER_NEWS_ERROR;\n}\n\n/**\n * -------------------------------------------------->ADD A TICKER\n */\nexport class AddTicker implements Action {\n  readonly type = ADD_TICKER;\n  constructor(public payload: Ticker) {}\n}\n\nexport class AddTickerSuccess implements Action {\n  readonly type = ADD_TICKER_SUCCESS;\n  constructor(public payload: Ticker[]) {}\n}\n\nexport class AddTickerError implements Action {\n  readonly type = ADD_TICKER_ERROR;\n}\n\n\nexport type All = any;\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Action } from '@ngrx/store';\n\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/mergeMap';\nimport 'rxjs/add/operator/catch';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport { of } from 'rxjs/observable/of';\nimport { map } from 'rxjs/operators';\n\nimport * as ControlActions from './control.actions';\nimport { ControlService } from '../services/control.service';\nimport * as NewsActions from \"../../news/store/news.actions\";\nimport {NewsService} from \"../../news/services/news.service\";\n\n@Injectable()\nexport class ControlEffects {\n\n  constructor(\n    private actions$: Actions,\n    private controlService: ControlService,\n    private newsService: NewsService,\n  ) { }\n\n  @Effect()\n  GetNewsCgNews$: Observable<Action> = this.actions$.\n    pipe(ofType<ControlActions.GetNewsCgNews>(ControlActions.GET_NEWS_CG_NEWS))\n    .mergeMap(action =>\n      this.controlService.getNewsCgNews()\n      .map((data) => {\n        console.log(data);\n        return new ControlActions.GetNewsCgNewsSuccess(data);\n      })\n      .catch(() => of(new ControlActions.GetNewsCgNewsError()))\n    )\n\n\n\n  /*GetCgSettings$: Observable<Action> = this.actions$.\n    ofType<ControlActions.GetNewsCgNews>(ControlActions.GET_NEWS_CG_NEWS)\n    .mergeMap(action =>\n      this.controlService.getNewsCgSettings()\n      .map((data) => {\n        console.log(data);\n        return new ControlActions.GetCgSettingsSuccess(data);\n      })\n      .catch(() => of(new ControlActions.GetCgSettingsError()))\n    );*/\n\n\n  @Effect()\n  UpdateNewsCgNews$: Observable<Action> = this.actions$.\n    pipe(ofType<ControlActions.UpdateNewsCgNews>(ControlActions.UPDATE_NEWS_CG_NEWS))\n    .mergeMap(action =>\n      this.controlService.updateNewsCgText(action.payload.news_bar_id)\n      .map((data) => {\n        console.log(data);\n        return new ControlActions.UpdateNewsCgNewsSuccess();\n      })\n      .catch(() => of(new ControlActions.UpdateNewsCgNewsError()))\n    );\n\n\n    @Effect()\n    StopNewsCg$: Observable<Action> = this.actions$.\n      pipe(ofType<ControlActions.UpdateNewsCgNews>(ControlActions.STOP_NEWS_CG))\n      .mergeMap(action =>\n        this.controlService.stopNewsCg()\n        .map((data) => {\n          console.log(data);\n          return new ControlActions.StopNewsCgSuccess();\n        })\n        .catch(() => of(new ControlActions.StopNewsCgError()))\n      );\n\n\n\n  /*----------------------------------------------------------------------------------------*/\n  /*---------------------------------------- Ticker ----------------------------------------*/\n  /*-----------------------------------------START------------------------------------------*/\n  // get tickers, returned with ticker's news\n  @Effect()\n  GetTickers$: Observable<Action> = this.actions$.\n  pipe(ofType<ControlActions.GetTickers>(ControlActions.GET_TICKERS))\n    .mergeMap(action =>\n      this.newsService.GetTickers()\n        .map((data) => {\n          return new ControlActions.GetTickersSuccess(data);\n        })\n        .catch(() => of(new ControlActions.GetTickersError()))\n    );\n\n  // add a news to ticker\n  @Effect()\n  AddTickerNews$: Observable<Action> = this.actions$.\n  pipe(ofType<ControlActions.AddTickerNews>(ControlActions.ADD_TICKER_NEWS))\n    .mergeMap(action =>\n      this.newsService.AddTickerNews(action.payload)\n        .map((data) => {\n          return new ControlActions.AddTickerNewsSuccess(data);\n        })\n        .catch(() => of(new ControlActions.AddTickerNewsError()))\n    );\n\n  // approve a news to ticker\n  @Effect()\n  ApproveTickerNews$: Observable<Action> = this.actions$.\n  pipe(ofType<ControlActions.ApproveTickerNews>(ControlActions.APPROVE_TICKER_NEWS))\n    .mergeMap(action =>\n      this.newsService.ApproveTickerNews(action.payload.ticker_news_id)\n        .map((data) => {\n          return new ControlActions.ApproveTickerNewsSuccess(data);\n        })\n        .catch(() => of(new ControlActions.ApproveTickerNewsError()))\n    );\n\n  // dis-approve a ticker news\n  @Effect()\n  DisApproveTickerNews$: Observable<Action> = this.actions$.\n  pipe(ofType<ControlActions.DisApproveTickerNews>(ControlActions.DISAPPROVE_TICKER_NEWS))\n    .mergeMap(action =>\n      this.newsService.DisApproveTickerNews(action.payload.ticker_news_id)\n        .map((data) => {\n          return new ControlActions.DisApproveTickerNewsSuccess(data);\n        })\n        .catch(() => of(new ControlActions.DisApproveTickerNewsError()))\n    );\n\n  // delete a ticker news\n  @Effect()\n  DeleteTickerNews$: Observable<Action> = this.actions$.\n  pipe(ofType<ControlActions.DeleteTickerNews>(ControlActions.DELETE_TICKER_NEWS))\n    .mergeMap(action =>\n      this.newsService.destroyTickerNews(action.payload.ticker_news_id)\n        .map((data) => {\n          return new ControlActions.DeleteTickerNewsSuccess(data);\n        })\n        .catch(() => of(new ControlActions.DeleteTickerNewsError()))\n    );\n\n  // add a ticker\n  @Effect()\n  AddTicker$: Observable<Action> = this.actions$.\n  pipe(ofType<NewsActions.AddTicker>(ControlActions.ADD_TICKER))\n    .mergeMap(action =>\n      this.newsService.AddTicker(action.payload)\n        .map((data) => {\n          return new ControlActions.AddTickerSuccess(data);\n        })\n        .catch(() => of(new ControlActions.AddTickerError()))\n    );\n  /*----------------------------------------------------------------------------------------*/\n  /*---------------------------------------- Ticker ----------------------------------------*/\n  /*-------------------------------------------END------------------------------------------*/\n}\n","\nimport { createFeatureSelector, createSelector } from '@ngrx/store';\n\nimport * as ControlActions from './control.actions';\nimport { ControlState } from '../../store/app.state';\n\nimport 'rxjs/operator/filter';\nimport 'rxjs/operator/find';\nimport * as NewsActions from \"../../news/store/news.actions\";\n\n\nexport const initialState: ControlState = {\n    // news: [],\n    // isLoaded: false,\n    // // pageState: {currentPage: null, perPage: null, lastPages: null, totalResults: null},\n    // lists: [],\n    isLoaded: true,\n    cgSettings: null,\n    newsCgState: null,\n    tickers: []\n  };\n\nexport type Action = ControlActions.All;\nexport interface ActionWithPayload<T> extends Action {\n  payload: T;\n}\n\nexport function reducer(state = initialState, action: ActionWithPayload<any>): ControlState {\n  console.log(state, action);\n\n  switch (action.type) {\n\n    case ControlActions.GET_NEWS_CG_NEWS: {\n      return {\n        ...state,\n        isLoaded: false\n      };\n    }\n\n    case ControlActions.GET_NEWS_CG_NEWS_SUCCESS: {\n      return {\n        ...state,\n        isLoaded: true,\n        newsCgState: action.payload\n      };\n    }\n\n    case ControlActions.GET_CG_SETTINGS: {\n      return {\n        ...state,\n        isLoaded: false\n      };\n    }\n\n    case ControlActions.GET_CG_SETTINGS_SUCCESS: {\n      return {\n        ...state,\n        isLoaded: true,\n        cgSettings: action.payload\n      };\n    }\n\n    case ControlActions.LOGOUT_CONTROL: {\n      return initialState;\n    }\n\n    /*----------------------------------------------------------------------------------------*/\n    /*---------------------------------------- Ticker ----------------------------------------*/\n    /*-----------------------------------------START------------------------------------------*/\n    /**\n     * ----------------------------------------------------------------------------------\n     * ---------------------------------------------------------------------> Ticker News\n     * ----------------------------------------------------------------------------------\n     */\n    /**\n     * ---------------------------------------------------------------------> GET TICKERS\n     */\n    case ControlActions.GET_TICKERS: {\n      return {\n        ...state,\n        isLoaded: false\n      };\n    }\n    case ControlActions.GET_TICKERS_SUCCESS: {\n      return {\n        ...state,\n        isLoaded: true,\n        tickers: action.payload\n      };\n    }\n    case ControlActions.GET_TICKERS_ERROR: {\n      return {\n        ...state,\n        isLoaded: true\n      };\n    }\n\n    /**\n     * ---------------------------------------------------------------------> ADD TICKER NEWS\n     */\n    case ControlActions.ADD_TICKER_NEWS: {\n      return {\n        ...state,\n        isLoaded: false\n      };\n    }\n    case ControlActions.ADD_TICKER_NEWS_SUCCESS: {\n      return {\n        ...state,\n        isLoaded: true,\n        tickers: action.payload\n      };\n    }\n    case ControlActions.ADD_TICKER_NEWS_ERROR: {\n      return {\n        ...state,\n        isLoaded: true\n      };\n    }\n\n    /**\n     * ---------------------------------------------------------------------> APPROVE TICKER NEWS\n     */\n    case ControlActions.APPROVE_TICKER_NEWS: {\n      return {\n        ...state,\n        isLoaded: false\n      };\n    }\n    case ControlActions.APPROVE_TICKER_NEWS_SUCCESS: {\n      return {\n        ...state,\n        isLoaded: true,\n        tickers: action.payload\n      };\n    }\n    case ControlActions.APPROVE_TICKER_NEWS_ERROR: {\n      return {\n        ...state,\n        isLoaded: true\n      };\n    }\n\n    /**\n     * ---------------------------------------------------------------------> DISAPPROVE TICKER NEWS\n     */\n    case ControlActions.DISAPPROVE_TICKER_NEWS: {\n      return {\n        ...state,\n        isLoaded: false\n      };\n    }\n    case ControlActions.DISAPPROVE_TICKER_NEWS_SUCCESS: {\n      return {\n        ...state,\n        isLoaded: true,\n        tickers: action.payload\n      };\n    }\n    case ControlActions.DISAPPROVE_TICKER_NEWS_ERROR: {\n      return {\n        ...state,\n        isLoaded: true\n      };\n    }\n\n    /**\n     * ---------------------------------------------------------------------> DELETE TICKER NEWS\n     */\n    case ControlActions.DELETE_TICKER_NEWS: {\n      return {\n        ...state,\n        isLoaded: false\n      };\n    }\n    case ControlActions.DELETE_TICKER_NEWS_SUCCESS: {\n      return {\n        ...state,\n        isLoaded: true,\n        tickers: action.payload\n      };\n    }\n    case ControlActions.DELETE_TICKER_NEWS_ERROR: {\n      return {\n        ...state,\n        isLoaded: true\n      };\n    }\n\n    /**\n     * ---------------------------------------------------------------------> ADD TICKER\n     */\n    case ControlActions.ADD_TICKER: {\n      return {\n        ...state,\n        isLoaded: false\n      };\n    }\n    case ControlActions.ADD_TICKER_SUCCESS: {\n      return {\n        ...state,\n        isLoaded: true,\n        tickers: action.payload\n      };\n    }\n    case ControlActions.ADD_TICKER_ERROR: {\n      return {\n        ...state,\n        isLoaded: true\n      };\n    }\n    /*----------------------------------------------------------------------------------------*/\n    /*---------------------------------------- Ticker ----------------------------------------*/\n    /*-------------------------------------------END------------------------------------------*/\n\n    default: {\n      return state;\n    }\n  }\n\n}\n\nexport const getReviewNewsState = createFeatureSelector<ControlState>('ControlState');\n","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {Ticker, TickersNews} from \"../../news/models/news\";\nimport {Store} from \"@ngrx/store\";\nimport {Actions, ofType} from \"@ngrx/effects\";\nimport {SessionService} from \"../../shared/services/session.service\";\nimport * as newsActions from \"../../news/store/news.actions\";\nimport * as controlActions from \"../store/control.actions\";\nimport {AddTickerDialogComponent} from \"../../news/add-ticker-dialog/add-ticker-dialog.component\";\nimport {AddTickerNewsDialogComponent} from \"../../shared/component/add-ticker-news-dialog/add-ticker-news-dialog.component\";\nimport {ConfirmDialogComponent} from \"../../shared/component/confirm-dialog/confirm-dialog.component\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { MatSidenav } from \"@angular/material/sidenav\";\nimport {ControlState} from \"../../store/app.state\";\n\n@Component({\n  selector: 'app-ticker',\n  templateUrl: './ticker.component.html',\n  styleUrls: ['./ticker.component.css']\n})\nexport class TickerComponent implements OnInit {\n\n  tickers: Ticker[];\n  selectedTicker: Ticker;\n\n  sidePanelOpened = true;\n  sidePanelOpened_noNews = true;\n\n  @ViewChild('sidebar') sidenav: MatSidenav;\n  selectedNews: any;\n\n  constructor(\n    private store: Store<any>,\n    public dialog: MatDialog,\n    private updates$: Actions,\n    private sessionService: SessionService\n  ) { }\n\n  ngOnInit() {\n    /*this.store.dispatch(new newsActions.UpdateNewsLoaded({ isLoaded: true }));*/\n    this.store.dispatch(new controlActions.GetTickers());\n\n    // update selected list selection\n    this.updates$\n      .pipe(ofType(controlActions.GET_TICKERS_SUCCESS))\n      .subscribe(() => {\n        let sub = this.store.select(control_store => control_store.ControlState.tickers)\n          .subscribe(tickers => {\n            this.tickers = tickers;\n          });\n      });\n  }\n\n  onSelectTicker(ticker: Ticker) {\n    if (this.selectedTicker && this.selectedTicker.id === ticker.id) {\n      this.selectedTicker = null;\n    }else {\n      this.selectedTicker = ticker;\n    }\n  }\n\n  onAddTicker() {\n    let dialogRef = this.dialog.open(AddTickerDialogComponent, { width: '25%' });\n\n    dialogRef.componentInstance.onAdd.subscribe((result: any) => {\n      // this.updates$\n      // .ofType(newsActions.ADD_TICKER_SUCCESS)\n      // .subscribe(() => {\n      //   let sub = this.store.select(news_store => news_store.NewsState.tickers)\n      //   .subscribe(tickers => {\n\n      // console.log('TICKER ADDED', tickers)\n      //     this.tickers = tickers;\n      //   });\n      // });\n      this.UpdateTickerSelection(controlActions.ADD_TICKER_SUCCESS, true);\n    });\n  }\n\n  onAddTickerNews() {\n    let dialogRef = this.dialog.open(AddTickerNewsDialogComponent, { width: '95%', data: { ticker: this.selectedTicker, source: 'control' } });\n\n    dialogRef.componentInstance.onAdd.subscribe((result: any) => {\n      this.UpdateTickerSelection(controlActions.ADD_TICKER_NEWS_SUCCESS);\n    });\n  }\n\n  onApproveTickerNews(t_news_id: number) {\n    this.store.dispatch(new controlActions.ApproveTickerNews({ ticker_news_id: t_news_id }));\n\n    this.UpdateTickerSelection(controlActions.APPROVE_TICKER_NEWS_SUCCESS);\n  }\n\n  onDisApproveTickerNews(t_news_id: number) {\n    this.store.dispatch(new controlActions.DisApproveTickerNews({ ticker_news_id: t_news_id }));\n\n    this.UpdateTickerSelection(controlActions.DISAPPROVE_TICKER_NEWS_SUCCESS);\n  }\n\n  onDeleteTickerNews(t_news_id: number) {\n    let dialogRef = this.dialog.open(ConfirmDialogComponent,\n      { width: '350px', data: {title: 'Delete Ticker News', message: 'Are you sure you want to delete this news from ticker?'} });\n\n    dialogRef.afterClosed().subscribe((result: string) => {\n      dialogRef = null;\n      if (result) {\n        this.store.dispatch(new controlActions.DeleteTickerNews({ ticker_news_id: t_news_id }));\n        this.UpdateTickerSelection(controlActions.DELETE_TICKER_NEWS_SUCCESS);\n      }\n    });\n  }\n\n  UpdateTickerSelection(newsAction, reloadTickers:boolean = false) {\n    this.updates$\n      .pipe(ofType(newsAction))\n      .subscribe(() => {\n        let sub = this.store.select(news_store => news_store.ControlState.tickers)\n          .subscribe(list => {\n            if(reloadTickers) {\n              this.tickers = list;\n            }\n            if (this.selectedTicker) {\n              list.forEach((element: TickersNews) => {\n                if (element.id === this.selectedTicker.id) {\n                  this.selectedTicker = element\n                }\n              });\n            }\n          });\n\n      });\n  }\n\n  checkRight() {\n    if (this.sessionService.checkRole('ticker-editor')) {\n      return true;\n    } else if (this.sessionService.checkRole('news-editor')) {\n      return true;\n    }\n    return false;\n  }\n\n  sideBarToggle() {\n    this.sidenav.toggle();\n  }\n\n  isOver(): boolean {\n    return window.matchMedia(`(max-width: 960px)`).matches;\n  }\n\n}\n","<div fxLayout=\"row\" fxLayoutAlign=\"center start\">\n  <div fxFlex.gt-md=\"100\" fxFlex.gt-sm=\"100\" fxFlex=\"100\">\n    <mat-card class=\"mat-card-top\">\n      <mat-sidenav-container [ngClass]=\"{ 'side-panel-opened': sidePanelOpened, 'side-panel-closed': !sidePanelOpened }\">\n\n        <mat-sidenav #sidebar [mode]=\"isOver() ? 'over' : 'side'\" [opened]=\"!isOver()\" (opened)=\"sidePanelOpened = true || (sidePanelOpened_noNews == true)\"\n                     (close)=\"sidePanelOpened = sidePanelOpened_noNews == false\">\n          <mat-toolbar color=\"primary\" class=\"no-shadow\">\n            <div fxLayout=\"row\" fxFlex=\"100\" >\n                <span class=\"m-t-0 font-14\">\n                  <!-- <button mat-icon-button class=\"mr-1\"><mat-icon>format_list_bulleted</mat-icon></button> -->\n                  Tickers\n                </span>\n            </div>\n            <button *ngIf=\"checkRight()\" (click)=\"onAddTicker()\" mat-mini-fab color=\"basic\" class=\"mr-1\" align=\"end\" matTooltip=\"Add Ticker\" matTooltipPosition=\"below\"><mat-icon>playlist_add</mat-icon></button>\n          </mat-toolbar>\n\n          <mat-nav-list>\n            <mat-list-item (click)=\"onSelectTicker(ticker)\" *ngFor=\"let ticker of tickers\" [style.background-color]=\"ticker==selectedTicker ? 'rgba(127, 255, 212, 0.6)' : 'rgba(255, 255, 255, 0)'\">\n              <!-- <mat-icon *ngIf=\"list==selectedList\" color=\"primary\">subdirectory_arrow_right</mat-icon> -->\n              <h3 matLine> {{ticker.name}} </h3>\n              <p matLine class=\"text-muted\"> {{ticker.tickernews.length}} </p>\n            </mat-list-item>\n          </mat-nav-list>\n        </mat-sidenav>\n\n        <mat-toolbar class=\"bg-success no-shadow chat-right-panel\" color=\"warn\">\n          <div fxLayout=\"row\" fxFlex=\"100\" fxLayoutAlign=\"center center\">\n            <button (click)=\"sideBarToggle()\" class=\"mr-1\" mat-icon-button>\n              <mat-icon>short_text</mat-icon>\n            </button>\n            <!-- <span class=\"top-avatar m-r-10\">\n              <img src=\"{{selectedMessage.photo}}\" class=\"img-circle\">\n            </span> -->\n            <div fxFlex>\n              <div class=\"font-14\" *ngIf=\"selectedNews\">News</div>\n            </div>\n            <button [matMenuTriggerFor]=\"them\" mat-icon-button class=\"ml-1\">\n              <mat-icon>more_vert</mat-icon>\n            </button>\n            <mat-menu #them=\"matMenu\" x-position=\"before\">\n              <!-- <button mat-menu-item color=\"primary\" [disabled]=\"!selectedNews\">Approve</button>\n              <button mat-menu-item color=\"warn\" [disabled]=\"!selectedNews\">Reject</button>\n              <button mat-menu-item color=\"link\" [disabled]=\"!selectedNews\">Edit</button> -->\n            </mat-menu>\n          </div>\n        </mat-toolbar>\n\n        <mat-card-content class=\"chat-middle-box\" style=\"min-height:700px;\">\n          <!-- selected list -->\n          <div class=\"table-responsive\" *ngIf=\"selectedTicker\">\n\n            <div class=\"table\">\n              <div class=\"table-header\">\n                <div class=\"header__item column-news\">Ticker News</div>\n                <div class=\"header__item column-date\">Date</div>\n                <div class=\"header__item column-actions\">Actions</div>\n              </div>\n              <div class=\"table-content\">\n                <div class=\"table-row status_{{ news.enabled }}\" *ngFor=\"let news of selectedTicker.tickernews\" id=\"{{ news.id }}\">\n\n                  <div class=\"table-data column-news dhv\" *ngIf=\"news.language.language_code === 'Dhv'\">\n                    <div [innerHTML]=\"news.news\" style=\"white-space: pre-wrap\" [class.dhv]=\"news.language.language_code == 'Dhv'\"></div>\n                  </div>\n                  <div class=\"table-data column-news\" *ngIf=\"news.language.language_code != 'Dhv'\">{{ news.news }}</div>\n\n                  <div class=\"table-data column-date\" matTooltip=\"{{ news.created_at}}\" matTooltipPosition=\"below\">{{ news.created_at | date }}</div>\n                  <div class=\"table-data column-actions\">\n\n                    <button mat-icon-button color=\"warn\" *ngIf=\"checkRight()\" (click)=\"onDeleteTickerNews(news.id)\" matTooltip=\"Remove News\" matTooltipPosition=\"below\">\n                      <mat-icon aria-label=\"Edit\">delete</mat-icon>\n                    </button>\n\n                    <button mat-icon-button color=\"basic\" *ngIf=\"checkRight() && (news.enabled === 0)\" (click)=\"onApproveTickerNews(news.id)\" matTooltip=\"Approve News\" matTooltipPosition=\"below\">\n                      <mat-icon aria-label=\"Approve\">check_circle</mat-icon>\n                    </button>\n                    <button mat-icon-button color=\"warn\" *ngIf=\"checkRight() && (news.enabled === 1)\" (click)=\"onDisApproveTickerNews(news.id)\" matTooltip=\"Disapprove News\" matTooltipPosition=\"below\">\n                      <mat-icon aria-label=\"Approve\">do_not_disturb_on</mat-icon>\n                    </button>\n\n                  </div>\n                </div>\n              </div>\n            </div>\n\n          </div>\n        </mat-card-content>\n\n        <mat-card-actions class=\"chat-footer\">\n          <div align=\"end\">\n            <button mat-raised-button color=\"primary\" [disabled]=\"!selectedTicker\" (click)=\"onAddTickerNews()\">Add News To Ticker</button>\n            <!-- <button mat-button color=\"basic\" [disabled]=\"!selectedNews\" (click)=\"onEdit()\">Edit</button>\n            <button mat-raised-button color=\"warn\" [disabled]=\"!selectedNews\" (click)=\"rejectNews()\">Reject</button>\n            <button mat-raised-button color=\"primary\" [disabled]=\"!selectedNews\" (click)=\"approveNews(selectedNews)\">Approve</button> -->\n          </div>\n          <!-- <div fxLayout=\"row\" layout-align=\"start center\">\n            <mat-form-field class=\"mr-1 ml-1\" fxFlex>\n              <input matInput placeholder=\"Send message\" >\n            </mat-form-field>\n            <button mat-fab color=\"warn\" >\n              <mat-icon>send</mat-icon>\n            </button>\n          </div> -->\n        </mat-card-actions>\n      </mat-sidenav-container>\n    </mat-card>\n  </div>\n</div>\n"],"sourceRoot":"webpack:///"}